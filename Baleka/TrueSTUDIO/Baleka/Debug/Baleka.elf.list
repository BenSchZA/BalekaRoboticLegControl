
Baleka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002908  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08002a90  08002a90  00012a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002c04  08002c04  00012c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002c08  08002c08  00012c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002c0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          00004258  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004268  20004268  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012ca8  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002e2d  00000000  00000000  00032ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009852  00000000  00000000  00035b15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000d90  00000000  00000000  0003f368  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000010e0  00000000  00000000  000400f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006be6  00000000  00000000  000411d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000521c  00000000  00000000  00047dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0004cfda  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000026f8  00000000  00000000  0004d058  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002a78 	.word	0x08002a78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002a78 	.word	0x08002a78

080001c8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80001c8:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <prvResetNextTaskUnblockTime+0x1c>)
 80001ca:	6813      	ldr	r3, [r2, #0]
 80001cc:	6819      	ldr	r1, [r3, #0]
 80001ce:	4b06      	ldr	r3, [pc, #24]	; (80001e8 <prvResetNextTaskUnblockTime+0x20>)
 80001d0:	b911      	cbnz	r1, 80001d8 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80001d2:	f04f 32ff 	mov.w	r2, #4294967295
 80001d6:	e003      	b.n	80001e0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80001d8:	6812      	ldr	r2, [r2, #0]
 80001da:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 80001dc:	68d2      	ldr	r2, [r2, #12]
 80001de:	6852      	ldr	r2, [r2, #4]
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	4770      	bx	lr
 80001e4:	20000030 	.word	0x20000030
 80001e8:	200000fc 	.word	0x200000fc

080001ec <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80001ec:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <prvAddCurrentTaskToDelayedList+0x3c>)
 80001ee:	681a      	ldr	r2, [r3, #0]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80001f0:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80001f2:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
 80001f4:	4a0d      	ldr	r2, [pc, #52]	; (800022c <prvAddCurrentTaskToDelayedList+0x40>)
 80001f6:	6812      	ldr	r2, [r2, #0]
 80001f8:	4290      	cmp	r0, r2
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80001fa:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 80001fc:	d207      	bcs.n	800020e <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80001fe:	4a0c      	ldr	r2, [pc, #48]	; (8000230 <prvAddCurrentTaskToDelayedList+0x44>)
 8000200:	6810      	ldr	r0, [r2, #0]
 8000202:	6819      	ldr	r1, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8000208:	3104      	adds	r1, #4
 800020a:	f000 bd53 	b.w	8000cb4 <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800020e:	4a09      	ldr	r2, [pc, #36]	; (8000234 <prvAddCurrentTaskToDelayedList+0x48>)
 8000210:	6810      	ldr	r0, [r2, #0]
 8000212:	6819      	ldr	r1, [r3, #0]
 8000214:	3104      	adds	r1, #4
 8000216:	f000 fd4d 	bl	8000cb4 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 800021a:	4b07      	ldr	r3, [pc, #28]	; (8000238 <prvAddCurrentTaskToDelayedList+0x4c>)
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 8000220:	bf38      	it	cc
 8000222:	601c      	strcc	r4, [r3, #0]
 8000224:	bd10      	pop	{r4, pc}
 8000226:	bf00      	nop
 8000228:	200000f8 	.word	0x200000f8
 800022c:	20000100 	.word	0x20000100
 8000230:	20000104 	.word	0x20000104
 8000234:	20000030 	.word	0x20000030
 8000238:	200000fc 	.word	0x200000fc

0800023c <xTaskGenericCreate.part.5>:
	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 800023c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000240:	469a      	mov	sl, r3
 8000242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000244:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8000246:	4681      	mov	r9, r0
 8000248:	460e      	mov	r6, r1
 800024a:	4615      	mov	r5, r2
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800024c:	b93b      	cbnz	r3, 800025e <xTaskGenericCreate.part.5+0x22>
 800024e:	0090      	lsls	r0, r2, #2
 8000250:	f000 fd7c 	bl	8000d4c <pvPortMalloc>

		if( pxStack != NULL )
 8000254:	4683      	mov	fp, r0
 8000256:	2800      	cmp	r0, #0
 8000258:	f000 80b2 	beq.w	80003c0 <xTaskGenericCreate.part.5+0x184>
 800025c:	e000      	b.n	8000260 <xTaskGenericCreate.part.5+0x24>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800025e:	469b      	mov	fp, r3

		if( pxStack != NULL )
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8000260:	205c      	movs	r0, #92	; 0x5c
 8000262:	f000 fd73 	bl	8000d4c <pvPortMalloc>

			if( pxNewTCB != NULL )
 8000266:	4604      	mov	r4, r0
 8000268:	b188      	cbz	r0, 800028e <xTaskGenericCreate.part.5+0x52>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800026a:	00ad      	lsls	r5, r5, #2
 800026c:	462a      	mov	r2, r5
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 800026e:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8000272:	21a5      	movs	r1, #165	; 0xa5
 8000274:	4658      	mov	r0, fp
 8000276:	f002 fbf7 	bl	8002a68 <memset>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800027a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800027c:	3d04      	subs	r5, #4
 800027e:	441d      	add	r5, r3
 8000280:	f025 0507 	bic.w	r5, r5, #7
 8000284:	1e73      	subs	r3, r6, #1
 8000286:	f104 0233 	add.w	r2, r4, #51	; 0x33
 800028a:	360f      	adds	r6, #15
 800028c:	e005      	b.n	800029a <xTaskGenericCreate.part.5+0x5e>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 800028e:	4658      	mov	r0, fp
 8000290:	f000 fdee 	bl	8000e70 <vPortFree>
 8000294:	e094      	b.n	80003c0 <xTaskGenericCreate.part.5+0x184>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000296:	429e      	cmp	r6, r3
 8000298:	d006      	beq.n	80002a8 <xTaskGenericCreate.part.5+0x6c>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800029a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800029e:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80002a2:	7819      	ldrb	r1, [r3, #0]
 80002a4:	2900      	cmp	r1, #0
 80002a6:	d1f6      	bne.n	8000296 <xTaskGenericCreate.part.5+0x5a>
 80002a8:	2f06      	cmp	r7, #6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80002aa:	f04f 0800 	mov.w	r8, #0
 80002ae:	46bb      	mov	fp, r7
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80002b0:	f104 0604 	add.w	r6, r4, #4
 80002b4:	bf28      	it	cs
 80002b6:	f04f 0b06 	movcs.w	fp, #6
 80002ba:	4630      	mov	r0, r6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80002bc:	f884 8043 	strb.w	r8, [r4, #67]	; 0x43
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 80002c0:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 80002c4:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 80002c8:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80002cc:	f000 fce3 	bl	8000c96 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80002d0:	f104 0018 	add.w	r0, r4, #24
 80002d4:	f000 fcdf 	bl	8000c96 <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80002d8:	f1cb 0307 	rsb	r3, fp, #7
 80002dc:	61a3      	str	r3, [r4, #24]
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 80002de:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80002e2:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80002e4:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
		pxTCB->eNotifyState = eNotWaitingNotification;
 80002e6:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80002ea:	4652      	mov	r2, sl
 80002ec:	4649      	mov	r1, r9
 80002ee:	4628      	mov	r0, r5
 80002f0:	f000 fb9c 	bl	8000a2c <pxPortInitialiseStack>
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 80002f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80002f6:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 80002f8:	b103      	cbz	r3, 80002fc <xTaskGenericCreate.part.5+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80002fa:	601c      	str	r4, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 80002fc:	f000 fbb8 	bl	8000a70 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8000300:	4a31      	ldr	r2, [pc, #196]	; (80003c8 <xTaskGenericCreate.part.5+0x18c>)
			if( pxCurrentTCB == NULL )
 8000302:	4d32      	ldr	r5, [pc, #200]	; (80003cc <xTaskGenericCreate.part.5+0x190>)

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 8000304:	6813      	ldr	r3, [r2, #0]
 8000306:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 80003f4 <xTaskGenericCreate.part.5+0x1b8>
 800030a:	3301      	adds	r3, #1
 800030c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800030e:	682b      	ldr	r3, [r5, #0]
 8000310:	bb3b      	cbnz	r3, 8000362 <xTaskGenericCreate.part.5+0x126>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8000312:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000314:	6812      	ldr	r2, [r2, #0]
 8000316:	2a01      	cmp	r2, #1
 8000318:	d12b      	bne.n	8000372 <xTaskGenericCreate.part.5+0x136>
 800031a:	4698      	mov	r8, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800031c:	eb09 0008 	add.w	r0, r9, r8
 8000320:	f108 0814 	add.w	r8, r8, #20
 8000324:	f000 fcac 	bl	8000c80 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000328:	f1b8 0f8c 	cmp.w	r8, #140	; 0x8c
 800032c:	d1f6      	bne.n	800031c <xTaskGenericCreate.part.5+0xe0>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800032e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80003f8 <xTaskGenericCreate.part.5+0x1bc>
	vListInitialise( &xDelayedTaskList2 );
 8000332:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80003fc <xTaskGenericCreate.part.5+0x1c0>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8000336:	4650      	mov	r0, sl
 8000338:	f000 fca2 	bl	8000c80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800033c:	4640      	mov	r0, r8
 800033e:	f000 fc9f 	bl	8000c80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8000342:	4823      	ldr	r0, [pc, #140]	; (80003d0 <xTaskGenericCreate.part.5+0x194>)
 8000344:	f000 fc9c 	bl	8000c80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8000348:	4822      	ldr	r0, [pc, #136]	; (80003d4 <xTaskGenericCreate.part.5+0x198>)
 800034a:	f000 fc99 	bl	8000c80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800034e:	4822      	ldr	r0, [pc, #136]	; (80003d8 <xTaskGenericCreate.part.5+0x19c>)
 8000350:	f000 fc96 	bl	8000c80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <xTaskGenericCreate.part.5+0x1a0>)
 8000356:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800035a:	4b21      	ldr	r3, [pc, #132]	; (80003e0 <xTaskGenericCreate.part.5+0x1a4>)
 800035c:	f8c3 8000 	str.w	r8, [r3]
 8000360:	e007      	b.n	8000372 <xTaskGenericCreate.part.5+0x136>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8000362:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <xTaskGenericCreate.part.5+0x1a8>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	b923      	cbnz	r3, 8000372 <xTaskGenericCreate.part.5+0x136>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8000368:	682b      	ldr	r3, [r5, #0]
 800036a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800036c:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
 800036e:	bf28      	it	cs
 8000370:	602c      	strcs	r4, [r5, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8000372:	4a1d      	ldr	r2, [pc, #116]	; (80003e8 <xTaskGenericCreate.part.5+0x1ac>)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8000374:	491d      	ldr	r1, [pc, #116]	; (80003ec <xTaskGenericCreate.part.5+0x1b0>)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8000376:	6813      	ldr	r3, [r2, #0]
 8000378:	3301      	adds	r3, #1
 800037a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 800037c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			uxTaskNumber++;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800037e:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8000380:	680b      	ldr	r3, [r1, #0]
 8000382:	2401      	movs	r4, #1
 8000384:	fa04 f002 	lsl.w	r0, r4, r2
 8000388:	4303      	orrs	r3, r0
 800038a:	2014      	movs	r0, #20
 800038c:	600b      	str	r3, [r1, #0]
 800038e:	fb00 9002 	mla	r0, r0, r2, r9
 8000392:	4631      	mov	r1, r6
 8000394:	f000 fc82 	bl	8000c9c <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8000398:	f000 fb8c 	bl	8000ab4 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <xTaskGenericCreate.part.5+0x1a8>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	b15b      	cbz	r3, 80003ba <xTaskGenericCreate.part.5+0x17e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80003a2:	682b      	ldr	r3, [r5, #0]
 80003a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003a6:	429f      	cmp	r7, r3
 80003a8:	d907      	bls.n	80003ba <xTaskGenericCreate.part.5+0x17e>
			{
				taskYIELD_IF_USING_PREEMPTION();
 80003aa:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <xTaskGenericCreate.part.5+0x1b4>)
 80003ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	f3bf 8f4f 	dsb	sy
 80003b6:	f3bf 8f6f 	isb	sy
	{
		if( xSchedulerRunning != pdFALSE )
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80003ba:	4620      	mov	r0, r4
 80003bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80003c0:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 80003c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003c8:	20000148 	.word	0x20000148
 80003cc:	200000f8 	.word	0x200000f8
 80003d0:	20000108 	.word	0x20000108
 80003d4:	2000003c 	.word	0x2000003c
 80003d8:	20000050 	.word	0x20000050
 80003dc:	20000030 	.word	0x20000030
 80003e0:	20000104 	.word	0x20000104
 80003e4:	20000034 	.word	0x20000034
 80003e8:	2000011c 	.word	0x2000011c
 80003ec:	2000014c 	.word	0x2000014c
 80003f0:	e000ed04 	.word	0xe000ed04
 80003f4:	20000068 	.word	0x20000068
 80003f8:	20000120 	.word	0x20000120
 80003fc:	20000134 	.word	0x20000134

08000400 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8000400:	b470      	push	{r4, r5, r6}
 8000402:	ac03      	add	r4, sp, #12
 8000404:	cc70      	ldmia	r4, {r4, r5, r6}
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 8000406:	b940      	cbnz	r0, 800041a <xTaskGenericCreate+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800040c:	f383 8811 	msr	BASEPRI, r3
 8000410:	f3bf 8f6f 	isb	sy
 8000414:	f3bf 8f4f 	dsb	sy
 8000418:	e7fe      	b.n	8000418 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800041a:	2c06      	cmp	r4, #6
 800041c:	d908      	bls.n	8000430 <xTaskGenericCreate+0x30>
 800041e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000422:	f383 8811 	msr	BASEPRI, r3
 8000426:	f3bf 8f6f 	isb	sy
 800042a:	f3bf 8f4f 	dsb	sy
 800042e:	e7fe      	b.n	800042e <xTaskGenericCreate+0x2e>
 8000430:	9605      	str	r6, [sp, #20]
 8000432:	9504      	str	r5, [sp, #16]
 8000434:	9403      	str	r4, [sp, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 8000436:	bc70      	pop	{r4, r5, r6}
 8000438:	f7ff bf00 	b.w	800023c <xTaskGenericCreate.part.5>

0800043c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	2400      	movs	r4, #0
 8000440:	9402      	str	r4, [sp, #8]
 8000442:	9401      	str	r4, [sp, #4]
 8000444:	9400      	str	r4, [sp, #0]
 8000446:	4623      	mov	r3, r4
 8000448:	2280      	movs	r2, #128	; 0x80
 800044a:	4913      	ldr	r1, [pc, #76]	; (8000498 <vTaskStartScheduler+0x5c>)
 800044c:	4813      	ldr	r0, [pc, #76]	; (800049c <vTaskStartScheduler+0x60>)
 800044e:	f7ff fef5 	bl	800023c <xTaskGenericCreate.part.5>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000452:	2801      	cmp	r0, #1
 8000454:	d114      	bne.n	8000480 <vTaskStartScheduler+0x44>
 8000456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800045a:	f383 8811 	msr	BASEPRI, r3
 800045e:	f3bf 8f6f 	isb	sy
 8000462:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000466:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <vTaskStartScheduler+0x64>)
 8000468:	f04f 32ff 	mov.w	r2, #4294967295
 800046c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800046e:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <vTaskStartScheduler+0x68>)
 8000470:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8000472:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <vTaskStartScheduler+0x6c>)
 8000474:	601c      	str	r4, [r3, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8000476:	b004      	add	sp, #16
 8000478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800047c:	f000 bb8a 	b.w	8000b94 <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8000480:	b940      	cbnz	r0, 8000494 <vTaskStartScheduler+0x58>
 8000482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000486:	f383 8811 	msr	BASEPRI, r3
 800048a:	f3bf 8f6f 	isb	sy
 800048e:	f3bf 8f4f 	dsb	sy
 8000492:	e7fe      	b.n	8000492 <vTaskStartScheduler+0x56>
	}
}
 8000494:	b004      	add	sp, #16
 8000496:	bd10      	pop	{r4, pc}
 8000498:	08002b7c 	.word	0x08002b7c
 800049c:	08000755 	.word	0x08000755
 80004a0:	200000fc 	.word	0x200000fc
 80004a4:	20000034 	.word	0x20000034
 80004a8:	20000100 	.word	0x20000100

080004ac <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80004ac:	4a02      	ldr	r2, [pc, #8]	; (80004b8 <vTaskSuspendAll+0xc>)
 80004ae:	6813      	ldr	r3, [r2, #0]
 80004b0:	3301      	adds	r3, #1
 80004b2:	6013      	str	r3, [r2, #0]
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	200000f4 	.word	0x200000f4

080004bc <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80004bc:	4b40      	ldr	r3, [pc, #256]	; (80005c0 <xTaskIncrementTick+0x104>)
 80004be:	681b      	ldr	r3, [r3, #0]

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80004c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d13c      	bne.n	8000542 <xTaskIncrementTick+0x86>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 80004c8:	4b3e      	ldr	r3, [pc, #248]	; (80005c4 <xTaskIncrementTick+0x108>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	3201      	adds	r2, #1
 80004ce:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80004d0:	681d      	ldr	r5, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
 80004d2:	b9bd      	cbnz	r5, 8000504 <xTaskIncrementTick+0x48>
			{
				taskSWITCH_DELAYED_LISTS();
 80004d4:	4b3c      	ldr	r3, [pc, #240]	; (80005c8 <xTaskIncrementTick+0x10c>)
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	6812      	ldr	r2, [r2, #0]
 80004da:	b142      	cbz	r2, 80004ee <xTaskIncrementTick+0x32>
 80004dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004e0:	f383 8811 	msr	BASEPRI, r3
 80004e4:	f3bf 8f6f 	isb	sy
 80004e8:	f3bf 8f4f 	dsb	sy
 80004ec:	e7fe      	b.n	80004ec <xTaskIncrementTick+0x30>
 80004ee:	4a37      	ldr	r2, [pc, #220]	; (80005cc <xTaskIncrementTick+0x110>)
 80004f0:	6819      	ldr	r1, [r3, #0]
 80004f2:	6810      	ldr	r0, [r2, #0]
 80004f4:	6018      	str	r0, [r3, #0]
 80004f6:	6011      	str	r1, [r2, #0]
 80004f8:	4a35      	ldr	r2, [pc, #212]	; (80005d0 <xTaskIncrementTick+0x114>)
 80004fa:	6813      	ldr	r3, [r2, #0]
 80004fc:	3301      	adds	r3, #1
 80004fe:	6013      	str	r3, [r2, #0]
 8000500:	f7ff fe62 	bl	80001c8 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8000504:	4c33      	ldr	r4, [pc, #204]	; (80005d4 <xTaskIncrementTick+0x118>)
 8000506:	9401      	str	r4, [sp, #4]
 8000508:	6823      	ldr	r3, [r4, #0]
 800050a:	4e33      	ldr	r6, [pc, #204]	; (80005d8 <xTaskIncrementTick+0x11c>)
 800050c:	4f33      	ldr	r7, [pc, #204]	; (80005dc <xTaskIncrementTick+0x120>)
 800050e:	429d      	cmp	r5, r3
 8000510:	f04f 0b00 	mov.w	fp, #0
 8000514:	d30b      	bcc.n	800052e <xTaskIncrementTick+0x72>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000516:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80005c8 <xTaskIncrementTick+0x10c>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 800051a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80005e8 <xTaskIncrementTick+0x12c>
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800051e:	f8d8 2000 	ldr.w	r2, [r8]
 8000522:	6812      	ldr	r2, [r2, #0]
 8000524:	b9a2      	cbnz	r2, 8000550 <xTaskIncrementTick+0x94>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8000526:	9b01      	ldr	r3, [sp, #4]
 8000528:	f04f 32ff 	mov.w	r2, #4294967295
 800052c:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000532:	2214      	movs	r2, #20
 8000534:	434a      	muls	r2, r1
 8000536:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 8000538:	2a02      	cmp	r2, #2
 800053a:	bf28      	it	cs
 800053c:	f04f 0b01 	movcs.w	fp, #1
 8000540:	e034      	b.n	80005ac <xTaskIncrementTick+0xf0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000542:	4a27      	ldr	r2, [pc, #156]	; (80005e0 <xTaskIncrementTick+0x124>)
 8000544:	6813      	ldr	r3, [r2, #0]
 8000546:	3301      	adds	r3, #1
 8000548:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800054a:	f04f 0b00 	mov.w	fp, #0
 800054e:	e02d      	b.n	80005ac <xTaskIncrementTick+0xf0>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000550:	f8d8 2000 	ldr.w	r2, [r8]
 8000554:	68d2      	ldr	r2, [r2, #12]
 8000556:	68d4      	ldr	r4, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8000558:	6861      	ldr	r1, [r4, #4]

						if( xConstTickCount < xItemValue )
 800055a:	428d      	cmp	r5, r1
 800055c:	d202      	bcs.n	8000564 <xTaskIncrementTick+0xa8>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 800055e:	9b01      	ldr	r3, [sp, #4]
 8000560:	6019      	str	r1, [r3, #0]
							break;
 8000562:	e7e4      	b.n	800052e <xTaskIncrementTick+0x72>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000564:	f104 0a04 	add.w	sl, r4, #4
 8000568:	4650      	mov	r0, sl
 800056a:	f000 fbbb 	bl	8000ce4 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800056e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000570:	b119      	cbz	r1, 800057a <xTaskIncrementTick+0xbe>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000572:	f104 0018 	add.w	r0, r4, #24
 8000576:	f000 fbb5 	bl	8000ce4 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 800057a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800057c:	f8d9 1000 	ldr.w	r1, [r9]
 8000580:	2301      	movs	r3, #1
 8000582:	fa03 fe00 	lsl.w	lr, r3, r0
 8000586:	ea4e 0101 	orr.w	r1, lr, r1
 800058a:	f04f 0e14 	mov.w	lr, #20
 800058e:	f8c9 1000 	str.w	r1, [r9]
 8000592:	fb0e 6000 	mla	r0, lr, r0, r6
 8000596:	4651      	mov	r1, sl
 8000598:	f000 fb80 	bl	8000c9c <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800059c:	6838      	ldr	r0, [r7, #0]
 800059e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80005a0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 80005a2:	4291      	cmp	r1, r2
 80005a4:	bf28      	it	cs
 80005a6:	f04f 0b01 	movcs.w	fp, #1
 80005aa:	e7b8      	b.n	800051e <xTaskIncrementTick+0x62>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80005ac:	4a0d      	ldr	r2, [pc, #52]	; (80005e4 <xTaskIncrementTick+0x128>)
 80005ae:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 80005b0:	2a00      	cmp	r2, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 80005b8:	4658      	mov	r0, fp
 80005ba:	b003      	add	sp, #12
 80005bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005c0:	200000f4 	.word	0x200000f4
 80005c4:	20000100 	.word	0x20000100
 80005c8:	20000030 	.word	0x20000030
 80005cc:	20000104 	.word	0x20000104
 80005d0:	2000002c 	.word	0x2000002c
 80005d4:	200000fc 	.word	0x200000fc
 80005d8:	20000068 	.word	0x20000068
 80005dc:	200000f8 	.word	0x200000f8
 80005e0:	20000064 	.word	0x20000064
 80005e4:	20000150 	.word	0x20000150
 80005e8:	2000014c 	.word	0x2000014c

080005ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80005ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80005f0:	4c30      	ldr	r4, [pc, #192]	; (80006b4 <xTaskResumeAll+0xc8>)
 80005f2:	6823      	ldr	r3, [r4, #0]
 80005f4:	b943      	cbnz	r3, 8000608 <xTaskResumeAll+0x1c>
 80005f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005fa:	f383 8811 	msr	BASEPRI, r3
 80005fe:	f3bf 8f6f 	isb	sy
 8000602:	f3bf 8f4f 	dsb	sy
 8000606:	e7fe      	b.n	8000606 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000608:	f000 fa32 	bl	8000a70 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800060c:	6823      	ldr	r3, [r4, #0]
 800060e:	3b01      	subs	r3, #1
 8000610:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000612:	6823      	ldr	r3, [r4, #0]
 8000614:	b10b      	cbz	r3, 800061a <xTaskResumeAll+0x2e>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8000616:	2400      	movs	r4, #0
 8000618:	e047      	b.n	80006aa <xTaskResumeAll+0xbe>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800061a:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <xTaskResumeAll+0xcc>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d0f9      	beq.n	8000616 <xTaskResumeAll+0x2a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000622:	4d26      	ldr	r5, [pc, #152]	; (80006bc <xTaskResumeAll+0xd0>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8000624:	4e26      	ldr	r6, [pc, #152]	; (80006c0 <xTaskResumeAll+0xd4>)
 8000626:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80006d4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800062a:	682b      	ldr	r3, [r5, #0]
 800062c:	b303      	cbz	r3, 8000670 <xTaskResumeAll+0x84>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800062e:	68eb      	ldr	r3, [r5, #12]
 8000630:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000632:	f104 0904 	add.w	r9, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000636:	f104 0018 	add.w	r0, r4, #24
 800063a:	f000 fb53 	bl	8000ce4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800063e:	4648      	mov	r0, r9
 8000640:	f000 fb50 	bl	8000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000644:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000646:	6833      	ldr	r3, [r6, #0]
 8000648:	2701      	movs	r7, #1
 800064a:	fa07 f102 	lsl.w	r1, r7, r2
 800064e:	2014      	movs	r0, #20
 8000650:	430b      	orrs	r3, r1
 8000652:	fb00 8002 	mla	r0, r0, r2, r8
 8000656:	4649      	mov	r1, r9
 8000658:	6033      	str	r3, [r6, #0]
 800065a:	f000 fb1f 	bl	8000c9c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <xTaskResumeAll+0xd8>)
 8000660:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000666:	429a      	cmp	r2, r3
 8000668:	d3df      	bcc.n	800062a <xTaskResumeAll+0x3e>
					{
						xYieldPending = pdTRUE;
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <xTaskResumeAll+0xdc>)
 800066c:	601f      	str	r7, [r3, #0]
 800066e:	e7da      	b.n	8000626 <xTaskResumeAll+0x3a>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8000670:	4c16      	ldr	r4, [pc, #88]	; (80006cc <xTaskResumeAll+0xe0>)
 8000672:	6823      	ldr	r3, [r4, #0]
 8000674:	b963      	cbnz	r3, 8000690 <xTaskResumeAll+0xa4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <xTaskResumeAll+0xdc>)
 8000678:	681c      	ldr	r4, [r3, #0]
 800067a:	2c01      	cmp	r4, #1
 800067c:	d1cb      	bne.n	8000616 <xTaskResumeAll+0x2a>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <xTaskResumeAll+0xe4>)
 8000680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	f3bf 8f4f 	dsb	sy
 800068a:	f3bf 8f6f 	isb	sy
 800068e:	e00c      	b.n	80006aa <xTaskResumeAll+0xbe>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 8000690:	4d0d      	ldr	r5, [pc, #52]	; (80006c8 <xTaskResumeAll+0xdc>)
 8000692:	2601      	movs	r6, #1
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8000694:	6823      	ldr	r3, [r4, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d0ed      	beq.n	8000676 <xTaskResumeAll+0x8a>
					{
						if( xTaskIncrementTick() != pdFALSE )
 800069a:	f7ff ff0f 	bl	80004bc <xTaskIncrementTick>
 800069e:	b100      	cbz	r0, 80006a2 <xTaskResumeAll+0xb6>
						{
							xYieldPending = pdTRUE;
 80006a0:	602e      	str	r6, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 80006a2:	6823      	ldr	r3, [r4, #0]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	6023      	str	r3, [r4, #0]
 80006a8:	e7f4      	b.n	8000694 <xTaskResumeAll+0xa8>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80006aa:	f000 fa03 	bl	8000ab4 <vPortExitCritical>

	return xAlreadyYielded;
}
 80006ae:	4620      	mov	r0, r4
 80006b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006b4:	200000f4 	.word	0x200000f4
 80006b8:	20000148 	.word	0x20000148
 80006bc:	20000108 	.word	0x20000108
 80006c0:	2000014c 	.word	0x2000014c
 80006c4:	200000f8 	.word	0x200000f8
 80006c8:	20000150 	.word	0x20000150
 80006cc:	20000064 	.word	0x20000064
 80006d0:	e000ed04 	.word	0xe000ed04
 80006d4:	20000068 	.word	0x20000068

080006d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80006d8:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80006da:	b940      	cbnz	r0, 80006ee <vTaskDelay+0x16>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <vTaskDelay+0x68>)
 80006de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	f3bf 8f4f 	dsb	sy
 80006e8:	f3bf 8f6f 	isb	sy
 80006ec:	bd38      	pop	{r3, r4, r5, pc}


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <vTaskDelay+0x6c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	b143      	cbz	r3, 8000706 <vTaskDelay+0x2e>
 80006f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006f8:	f383 8811 	msr	BASEPRI, r3
 80006fc:	f3bf 8f6f 	isb	sy
 8000700:	f3bf 8f4f 	dsb	sy
 8000704:	e7fe      	b.n	8000704 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8000706:	f7ff fed1 	bl	80004ac <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <vTaskDelay+0x70>)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800070c:	4d0f      	ldr	r5, [pc, #60]	; (800074c <vTaskDelay+0x74>)
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	18c4      	adds	r4, r0, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8000712:	6828      	ldr	r0, [r5, #0]
 8000714:	3004      	adds	r0, #4
 8000716:	f000 fae5 	bl	8000ce4 <uxListRemove>
 800071a:	b940      	cbnz	r0, 800072e <vTaskDelay+0x56>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800071c:	682b      	ldr	r3, [r5, #0]
 800071e:	490c      	ldr	r1, [pc, #48]	; (8000750 <vTaskDelay+0x78>)
 8000720:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000722:	680a      	ldr	r2, [r1, #0]
 8000724:	2301      	movs	r3, #1
 8000726:	4083      	lsls	r3, r0
 8000728:	ea22 0303 	bic.w	r3, r2, r3
 800072c:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800072e:	4620      	mov	r0, r4
 8000730:	f7ff fd5c 	bl	80001ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000734:	f7ff ff5a 	bl	80005ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000738:	2800      	cmp	r0, #0
 800073a:	d0cf      	beq.n	80006dc <vTaskDelay+0x4>
 800073c:	bd38      	pop	{r3, r4, r5, pc}
 800073e:	bf00      	nop
 8000740:	e000ed04 	.word	0xe000ed04
 8000744:	200000f4 	.word	0x200000f4
 8000748:	20000100 	.word	0x20000100
 800074c:	200000f8 	.word	0x200000f8
 8000750:	2000014c 	.word	0x2000014c

08000754 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000754:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8000756:	4d18      	ldr	r5, [pc, #96]	; (80007b8 <prvIdleTask+0x64>)
 8000758:	462e      	mov	r6, r5
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800075a:	4f18      	ldr	r7, [pc, #96]	; (80007bc <prvIdleTask+0x68>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800075c:	682b      	ldr	r3, [r5, #0]
 800075e:	b1f3      	cbz	r3, 800079e <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 8000760:	f7ff fea4 	bl	80004ac <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8000764:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 8000766:	f7ff ff41 	bl	80005ec <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800076a:	2c00      	cmp	r4, #0
 800076c:	d0f6      	beq.n	800075c <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800076e:	f000 f97f 	bl	8000a70 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <prvIdleTask+0x68>)
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000778:	1d20      	adds	r0, r4, #4
 800077a:	f000 fab3 	bl	8000ce4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800077e:	4a10      	ldr	r2, [pc, #64]	; (80007c0 <prvIdleTask+0x6c>)
 8000780:	6813      	ldr	r3, [r2, #0]
 8000782:	3b01      	subs	r3, #1
 8000784:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 8000786:	6833      	ldr	r3, [r6, #0]
 8000788:	3b01      	subs	r3, #1
 800078a:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 800078c:	f000 f992 	bl	8000ab4 <vPortExitCritical>
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 8000790:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000792:	f000 fb6d 	bl	8000e70 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 8000796:	4620      	mov	r0, r4
 8000798:	f000 fb6a 	bl	8000e70 <vPortFree>
 800079c:	e7de      	b.n	800075c <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <prvIdleTask+0x70>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d9d9      	bls.n	800075a <prvIdleTask+0x6>
			{
				taskYIELD();
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <prvIdleTask+0x74>)
 80007a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	f3bf 8f4f 	dsb	sy
 80007b2:	f3bf 8f6f 	isb	sy
 80007b6:	e7d0      	b.n	800075a <prvIdleTask+0x6>
 80007b8:	20000038 	.word	0x20000038
 80007bc:	2000003c 	.word	0x2000003c
 80007c0:	20000148 	.word	0x20000148
 80007c4:	20000068 	.word	0x20000068
 80007c8:	e000ed04 	.word	0xe000ed04

080007cc <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <vTaskSwitchContext+0x60>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <vTaskSwitchContext+0x64>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80007d2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80007d4:	b10a      	cbz	r2, 80007da <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80007d6:	2201      	movs	r2, #1
 80007d8:	e025      	b.n	8000826 <vTaskSwitchContext+0x5a>
	}
	else
	{
		xYieldPending = pdFALSE;
 80007da:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <vTaskSwitchContext+0x68>)
 80007de:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80007e0:	fab3 f383 	clz	r3, r3
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	f1c3 031f 	rsb	r3, r3, #31
 80007ea:	2214      	movs	r2, #20
 80007ec:	4912      	ldr	r1, [pc, #72]	; (8000838 <vTaskSwitchContext+0x6c>)
 80007ee:	435a      	muls	r2, r3
 80007f0:	1888      	adds	r0, r1, r2
 80007f2:	588c      	ldr	r4, [r1, r2]
 80007f4:	b944      	cbnz	r4, 8000808 <vTaskSwitchContext+0x3c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80007f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007fa:	f383 8811 	msr	BASEPRI, r3
 80007fe:	f3bf 8f6f 	isb	sy
 8000802:	f3bf 8f4f 	dsb	sy
 8000806:	e7fe      	b.n	8000806 <vTaskSwitchContext+0x3a>
 8000808:	6844      	ldr	r4, [r0, #4]
 800080a:	3208      	adds	r2, #8
 800080c:	6864      	ldr	r4, [r4, #4]
 800080e:	6044      	str	r4, [r0, #4]
 8000810:	440a      	add	r2, r1
 8000812:	4294      	cmp	r4, r2
 8000814:	bf04      	itt	eq
 8000816:	6862      	ldreq	r2, [r4, #4]
 8000818:	6042      	streq	r2, [r0, #4]
 800081a:	2214      	movs	r2, #20
 800081c:	fb02 1303 	mla	r3, r2, r3, r1
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	68da      	ldr	r2, [r3, #12]
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <vTaskSwitchContext+0x70>)
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	bd10      	pop	{r4, pc}
 800082a:	bf00      	nop
 800082c:	200000f4 	.word	0x200000f4
 8000830:	20000150 	.word	0x20000150
 8000834:	2000014c 	.word	0x2000014c
 8000838:	20000068 	.word	0x20000068
 800083c:	200000f8 	.word	0x200000f8

08000840 <xTaskRemoveFromEventList>:
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8000840:	68c3      	ldr	r3, [r0, #12]

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8000842:	b570      	push	{r4, r5, r6, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8000844:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8000846:	b944      	cbnz	r4, 800085a <xTaskRemoveFromEventList+0x1a>
 8000848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800084c:	f383 8811 	msr	BASEPRI, r3
 8000850:	f3bf 8f6f 	isb	sy
 8000854:	f3bf 8f4f 	dsb	sy
 8000858:	e7fe      	b.n	8000858 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800085a:	f104 0518 	add.w	r5, r4, #24
 800085e:	4628      	mov	r0, r5
 8000860:	f000 fa40 	bl	8000ce4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <xTaskRemoveFromEventList+0x6c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	b983      	cbnz	r3, 800088c <xTaskRemoveFromEventList+0x4c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800086a:	1d26      	adds	r6, r4, #4
 800086c:	4630      	mov	r0, r6
 800086e:	f000 fa39 	bl	8000ce4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8000872:	490f      	ldr	r1, [pc, #60]	; (80008b0 <xTaskRemoveFromEventList+0x70>)
 8000874:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8000876:	680a      	ldr	r2, [r1, #0]
 8000878:	2301      	movs	r3, #1
 800087a:	40ab      	lsls	r3, r5
 800087c:	4313      	orrs	r3, r2
 800087e:	600b      	str	r3, [r1, #0]
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <xTaskRemoveFromEventList+0x74>)
 8000882:	2014      	movs	r0, #20
 8000884:	4631      	mov	r1, r6
 8000886:	fb00 3005 	mla	r0, r0, r5, r3
 800088a:	e001      	b.n	8000890 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800088c:	480a      	ldr	r0, [pc, #40]	; (80008b8 <xTaskRemoveFromEventList+0x78>)
 800088e:	4629      	mov	r1, r5
 8000890:	f000 fa04 	bl	8000c9c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <xTaskRemoveFromEventList+0x7c>)
 8000896:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089c:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800089e:	bf83      	ittte	hi
 80008a0:	4b07      	ldrhi	r3, [pc, #28]	; (80008c0 <xTaskRemoveFromEventList+0x80>)
 80008a2:	2001      	movhi	r0, #1
 80008a4:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
 80008a6:	2000      	movls	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 80008a8:	bd70      	pop	{r4, r5, r6, pc}
 80008aa:	bf00      	nop
 80008ac:	200000f4 	.word	0x200000f4
 80008b0:	2000014c 	.word	0x2000014c
 80008b4:	20000068 	.word	0x20000068
 80008b8:	20000108 	.word	0x20000108
 80008bc:	200000f8 	.word	0x200000f8
 80008c0:	20000150 	.word	0x20000150

080008c4 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <xTaskGetSchedulerState+0x18>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	b133      	cbz	r3, 80008d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80008ca:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <xTaskGetSchedulerState+0x1c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80008d0:	bf0c      	ite	eq
 80008d2:	2002      	moveq	r0, #2
 80008d4:	2000      	movne	r0, #0
 80008d6:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80008d8:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 80008da:	4770      	bx	lr
 80008dc:	20000034 	.word	0x20000034
 80008e0:	200000f4 	.word	0x200000f4

080008e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80008e4:	b538      	push	{r3, r4, r5, lr}
 80008e6:	460d      	mov	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80008e8:	4604      	mov	r4, r0
 80008ea:	b940      	cbnz	r0, 80008fe <xQueueGenericReset+0x1a>
 80008ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008f0:	f383 8811 	msr	BASEPRI, r3
 80008f4:	f3bf 8f6f 	isb	sy
 80008f8:	f3bf 8f4f 	dsb	sy
 80008fc:	e7fe      	b.n	80008fc <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 80008fe:	f000 f8b7 	bl	8000a70 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000902:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000904:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000906:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000908:	60a2      	str	r2, [r4, #8]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800090a:	4343      	muls	r3, r0
 800090c:	18d1      	adds	r1, r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800090e:	1a1b      	subs	r3, r3, r0
 8000910:	4413      	add	r3, r2

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000912:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000914:	60e3      	str	r3, [r4, #12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000916:	2100      	movs	r1, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8000918:	f04f 33ff 	mov.w	r3, #4294967295
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800091c:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 800091e:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8000920:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8000922:	b985      	cbnz	r5, 8000946 <xQueueGenericReset+0x62>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000924:	6923      	ldr	r3, [r4, #16]
 8000926:	b1b3      	cbz	r3, 8000956 <xQueueGenericReset+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8000928:	f104 0010 	add.w	r0, r4, #16
 800092c:	f7ff ff88 	bl	8000840 <xTaskRemoveFromEventList>
 8000930:	2801      	cmp	r0, #1
 8000932:	d110      	bne.n	8000956 <xQueueGenericReset+0x72>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <xQueueGenericReset+0x7c>)
 8000936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	f3bf 8f4f 	dsb	sy
 8000940:	f3bf 8f6f 	isb	sy
 8000944:	e007      	b.n	8000956 <xQueueGenericReset+0x72>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000946:	f104 0010 	add.w	r0, r4, #16
 800094a:	f000 f999 	bl	8000c80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800094e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000952:	f000 f995 	bl	8000c80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000956:	f000 f8ad 	bl	8000ab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 800095a:	2001      	movs	r0, #1
 800095c:	bd38      	pop	{r3, r4, r5, pc}
 800095e:	bf00      	nop
 8000960:	e000ed04 	.word	0xe000ed04

08000964 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8000964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000966:	460d      	mov	r5, r1
 8000968:	4617      	mov	r7, r2

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800096a:	4606      	mov	r6, r0
 800096c:	b940      	cbnz	r0, 8000980 <xQueueGenericCreate+0x1c>
 800096e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000972:	f383 8811 	msr	BASEPRI, r3
 8000976:	f3bf 8f6f 	isb	sy
 800097a:	f3bf 8f4f 	dsb	sy
 800097e:	e7fe      	b.n	800097e <xQueueGenericCreate+0x1a>

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000980:	b111      	cbz	r1, 8000988 <xQueueGenericCreate+0x24>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000982:	4348      	muls	r0, r1
 8000984:	3001      	adds	r0, #1
 8000986:	e000      	b.n	800098a <xQueueGenericCreate+0x26>
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
 8000988:	4608      	mov	r0, r1
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800098a:	3054      	adds	r0, #84	; 0x54
 800098c:	f000 f9de 	bl	8000d4c <pvPortMalloc>

	if( pxNewQueue != NULL )
 8000990:	4604      	mov	r4, r0
 8000992:	b130      	cbz	r0, 80009a2 <xQueueGenericCreate+0x3e>
	{
		if( uxItemSize == ( UBaseType_t ) 0 )
 8000994:	b90d      	cbnz	r5, 800099a <xQueueGenericCreate+0x36>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000996:	6020      	str	r0, [r4, #0]
 8000998:	e00c      	b.n	80009b4 <xQueueGenericCreate+0x50>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800099a:	f100 0354 	add.w	r3, r0, #84	; 0x54
 800099e:	6003      	str	r3, [r0, #0]
 80009a0:	e008      	b.n	80009b4 <xQueueGenericCreate+0x50>
 80009a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009a6:	f383 8811 	msr	BASEPRI, r3
 80009aa:	f3bf 8f6f 	isb	sy
 80009ae:	f3bf 8f4f 	dsb	sy
 80009b2:	e7fe      	b.n	80009b2 <xQueueGenericCreate+0x4e>
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
 80009b4:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 80009b6:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80009b8:	2101      	movs	r1, #1
 80009ba:	4620      	mov	r0, r4
 80009bc:	f7ff ff92 	bl	80008e4 <xQueueGenericReset>

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
 80009c0:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
	}

	configASSERT( xReturn );

	return xReturn;
}
 80009c4:	4620      	mov	r0, r4
 80009c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080009c8 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <prvTaskExitError+0x2c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	3301      	adds	r3, #1
 80009ce:	d008      	beq.n	80009e2 <prvTaskExitError+0x1a>
 80009d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009d4:	f383 8811 	msr	BASEPRI, r3
 80009d8:	f3bf 8f6f 	isb	sy
 80009dc:	f3bf 8f4f 	dsb	sy
 80009e0:	e7fe      	b.n	80009e0 <prvTaskExitError+0x18>
 80009e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009e6:	f383 8811 	msr	BASEPRI, r3
 80009ea:	f3bf 8f6f 	isb	sy
 80009ee:	f3bf 8f4f 	dsb	sy
 80009f2:	e7fe      	b.n	80009f2 <prvTaskExitError+0x2a>
 80009f4:	20000000 	.word	0x20000000

080009f8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80009f8:	4806      	ldr	r0, [pc, #24]	; (8000a14 <prvPortStartFirstTask+0x1c>)
 80009fa:	6800      	ldr	r0, [r0, #0]
 80009fc:	6800      	ldr	r0, [r0, #0]
 80009fe:	f380 8808 	msr	MSP, r0
 8000a02:	b662      	cpsie	i
 8000a04:	b661      	cpsie	f
 8000a06:	f3bf 8f4f 	dsb	sy
 8000a0a:	f3bf 8f6f 	isb	sy
 8000a0e:	df00      	svc	0
 8000a10:	bf00      	nop
 8000a12:	0000      	.short	0x0000
 8000a14:	e000ed08 	.word	0xe000ed08

08000a18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000a18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000a28 <vPortEnableVFP+0x10>
 8000a1c:	6801      	ldr	r1, [r0, #0]
 8000a1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a22:	6001      	str	r1, [r0, #0]
 8000a24:	4770      	bx	lr
 8000a26:	0000      	.short	0x0000
 8000a28:	e000ed88 	.word	0xe000ed88

08000a2c <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000a2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8000a30:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <pxPortInitialiseStack+0x20>)
 8000a36:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000a3a:	f06f 0302 	mvn.w	r3, #2
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000a3e:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000a42:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8000a46:	3844      	subs	r0, #68	; 0x44
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	080009c9 	.word	0x080009c9

08000a50 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <pxCurrentTCBConst2>)
 8000a52:	6819      	ldr	r1, [r3, #0]
 8000a54:	6808      	ldr	r0, [r1, #0]
 8000a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a5a:	f380 8809 	msr	PSP, r0
 8000a5e:	f3bf 8f6f 	isb	sy
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	f380 8811 	msr	BASEPRI, r0
 8000a6a:	4770      	bx	lr

08000a6c <pxCurrentTCBConst2>:
 8000a6c:	200000f8 	.word	0x200000f8

08000a70 <vPortEnterCritical>:
 8000a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a74:	f383 8811 	msr	BASEPRI, r3
 8000a78:	f3bf 8f6f 	isb	sy
 8000a7c:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000a80:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <vPortEnterCritical+0x3c>)
 8000a82:	6813      	ldr	r3, [r2, #0]
 8000a84:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000a86:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000a88:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000a8a:	d10d      	bne.n	8000aa8 <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <vPortEnterCritical+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000a94:	d008      	beq.n	8000aa8 <vPortEnterCritical+0x38>
 8000a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a9a:	f383 8811 	msr	BASEPRI, r3
 8000a9e:	f3bf 8f6f 	isb	sy
 8000aa2:	f3bf 8f4f 	dsb	sy
 8000aa6:	e7fe      	b.n	8000aa6 <vPortEnterCritical+0x36>
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	e000ed04 	.word	0xe000ed04

08000ab4 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8000ab4:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <vPortExitCritical+0x24>)
 8000ab6:	6813      	ldr	r3, [r2, #0]
 8000ab8:	b943      	cbnz	r3, 8000acc <vPortExitCritical+0x18>
 8000aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000abe:	f383 8811 	msr	BASEPRI, r3
 8000ac2:	f3bf 8f6f 	isb	sy
 8000ac6:	f3bf 8f4f 	dsb	sy
 8000aca:	e7fe      	b.n	8000aca <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8000acc:	3b01      	subs	r3, #1
 8000ace:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000ad0:	b90b      	cbnz	r3, 8000ad6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000ad2:	f383 8811 	msr	BASEPRI, r3
 8000ad6:	4770      	bx	lr
 8000ad8:	20000000 	.word	0x20000000

08000adc <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000adc:	f3ef 8009 	mrs	r0, PSP
 8000ae0:	f3bf 8f6f 	isb	sy
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <pxCurrentTCBConst>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	f01e 0f10 	tst.w	lr, #16
 8000aec:	bf08      	it	eq
 8000aee:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000af2:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000af6:	6010      	str	r0, [r2, #0]
 8000af8:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000afc:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000b00:	f380 8811 	msr	BASEPRI, r0
 8000b04:	f3bf 8f4f 	dsb	sy
 8000b08:	f3bf 8f6f 	isb	sy
 8000b0c:	f7ff fe5e 	bl	80007cc <vTaskSwitchContext>
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	f380 8811 	msr	BASEPRI, r0
 8000b18:	bc08      	pop	{r3}
 8000b1a:	6819      	ldr	r1, [r3, #0]
 8000b1c:	6808      	ldr	r0, [r1, #0]
 8000b1e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b22:	f01e 0f10 	tst.w	lr, #16
 8000b26:	bf08      	it	eq
 8000b28:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000b2c:	f380 8809 	msr	PSP, r0
 8000b30:	f3bf 8f6f 	isb	sy
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <pxCurrentTCBConst>:
 8000b38:	200000f8 	.word	0x200000f8

08000b3c <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000b3c:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000b3e:	f3ef 8311 	mrs	r3, BASEPRI
 8000b42:	f04f 0250 	mov.w	r2, #80	; 0x50
 8000b46:	f382 8811 	msr	BASEPRI, r2
 8000b4a:	f3bf 8f6f 	isb	sy
 8000b4e:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000b52:	f7ff fcb3 	bl	80004bc <xTaskIncrementTick>
 8000b56:	b118      	cbz	r0, 8000b60 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <xPortSysTickHandler+0x2c>)
 8000b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b5e:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000b60:	2300      	movs	r3, #0
 8000b62:	f383 8811 	msr	BASEPRI, r3
 8000b66:	bd08      	pop	{r3, pc}
 8000b68:	e000ed04 	.word	0xe000ed04

08000b6c <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <vPortSetupTimerInterrupt+0x1c>)
 8000b6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <vPortSetupTimerInterrupt+0x20>)
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <vPortSetupTimerInterrupt+0x24>)
 8000b80:	2207      	movs	r2, #7
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000004 	.word	0x20000004
 8000b8c:	e000e014 	.word	0xe000e014
 8000b90:	e000e010 	.word	0xe000e010

08000b94 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000b94:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <xPortStartScheduler+0xc8>)
 8000b96:	4a32      	ldr	r2, [pc, #200]	; (8000c60 <xPortStartScheduler+0xcc>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000b98:	b513      	push	{r0, r1, r4, lr}
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000b9a:	6819      	ldr	r1, [r3, #0]
 8000b9c:	4291      	cmp	r1, r2
 8000b9e:	d108      	bne.n	8000bb2 <xPortStartScheduler+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ba4:	f383 8811 	msr	BASEPRI, r3
 8000ba8:	f3bf 8f6f 	isb	sy
 8000bac:	f3bf 8f4f 	dsb	sy
 8000bb0:	e7fe      	b.n	8000bb0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <xPortStartScheduler+0xd0>)
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d108      	bne.n	8000bcc <xPortStartScheduler+0x38>
 8000bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bbe:	f383 8811 	msr	BASEPRI, r3
 8000bc2:	f3bf 8f6f 	isb	sy
 8000bc6:	f3bf 8f4f 	dsb	sy
 8000bca:	e7fe      	b.n	8000bca <xPortStartScheduler+0x36>
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000bcc:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <xPortStartScheduler+0xd4>)
 8000bce:	781a      	ldrb	r2, [r3, #0]
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000bd4:	22ff      	movs	r2, #255	; 0xff
 8000bd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000bd8:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000bda:	4a24      	ldr	r2, [pc, #144]	; (8000c6c <xPortStartScheduler+0xd8>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000be2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000be6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000bea:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000bec:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <xPortStartScheduler+0xdc>)
 8000bee:	2207      	movs	r2, #7
 8000bf0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8000bf8:	0600      	lsls	r0, r0, #24
 8000bfa:	f102 34ff 	add.w	r4, r2, #4294967295
 8000bfe:	d508      	bpl.n	8000c12 <xPortStartScheduler+0x7e>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000c00:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000c04:	0052      	lsls	r2, r2, #1
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	f88d 2003 	strb.w	r2, [sp, #3]
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	4622      	mov	r2, r4
 8000c10:	e7f0      	b.n	8000bf4 <xPortStartScheduler+0x60>
 8000c12:	b101      	cbz	r1, 8000c16 <xPortStartScheduler+0x82>
 8000c14:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	0212      	lsls	r2, r2, #8
 8000c1a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000c1e:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000c20:	9b01      	ldr	r3, [sp, #4]
 8000c22:	4a11      	ldr	r2, [pc, #68]	; (8000c68 <xPortStartScheduler+0xd4>)
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <xPortStartScheduler+0xe0>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000c30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8000c38:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000c3a:	f7ff ff97 	bl	8000b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <xPortStartScheduler+0xe4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8000c44:	f7ff fee8 	bl	8000a18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000c48:	4a0c      	ldr	r2, [pc, #48]	; (8000c7c <xPortStartScheduler+0xe8>)
 8000c4a:	6813      	ldr	r3, [r2, #0]
 8000c4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000c50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000c52:	f7ff fed1 	bl	80009f8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8000c56:	f7ff feb7 	bl	80009c8 <prvTaskExitError>
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00
 8000c60:	410fc271 	.word	0x410fc271
 8000c64:	410fc270 	.word	0x410fc270
 8000c68:	e000e400 	.word	0xe000e400
 8000c6c:	20000154 	.word	0x20000154
 8000c70:	20000158 	.word	0x20000158
 8000c74:	e000ed20 	.word	0xe000ed20
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	e000ef34 	.word	0xe000ef34

08000c80 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c80:	f100 0308 	add.w	r3, r0, #8
 8000c84:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000c86:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c8a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c8c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000c8e:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000c90:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000c92:	6003      	str	r3, [r0, #0]
 8000c94:	4770      	bx	lr

08000c96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	6103      	str	r3, [r0, #16]
 8000c9a:	4770      	bx	lr

08000c9c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000c9c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000c9e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000ca8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000caa:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000cac:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000cae:	3301      	adds	r3, #1
 8000cb0:	6003      	str	r3, [r0, #0]
 8000cb2:	4770      	bx	lr

08000cb4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000cb4:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000cb6:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000cb8:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000cba:	d101      	bne.n	8000cc0 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000cbc:	6903      	ldr	r3, [r0, #16]
 8000cbe:	e007      	b.n	8000cd0 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000cc0:	f100 0308 	add.w	r3, r0, #8
 8000cc4:	685c      	ldr	r4, [r3, #4]
 8000cc6:	6825      	ldr	r5, [r4, #0]
 8000cc8:	42aa      	cmp	r2, r5
 8000cca:	d301      	bcc.n	8000cd0 <vListInsert+0x1c>
 8000ccc:	4623      	mov	r3, r4
 8000cce:	e7f9      	b.n	8000cc4 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000cd4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000cd6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000cd8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000cda:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000cdc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000cde:	3301      	adds	r3, #1
 8000ce0:	6003      	str	r3, [r0, #0]
 8000ce2:	bd30      	pop	{r4, r5, pc}

08000ce4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000ce4:	6841      	ldr	r1, [r0, #4]
 8000ce6:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000ce8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000cea:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000cec:	6882      	ldr	r2, [r0, #8]
 8000cee:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000cf0:	6859      	ldr	r1, [r3, #4]
 8000cf2:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000cf4:	bf08      	it	eq
 8000cf6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8000cfc:	6818      	ldr	r0, [r3, #0]
 8000cfe:	3801      	subs	r0, #1
 8000d00:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8000d02:	4770      	bx	lr

08000d04 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000d04:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <prvInsertBlockIntoFreeList+0x40>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	d201      	bcs.n	8000d12 <prvInsertBlockIntoFreeList+0xe>
 8000d0e:	4613      	mov	r3, r2
 8000d10:	e7fa      	b.n	8000d08 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000d12:	6859      	ldr	r1, [r3, #4]
 8000d14:	185c      	adds	r4, r3, r1
 8000d16:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000d18:	bf01      	itttt	eq
 8000d1a:	6840      	ldreq	r0, [r0, #4]
 8000d1c:	1809      	addeq	r1, r1, r0
 8000d1e:	4618      	moveq	r0, r3
 8000d20:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000d22:	6841      	ldr	r1, [r0, #4]
 8000d24:	1844      	adds	r4, r0, r1
 8000d26:	42a2      	cmp	r2, r4
 8000d28:	d107      	bne.n	8000d3a <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000d2a:	4c07      	ldr	r4, [pc, #28]	; (8000d48 <prvInsertBlockIntoFreeList+0x44>)
 8000d2c:	6824      	ldr	r4, [r4, #0]
 8000d2e:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000d30:	bf1f      	itttt	ne
 8000d32:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000d34:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000d36:	1909      	addne	r1, r1, r4
 8000d38:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000d3a:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000d3c:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000d3e:	bf18      	it	ne
 8000d40:	6018      	strne	r0, [r3, #0]
 8000d42:	bd10      	pop	{r4, pc}
 8000d44:	20000164 	.word	0x20000164
 8000d48:	20000160 	.word	0x20000160

08000d4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d50:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8000d52:	f7ff fbab 	bl	80004ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000d56:	4940      	ldr	r1, [pc, #256]	; (8000e58 <pvPortMalloc+0x10c>)
 8000d58:	4d40      	ldr	r5, [pc, #256]	; (8000e5c <pvPortMalloc+0x110>)
 8000d5a:	680b      	ldr	r3, [r1, #0]
 8000d5c:	bb0b      	cbnz	r3, 8000da2 <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000d5e:	4a40      	ldr	r2, [pc, #256]	; (8000e60 <pvPortMalloc+0x114>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000d60:	0756      	lsls	r6, r2, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000d62:	bf1f      	itttt	ne
 8000d64:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d66:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000d6a:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8000d6e:	1a1b      	subne	r3, r3, r0
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d70:	bf14      	ite	ne
 8000d72:	4602      	movne	r2, r0
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000d74:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d78:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8000d7a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d7c:	f023 0307 	bic.w	r3, r3, #7

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d80:	4e38      	ldr	r6, [pc, #224]	; (8000e64 <pvPortMalloc+0x118>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 8000d82:	600b      	str	r3, [r1, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 8000d84:	2000      	movs	r0, #0
 8000d86:	6070      	str	r0, [r6, #4]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d88:	6032      	str	r2, [r6, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 8000d8a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d8c:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d8e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000d90:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d92:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <pvPortMalloc+0x11c>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d94:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d96:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d98:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <pvPortMalloc+0x120>)
 8000d9a:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000d9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000da0:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000da2:	682f      	ldr	r7, [r5, #0]
 8000da4:	4227      	tst	r7, r4
 8000da6:	d146      	bne.n	8000e36 <pvPortMalloc+0xea>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000da8:	2c00      	cmp	r4, #0
 8000daa:	d045      	beq.n	8000e38 <pvPortMalloc+0xec>
			{
				xWantedSize += xHeapStructSize;
 8000dac:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000db0:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000db2:	bf1c      	itt	ne
 8000db4:	f023 0307 	bicne.w	r3, r3, #7
 8000db8:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d039      	beq.n	8000e32 <pvPortMalloc+0xe6>
 8000dbe:	4a2b      	ldr	r2, [pc, #172]	; (8000e6c <pvPortMalloc+0x120>)
 8000dc0:	6816      	ldr	r6, [r2, #0]
 8000dc2:	42b3      	cmp	r3, r6
 8000dc4:	4690      	mov	r8, r2
 8000dc6:	d836      	bhi.n	8000e36 <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8000dc8:	4a26      	ldr	r2, [pc, #152]	; (8000e64 <pvPortMalloc+0x118>)
 8000dca:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000dcc:	6868      	ldr	r0, [r5, #4]
 8000dce:	4283      	cmp	r3, r0
 8000dd0:	d803      	bhi.n	8000dda <pvPortMalloc+0x8e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000dd2:	6809      	ldr	r1, [r1, #0]
 8000dd4:	428d      	cmp	r5, r1
 8000dd6:	d106      	bne.n	8000de6 <pvPortMalloc+0x9a>
 8000dd8:	e02d      	b.n	8000e36 <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000dda:	682c      	ldr	r4, [r5, #0]
 8000ddc:	2c00      	cmp	r4, #0
 8000dde:	d0f8      	beq.n	8000dd2 <pvPortMalloc+0x86>
 8000de0:	462a      	mov	r2, r5
 8000de2:	4625      	mov	r5, r4
 8000de4:	e7f2      	b.n	8000dcc <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000de6:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000de8:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000dea:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000dec:	1ac2      	subs	r2, r0, r3
 8000dee:	2a10      	cmp	r2, #16
 8000df0:	d90f      	bls.n	8000e12 <pvPortMalloc+0xc6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000df2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000df4:	0741      	lsls	r1, r0, #29
 8000df6:	d008      	beq.n	8000e0a <pvPortMalloc+0xbe>
 8000df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dfc:	f383 8811 	msr	BASEPRI, r3
 8000e00:	f3bf 8f6f 	isb	sy
 8000e04:	f3bf 8f4f 	dsb	sy
 8000e08:	e7fe      	b.n	8000e08 <pvPortMalloc+0xbc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000e0a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000e0c:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000e0e:	f7ff ff79 	bl	8000d04 <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000e12:	4915      	ldr	r1, [pc, #84]	; (8000e68 <pvPortMalloc+0x11c>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000e14:	686b      	ldr	r3, [r5, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000e16:	6808      	ldr	r0, [r1, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000e18:	1af2      	subs	r2, r6, r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000e1a:	431f      	orrs	r7, r3
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000e1c:	4282      	cmp	r2, r0
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 8000e1e:	f04f 0300 	mov.w	r3, #0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000e22:	f8c8 2000 	str.w	r2, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000e26:	bf38      	it	cc
 8000e28:	600a      	strcc	r2, [r1, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000e2a:	3408      	adds	r4, #8
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000e2c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000e2e:	602b      	str	r3, [r5, #0]
 8000e30:	e002      	b.n	8000e38 <pvPortMalloc+0xec>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000e32:	461c      	mov	r4, r3
 8000e34:	e000      	b.n	8000e38 <pvPortMalloc+0xec>
 8000e36:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000e38:	f7ff fbd8 	bl	80005ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000e3c:	0763      	lsls	r3, r4, #29
 8000e3e:	d008      	beq.n	8000e52 <pvPortMalloc+0x106>
 8000e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e44:	f383 8811 	msr	BASEPRI, r3
 8000e48:	f3bf 8f6f 	isb	sy
 8000e4c:	f3bf 8f4f 	dsb	sy
 8000e50:	e7fe      	b.n	8000e50 <pvPortMalloc+0x104>
	return pvReturn;
}
 8000e52:	4620      	mov	r0, r4
 8000e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e58:	20000160 	.word	0x20000160
 8000e5c:	20003d6c 	.word	0x20003d6c
 8000e60:	2000016c 	.word	0x2000016c
 8000e64:	20000164 	.word	0x20000164
 8000e68:	20003d70 	.word	0x20003d70
 8000e6c:	2000015c 	.word	0x2000015c

08000e70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000e70:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8000e72:	4604      	mov	r4, r0
 8000e74:	b370      	cbz	r0, 8000ed4 <vPortFree+0x64>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000e76:	4a18      	ldr	r2, [pc, #96]	; (8000ed8 <vPortFree+0x68>)
 8000e78:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8000e7c:	6812      	ldr	r2, [r2, #0]
 8000e7e:	4213      	tst	r3, r2
 8000e80:	d108      	bne.n	8000e94 <vPortFree+0x24>
 8000e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e86:	f383 8811 	msr	BASEPRI, r3
 8000e8a:	f3bf 8f6f 	isb	sy
 8000e8e:	f3bf 8f4f 	dsb	sy
 8000e92:	e7fe      	b.n	8000e92 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000e94:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8000e98:	b141      	cbz	r1, 8000eac <vPortFree+0x3c>
 8000e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e9e:	f383 8811 	msr	BASEPRI, r3
 8000ea2:	f3bf 8f6f 	isb	sy
 8000ea6:	f3bf 8f4f 	dsb	sy
 8000eaa:	e7fe      	b.n	8000eaa <vPortFree+0x3a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000eac:	ea23 0302 	bic.w	r3, r3, r2
 8000eb0:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 8000eb4:	f7ff fafa 	bl	80004ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000eb8:	4a08      	ldr	r2, [pc, #32]	; (8000edc <vPortFree+0x6c>)
 8000eba:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8000ebe:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000ec0:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000ec4:	440b      	add	r3, r1
 8000ec6:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000ec8:	f7ff ff1c 	bl	8000d04 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 8000ed0:	f7ff bb8c 	b.w	80005ec <xTaskResumeAll>
 8000ed4:	bd10      	pop	{r4, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20003d6c 	.word	0x20003d6c
 8000edc:	2000015c 	.word	0x2000015c

08000ee0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000ee0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8000ee2:	f7ff faab 	bl	800043c <vTaskStartScheduler>
  
  return osOK;
}
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	bd08      	pop	{r3, pc}

08000eea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000eea:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000eec:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8000ef0:	8a02      	ldrh	r2, [r0, #16]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000ef2:	460b      	mov	r3, r1
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000ef4:	e890 0042 	ldmia.w	r0, {r1, r6}
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000ef8:	b086      	sub	sp, #24
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8000efa:	2c84      	cmp	r4, #132	; 0x84
 8000efc:	f04f 0500 	mov.w	r5, #0
    fpriority += (priority - osPriorityIdle);
 8000f00:	bf14      	ite	ne
 8000f02:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000f04:	462c      	moveq	r4, r5
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000f06:	a805      	add	r0, sp, #20
 8000f08:	9001      	str	r0, [sp, #4]
 8000f0a:	9503      	str	r5, [sp, #12]
 8000f0c:	9502      	str	r5, [sp, #8]
 8000f0e:	9400      	str	r4, [sp, #0]
 8000f10:	4630      	mov	r0, r6
 8000f12:	f7ff fa75 	bl	8000400 <xTaskGenericCreate>
 8000f16:	2801      	cmp	r0, #1
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
  }
  
  return handle;
 8000f18:	bf0c      	ite	eq
 8000f1a:	9805      	ldreq	r0, [sp, #20]
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
 8000f1c:	2000      	movne	r0, #0
  }
  
  return handle;
}
 8000f1e:	b006      	add	sp, #24
 8000f20:	bd70      	pop	{r4, r5, r6, pc}

08000f22 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8000f22:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8000f24:	2800      	cmp	r0, #0
 8000f26:	bf08      	it	eq
 8000f28:	2001      	moveq	r0, #1
 8000f2a:	f7ff fbd5 	bl	80006d8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8000f2e:	2000      	movs	r0, #0
 8000f30:	bd08      	pop	{r3, pc}

08000f32 <osMessageCreate>:
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
  (void) thread_id;
  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8000f32:	2200      	movs	r2, #0
 8000f34:	c803      	ldmia	r0, {r0, r1}
 8000f36:	f7ff bd15 	b.w	8000964 <xQueueGenericCreate>

08000f3a <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8000f3a:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f3c:	f7ff fcc2 	bl	80008c4 <xTaskGetSchedulerState>
 8000f40:	2801      	cmp	r0, #1
 8000f42:	d003      	beq.n	8000f4c <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8000f44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8000f48:	f7ff bdf8 	b.w	8000b3c <xPortSysTickHandler>
 8000f4c:	bd08      	pop	{r3, pc}

08000f4e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000f4e:	6803      	ldr	r3, [r0, #0]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000f56:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f58:	695a      	ldr	r2, [r3, #20]
 8000f5a:	f022 0201 	bic.w	r2, r2, #1
 8000f5e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000f60:	2320      	movs	r3, #32
 8000f62:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000f66:	4770      	bx	lr

08000f68 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000f6c:	6807      	ldr	r7, [r0, #0]
 8000f6e:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f70:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000f72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000f76:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f78:	68a1      	ldr	r1, [r4, #8]
 8000f7a:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000f7c:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f7e:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000f80:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8000f82:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f84:	4311      	orrs	r1, r2
 8000f86:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000f88:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000f90:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f94:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8000f96:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8000f98:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8000f9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000f9e:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000fa0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000fa4:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	4b7c      	ldr	r3, [pc, #496]	; (800119c <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000fac:	d17c      	bne.n	80010a8 <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000fae:	429f      	cmp	r7, r3
 8000fb0:	d003      	beq.n	8000fba <UART_SetConfig+0x52>
 8000fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fb6:	429f      	cmp	r7, r3
 8000fb8:	d131      	bne.n	800101e <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000fba:	f000 fd4b 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
 8000fbe:	6863      	ldr	r3, [r4, #4]
 8000fc0:	2519      	movs	r5, #25
 8000fc2:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8000fc6:	4368      	muls	r0, r5
 8000fc8:	fbb0 f8f8 	udiv	r8, r0, r8
 8000fcc:	f000 fd42 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
 8000fd0:	6866      	ldr	r6, [r4, #4]
 8000fd2:	4368      	muls	r0, r5
 8000fd4:	0076      	lsls	r6, r6, #1
 8000fd6:	fbb0 f6f6 	udiv	r6, r0, r6
 8000fda:	f000 fd3b 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
 8000fde:	6863      	ldr	r3, [r4, #4]
 8000fe0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4368      	muls	r0, r5
 8000fe8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fec:	fbb0 f0f9 	udiv	r0, r0, r9
 8000ff0:	fb09 6610 	mls	r6, r9, r0, r6
 8000ff4:	f000 fd2e 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
 8000ff8:	fbb8 f8f9 	udiv	r8, r8, r9
 8000ffc:	6861      	ldr	r1, [r4, #4]
 8000ffe:	00f6      	lsls	r6, r6, #3
 8001000:	3632      	adds	r6, #50	; 0x32
 8001002:	fbb6 f6f9 	udiv	r6, r6, r9
 8001006:	0076      	lsls	r6, r6, #1
 8001008:	4368      	muls	r0, r5
 800100a:	0049      	lsls	r1, r1, #1
 800100c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001010:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001014:	fbb0 faf1 	udiv	sl, r0, r1
 8001018:	f000 fd1c 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
 800101c:	e030      	b.n	8001080 <UART_SetConfig+0x118>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800101e:	f000 fd01 	bl	8001a24 <HAL_RCC_GetPCLK1Freq>
 8001022:	6863      	ldr	r3, [r4, #4]
 8001024:	2519      	movs	r5, #25
 8001026:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800102a:	4368      	muls	r0, r5
 800102c:	fbb0 f8f8 	udiv	r8, r0, r8
 8001030:	f000 fcf8 	bl	8001a24 <HAL_RCC_GetPCLK1Freq>
 8001034:	6866      	ldr	r6, [r4, #4]
 8001036:	4368      	muls	r0, r5
 8001038:	0076      	lsls	r6, r6, #1
 800103a:	fbb0 f6f6 	udiv	r6, r0, r6
 800103e:	f000 fcf1 	bl	8001a24 <HAL_RCC_GetPCLK1Freq>
 8001042:	6863      	ldr	r3, [r4, #4]
 8001044:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4368      	muls	r0, r5
 800104c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001050:	fbb0 f0f9 	udiv	r0, r0, r9
 8001054:	fb09 6610 	mls	r6, r9, r0, r6
 8001058:	f000 fce4 	bl	8001a24 <HAL_RCC_GetPCLK1Freq>
 800105c:	fbb8 f8f9 	udiv	r8, r8, r9
 8001060:	00f6      	lsls	r6, r6, #3
 8001062:	6861      	ldr	r1, [r4, #4]
 8001064:	3632      	adds	r6, #50	; 0x32
 8001066:	fbb6 f6f9 	udiv	r6, r6, r9
 800106a:	0076      	lsls	r6, r6, #1
 800106c:	4368      	muls	r0, r5
 800106e:	0049      	lsls	r1, r1, #1
 8001070:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001074:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001078:	fbb0 faf1 	udiv	sl, r0, r1
 800107c:	f000 fcd2 	bl	8001a24 <HAL_RCC_GetPCLK1Freq>
 8001080:	4345      	muls	r5, r0
 8001082:	6860      	ldr	r0, [r4, #4]
 8001084:	0040      	lsls	r0, r0, #1
 8001086:	fbb5 f0f0 	udiv	r0, r5, r0
 800108a:	fbb0 f0f9 	udiv	r0, r0, r9
 800108e:	fb09 a210 	mls	r2, r9, r0, sl
 8001092:	00d2      	lsls	r2, r2, #3
 8001094:	3232      	adds	r2, #50	; 0x32
 8001096:	fbb2 f3f9 	udiv	r3, r2, r9
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	4443      	add	r3, r8
 80010a0:	441e      	add	r6, r3
 80010a2:	60be      	str	r6, [r7, #8]
 80010a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80010a8:	429f      	cmp	r7, r3
 80010aa:	d002      	beq.n	80010b2 <UART_SetConfig+0x14a>
 80010ac:	4b3c      	ldr	r3, [pc, #240]	; (80011a0 <UART_SetConfig+0x238>)
 80010ae:	429f      	cmp	r7, r3
 80010b0:	d130      	bne.n	8001114 <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80010b2:	f000 fccf 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
 80010b6:	6863      	ldr	r3, [r4, #4]
 80010b8:	2519      	movs	r5, #25
 80010ba:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80010be:	4368      	muls	r0, r5
 80010c0:	fbb0 f8f8 	udiv	r8, r0, r8
 80010c4:	f000 fcc6 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
 80010c8:	6866      	ldr	r6, [r4, #4]
 80010ca:	4368      	muls	r0, r5
 80010cc:	00b6      	lsls	r6, r6, #2
 80010ce:	fbb0 f6f6 	udiv	r6, r0, r6
 80010d2:	f000 fcbf 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
 80010d6:	6863      	ldr	r3, [r4, #4]
 80010d8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4368      	muls	r0, r5
 80010e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80010e4:	fbb0 f0f9 	udiv	r0, r0, r9
 80010e8:	fb09 6610 	mls	r6, r9, r0, r6
 80010ec:	f000 fcb2 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
 80010f0:	fbb8 f8f9 	udiv	r8, r8, r9
 80010f4:	6861      	ldr	r1, [r4, #4]
 80010f6:	0136      	lsls	r6, r6, #4
 80010f8:	4368      	muls	r0, r5
 80010fa:	0089      	lsls	r1, r1, #2
 80010fc:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001100:	3632      	adds	r6, #50	; 0x32
 8001102:	fbb0 faf1 	udiv	sl, r0, r1
 8001106:	fbb6 f6f9 	udiv	r6, r6, r9
 800110a:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 800110e:	f000 fca1 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
 8001112:	e02f      	b.n	8001174 <UART_SetConfig+0x20c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001114:	f000 fc86 	bl	8001a24 <HAL_RCC_GetPCLK1Freq>
 8001118:	6863      	ldr	r3, [r4, #4]
 800111a:	2519      	movs	r5, #25
 800111c:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001120:	4368      	muls	r0, r5
 8001122:	fbb0 f8f8 	udiv	r8, r0, r8
 8001126:	f000 fc7d 	bl	8001a24 <HAL_RCC_GetPCLK1Freq>
 800112a:	6866      	ldr	r6, [r4, #4]
 800112c:	4368      	muls	r0, r5
 800112e:	00b6      	lsls	r6, r6, #2
 8001130:	fbb0 f6f6 	udiv	r6, r0, r6
 8001134:	f000 fc76 	bl	8001a24 <HAL_RCC_GetPCLK1Freq>
 8001138:	6863      	ldr	r3, [r4, #4]
 800113a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4368      	muls	r0, r5
 8001142:	fbb0 f0f3 	udiv	r0, r0, r3
 8001146:	fbb0 f0f9 	udiv	r0, r0, r9
 800114a:	fb09 6610 	mls	r6, r9, r0, r6
 800114e:	f000 fc69 	bl	8001a24 <HAL_RCC_GetPCLK1Freq>
 8001152:	fbb8 f8f9 	udiv	r8, r8, r9
 8001156:	6861      	ldr	r1, [r4, #4]
 8001158:	0136      	lsls	r6, r6, #4
 800115a:	3632      	adds	r6, #50	; 0x32
 800115c:	4368      	muls	r0, r5
 800115e:	fbb6 f6f9 	udiv	r6, r6, r9
 8001162:	0089      	lsls	r1, r1, #2
 8001164:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001168:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 800116c:	fbb0 faf1 	udiv	sl, r0, r1
 8001170:	f000 fc58 	bl	8001a24 <HAL_RCC_GetPCLK1Freq>
 8001174:	4345      	muls	r5, r0
 8001176:	6860      	ldr	r0, [r4, #4]
 8001178:	0080      	lsls	r0, r0, #2
 800117a:	fbb5 f0f0 	udiv	r0, r5, r0
 800117e:	fbb0 f0f9 	udiv	r0, r0, r9
 8001182:	fb09 a210 	mls	r2, r9, r0, sl
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	3232      	adds	r2, #50	; 0x32
 800118a:	fbb2 f3f9 	udiv	r3, r2, r9
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	4433      	add	r3, r6
 8001194:	4443      	add	r3, r8
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800119c:	40011000 	.word	0x40011000
 80011a0:	40011400 	.word	0x40011400

080011a4 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80011a4:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 80011a6:	4604      	mov	r4, r0
 80011a8:	b340      	cbz	r0, 80011fc <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80011aa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80011ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011b2:	b91b      	cbnz	r3, 80011bc <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80011b4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80011b8:	f001 f858 	bl	800226c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80011bc:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80011be:	2324      	movs	r3, #36	; 0x24
 80011c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80011c4:	68d3      	ldr	r3, [r2, #12]
 80011c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011ca:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80011cc:	4620      	mov	r0, r4
 80011ce:	f7ff fecb 	bl	8000f68 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011d2:	6823      	ldr	r3, [r4, #0]
 80011d4:	691a      	ldr	r2, [r3, #16]
 80011d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80011da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80011dc:	695a      	ldr	r2, [r3, #20]
 80011de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80011e2:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80011e4:	68da      	ldr	r2, [r3, #12]
 80011e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011ea:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011ec:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80011ee:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011f0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80011f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80011f6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 80011fa:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 80011fc:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 80011fe:	bd10      	pop	{r4, pc}

08001200 <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001200:	b538      	push	{r3, r4, r5, lr}
 8001202:	4604      	mov	r4, r0
 8001204:	4613      	mov	r3, r2
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001206:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800120a:	2a20      	cmp	r2, #32
 800120c:	d12a      	bne.n	8001264 <HAL_UART_Transmit_DMA+0x64>
  {
    if((pData == NULL ) || (Size == 0U))
 800120e:	b339      	cbz	r1, 8001260 <HAL_UART_Transmit_DMA+0x60>
 8001210:	b333      	cbz	r3, 8001260 <HAL_UART_Transmit_DMA+0x60>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001212:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8001216:	2a01      	cmp	r2, #1
 8001218:	d024      	beq.n	8001264 <HAL_UART_Transmit_DMA+0x64>
 800121a:	2201      	movs	r2, #1
 800121c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001220:	6b20      	ldr	r0, [r4, #48]	; 0x30

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
 8001222:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001224:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001226:	2221      	movs	r2, #33	; 0x21

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001228:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800122a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800122e:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <HAL_UART_Transmit_DMA+0x68>)
    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 8001230:	84e3      	strh	r3, [r4, #38]	; 0x26
    }

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pTxBuffPtr = pData;
 8001232:	6221      	str	r1, [r4, #32]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001234:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001236:	4a0d      	ldr	r2, [pc, #52]	; (800126c <HAL_UART_Transmit_DMA+0x6c>)
 8001238:	6402      	str	r2, [r0, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800123a:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <HAL_UART_Transmit_DMA+0x70>)
 800123c:	64c2      	str	r2, [r0, #76]	; 0x4c
    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800123e:	6822      	ldr	r2, [r4, #0]

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001240:	6505      	str	r5, [r0, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001242:	3204      	adds	r2, #4
 8001244:	f000 fda8 	bl	8001d98 <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800124e:	601a      	str	r2, [r3, #0]
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001250:	695a      	ldr	r2, [r3, #20]
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001252:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001256:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800125a:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 800125c:	4628      	mov	r0, r5
 800125e:	bd38      	pop	{r3, r4, r5, pc}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
    {
      return HAL_ERROR;
 8001260:	2001      	movs	r0, #1
 8001262:	bd38      	pop	{r3, r4, r5, pc}
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001264:	2002      	movs	r0, #2
  }
}
 8001266:	bd38      	pop	{r3, r4, r5, pc}
 8001268:	08001277 	.word	0x08001277
 800126c:	080012a5 	.word	0x080012a5
 8001270:	080012b1 	.word	0x080012b1

08001274 <HAL_UART_TxCpltCallback>:
 8001274:	4770      	bx	lr

08001276 <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001276:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001278:	6803      	ldr	r3, [r0, #0]
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800127a:	6b82      	ldr	r2, [r0, #56]	; 0x38
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001282:	d10a      	bne.n	800129a <UART_DMATransmitCplt+0x24>
  {
    huart->TxXferCount = 0U;
 8001284:	84d3      	strh	r3, [r2, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001286:	6813      	ldr	r3, [r2, #0]
 8001288:	695a      	ldr	r2, [r3, #20]
 800128a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800128e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	bd08      	pop	{r3, pc}

  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 800129a:	4610      	mov	r0, r2
 800129c:	f7ff ffea 	bl	8001274 <HAL_UART_TxCpltCallback>
 80012a0:	bd08      	pop	{r3, pc}

080012a2 <HAL_UART_TxHalfCpltCallback>:
 80012a2:	4770      	bx	lr

080012a4 <UART_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80012a4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 80012a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80012a8:	f7ff fffb 	bl	80012a2 <HAL_UART_TxHalfCpltCallback>
 80012ac:	bd08      	pop	{r3, pc}

080012ae <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80012ae:	4770      	bx	lr

080012b0 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012b0:	6b81      	ldr	r1, [r0, #56]	; 0x38
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80012b2:	b508      	push	{r3, lr}
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80012b4:	680b      	ldr	r3, [r1, #0]
 80012b6:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80012b8:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 80012bc:	2821      	cmp	r0, #33	; 0x21
 80012be:	d10a      	bne.n	80012d6 <UART_DMAError+0x26>
 80012c0:	0612      	lsls	r2, r2, #24
 80012c2:	d508      	bpl.n	80012d6 <UART_DMAError+0x26>
  {
    huart->TxXferCount = 0U;
 80012c4:	2200      	movs	r2, #0
 80012c6:	84ca      	strh	r2, [r1, #38]	; 0x26
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80012ce:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80012d0:	2220      	movs	r2, #32
 80012d2:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 80012d6:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80012d8:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80012dc:	2a22      	cmp	r2, #34	; 0x22
 80012de:	d106      	bne.n	80012ee <UART_DMAError+0x3e>
 80012e0:	065b      	lsls	r3, r3, #25
 80012e2:	d504      	bpl.n	80012ee <UART_DMAError+0x3e>
  {
    huart->RxXferCount = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80012e8:	4608      	mov	r0, r1
 80012ea:	f7ff fe30 	bl	8000f4e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80012ee:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80012f0:	f043 0310 	orr.w	r3, r3, #16
 80012f4:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80012f6:	4608      	mov	r0, r1
 80012f8:	f7ff ffd9 	bl	80012ae <HAL_UART_ErrorCallback>
 80012fc:	bd08      	pop	{r3, pc}

080012fe <HAL_TIMEx_CommutationCallback>:
 80012fe:	4770      	bx	lr

08001300 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001300:	4770      	bx	lr

08001302 <HAL_TIM_Base_MspInit>:
 8001302:	4770      	bx	lr

08001304 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001304:	6803      	ldr	r3, [r0, #0]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	f042 0201 	orr.w	r2, r2, #1
 800130c:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	f042 0201 	orr.w	r2, r2, #1
 8001314:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001316:	2000      	movs	r0, #0
 8001318:	4770      	bx	lr

0800131a <HAL_TIM_OC_DelayElapsedCallback>:
 800131a:	4770      	bx	lr

0800131c <HAL_TIM_IC_CaptureCallback>:
 800131c:	4770      	bx	lr

0800131e <HAL_TIM_PWM_PulseFinishedCallback>:
 800131e:	4770      	bx	lr

08001320 <HAL_TIM_TriggerCallback>:
 8001320:	4770      	bx	lr

08001322 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001322:	6803      	ldr	r3, [r0, #0]
 8001324:	691a      	ldr	r2, [r3, #16]
 8001326:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001328:	b510      	push	{r4, lr}
 800132a:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800132c:	d514      	bpl.n	8001358 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	0792      	lsls	r2, r2, #30
 8001332:	d511      	bpl.n	8001358 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001334:	f06f 0202 	mvn.w	r2, #2
 8001338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800133a:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800133c:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800133e:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001340:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001342:	d002      	beq.n	800134a <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001344:	f7ff ffea 	bl	800131c <HAL_TIM_IC_CaptureCallback>
 8001348:	e004      	b.n	8001354 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800134a:	f7ff ffe6 	bl	800131a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800134e:	4620      	mov	r0, r4
 8001350:	f7ff ffe5 	bl	800131e <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001354:	2300      	movs	r3, #0
 8001356:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001358:	6823      	ldr	r3, [r4, #0]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	0750      	lsls	r0, r2, #29
 800135e:	d516      	bpl.n	800138e <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	0751      	lsls	r1, r2, #29
 8001364:	d513      	bpl.n	800138e <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001366:	f06f 0204 	mvn.w	r2, #4
 800136a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800136c:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800136e:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001370:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001374:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001376:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001378:	d002      	beq.n	8001380 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800137a:	f7ff ffcf 	bl	800131c <HAL_TIM_IC_CaptureCallback>
 800137e:	e004      	b.n	800138a <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001380:	f7ff ffcb 	bl	800131a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001384:	4620      	mov	r0, r4
 8001386:	f7ff ffca 	bl	800131e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800138a:	2300      	movs	r3, #0
 800138c:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800138e:	6823      	ldr	r3, [r4, #0]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	0712      	lsls	r2, r2, #28
 8001394:	d515      	bpl.n	80013c2 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	0710      	lsls	r0, r2, #28
 800139a:	d512      	bpl.n	80013c2 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800139c:	f06f 0208 	mvn.w	r2, #8
 80013a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80013a2:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80013a4:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80013a6:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80013a8:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80013aa:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80013ac:	d002      	beq.n	80013b4 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80013ae:	f7ff ffb5 	bl	800131c <HAL_TIM_IC_CaptureCallback>
 80013b2:	e004      	b.n	80013be <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013b4:	f7ff ffb1 	bl	800131a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80013b8:	4620      	mov	r0, r4
 80013ba:	f7ff ffb0 	bl	800131e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013be:	2300      	movs	r3, #0
 80013c0:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80013c2:	6823      	ldr	r3, [r4, #0]
 80013c4:	691a      	ldr	r2, [r3, #16]
 80013c6:	06d2      	lsls	r2, r2, #27
 80013c8:	d516      	bpl.n	80013f8 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	06d0      	lsls	r0, r2, #27
 80013ce:	d513      	bpl.n	80013f8 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80013d0:	f06f 0210 	mvn.w	r2, #16
 80013d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013d6:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80013d8:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013da:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80013de:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80013e0:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013e2:	d002      	beq.n	80013ea <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80013e4:	f7ff ff9a 	bl	800131c <HAL_TIM_IC_CaptureCallback>
 80013e8:	e004      	b.n	80013f4 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013ea:	f7ff ff96 	bl	800131a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013ee:	4620      	mov	r0, r4
 80013f0:	f7ff ff95 	bl	800131e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013f4:	2300      	movs	r3, #0
 80013f6:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80013f8:	6823      	ldr	r3, [r4, #0]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	07d1      	lsls	r1, r2, #31
 80013fe:	d508      	bpl.n	8001412 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	07d2      	lsls	r2, r2, #31
 8001404:	d505      	bpl.n	8001412 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001406:	f06f 0201 	mvn.w	r2, #1
 800140a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800140c:	4620      	mov	r0, r4
 800140e:	f001 facf 	bl	80029b0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	691a      	ldr	r2, [r3, #16]
 8001416:	0610      	lsls	r0, r2, #24
 8001418:	d508      	bpl.n	800142c <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	0611      	lsls	r1, r2, #24
 800141e:	d505      	bpl.n	800142c <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001420:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001424:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001426:	4620      	mov	r0, r4
 8001428:	f7ff ff6a 	bl	8001300 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800142c:	6823      	ldr	r3, [r4, #0]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	0652      	lsls	r2, r2, #25
 8001432:	d508      	bpl.n	8001446 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	0650      	lsls	r0, r2, #25
 8001438:	d505      	bpl.n	8001446 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800143a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800143e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001440:	4620      	mov	r0, r4
 8001442:	f7ff ff6d 	bl	8001320 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001446:	6823      	ldr	r3, [r4, #0]
 8001448:	691a      	ldr	r2, [r3, #16]
 800144a:	0691      	lsls	r1, r2, #26
 800144c:	d50a      	bpl.n	8001464 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	0692      	lsls	r2, r2, #26
 8001452:	d507      	bpl.n	8001464 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001454:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001458:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800145a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 800145c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8001460:	f7ff bf4d 	b.w	80012fe <HAL_TIMEx_CommutationCallback>
 8001464:	bd10      	pop	{r4, pc}
	...

08001468 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001468:	4a2e      	ldr	r2, [pc, #184]	; (8001524 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 800146a:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800146c:	4290      	cmp	r0, r2
 800146e:	d012      	beq.n	8001496 <TIM_Base_SetConfig+0x2e>
 8001470:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001474:	d00f      	beq.n	8001496 <TIM_Base_SetConfig+0x2e>
 8001476:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800147a:	4290      	cmp	r0, r2
 800147c:	d00b      	beq.n	8001496 <TIM_Base_SetConfig+0x2e>
 800147e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001482:	4290      	cmp	r0, r2
 8001484:	d007      	beq.n	8001496 <TIM_Base_SetConfig+0x2e>
 8001486:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800148a:	4290      	cmp	r0, r2
 800148c:	d003      	beq.n	8001496 <TIM_Base_SetConfig+0x2e>
 800148e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001492:	4290      	cmp	r0, r2
 8001494:	d118      	bne.n	80014c8 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001496:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800149c:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800149e:	4a21      	ldr	r2, [pc, #132]	; (8001524 <TIM_Base_SetConfig+0xbc>)
 80014a0:	4290      	cmp	r0, r2
 80014a2:	d037      	beq.n	8001514 <TIM_Base_SetConfig+0xac>
 80014a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80014a8:	d034      	beq.n	8001514 <TIM_Base_SetConfig+0xac>
 80014aa:	4a1f      	ldr	r2, [pc, #124]	; (8001528 <TIM_Base_SetConfig+0xc0>)
 80014ac:	4290      	cmp	r0, r2
 80014ae:	d031      	beq.n	8001514 <TIM_Base_SetConfig+0xac>
 80014b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014b4:	4290      	cmp	r0, r2
 80014b6:	d02d      	beq.n	8001514 <TIM_Base_SetConfig+0xac>
 80014b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014bc:	4290      	cmp	r0, r2
 80014be:	d029      	beq.n	8001514 <TIM_Base_SetConfig+0xac>
 80014c0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80014c4:	4290      	cmp	r0, r2
 80014c6:	d025      	beq.n	8001514 <TIM_Base_SetConfig+0xac>
 80014c8:	4a18      	ldr	r2, [pc, #96]	; (800152c <TIM_Base_SetConfig+0xc4>)
 80014ca:	4290      	cmp	r0, r2
 80014cc:	d022      	beq.n	8001514 <TIM_Base_SetConfig+0xac>
 80014ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014d2:	4290      	cmp	r0, r2
 80014d4:	d01e      	beq.n	8001514 <TIM_Base_SetConfig+0xac>
 80014d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014da:	4290      	cmp	r0, r2
 80014dc:	d01a      	beq.n	8001514 <TIM_Base_SetConfig+0xac>
 80014de:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80014e2:	4290      	cmp	r0, r2
 80014e4:	d016      	beq.n	8001514 <TIM_Base_SetConfig+0xac>
 80014e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014ea:	4290      	cmp	r0, r2
 80014ec:	d012      	beq.n	8001514 <TIM_Base_SetConfig+0xac>
 80014ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014f2:	4290      	cmp	r0, r2
 80014f4:	d00e      	beq.n	8001514 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80014f6:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80014f8:	688b      	ldr	r3, [r1, #8]
 80014fa:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80014fc:	680b      	ldr	r3, [r1, #0]
 80014fe:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <TIM_Base_SetConfig+0xbc>)
 8001502:	4298      	cmp	r0, r3
 8001504:	d00b      	beq.n	800151e <TIM_Base_SetConfig+0xb6>
 8001506:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800150a:	4298      	cmp	r0, r3
 800150c:	d007      	beq.n	800151e <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800150e:	2301      	movs	r3, #1
 8001510:	6143      	str	r3, [r0, #20]
}
 8001512:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001514:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800151a:	4313      	orrs	r3, r2
 800151c:	e7eb      	b.n	80014f6 <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800151e:	690b      	ldr	r3, [r1, #16]
 8001520:	6303      	str	r3, [r0, #48]	; 0x30
 8001522:	e7f4      	b.n	800150e <TIM_Base_SetConfig+0xa6>
 8001524:	40010000 	.word	0x40010000
 8001528:	40000400 	.word	0x40000400
 800152c:	40014000 	.word	0x40014000

08001530 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001530:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001532:	4604      	mov	r4, r0
 8001534:	b1a0      	cbz	r0, 8001560 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001536:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800153a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800153e:	b91b      	cbnz	r3, 8001548 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001540:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001544:	f7ff fedd 	bl	8001302 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001548:	2302      	movs	r3, #2
 800154a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800154e:	6820      	ldr	r0, [r4, #0]
 8001550:	1d21      	adds	r1, r4, #4
 8001552:	f7ff ff89 	bl	8001468 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001556:	2301      	movs	r3, #1
 8001558:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 800155c:	2000      	movs	r0, #0
 800155e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001560:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8001562:	bd10      	pop	{r4, pc}

08001564 <HAL_RCC_OscConfig>:
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001564:	6803      	ldr	r3, [r0, #0]
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001566:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800156a:	4604      	mov	r4, r0
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156c:	07d8      	lsls	r0, r3, #31
 800156e:	d403      	bmi.n	8001578 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001570:	6823      	ldr	r3, [r4, #0]
 8001572:	0799      	lsls	r1, r3, #30
 8001574:	d437      	bmi.n	80015e6 <HAL_RCC_OscConfig+0x82>
 8001576:	e087      	b.n	8001688 <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001578:	4ba7      	ldr	r3, [pc, #668]	; (8001818 <HAL_RCC_OscConfig+0x2b4>)
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	f002 020c 	and.w	r2, r2, #12
 8001580:	2a04      	cmp	r2, #4
 8001582:	d007      	beq.n	8001594 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001584:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001586:	f002 020c 	and.w	r2, r2, #12
 800158a:	2a08      	cmp	r2, #8
 800158c:	d10b      	bne.n	80015a6 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	025a      	lsls	r2, r3, #9
 8001592:	d508      	bpl.n	80015a6 <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001594:	4ba0      	ldr	r3, [pc, #640]	; (8001818 <HAL_RCC_OscConfig+0x2b4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	039b      	lsls	r3, r3, #14
 800159a:	d5e9      	bpl.n	8001570 <HAL_RCC_OscConfig+0xc>
 800159c:	6863      	ldr	r3, [r4, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1e6      	bne.n	8001570 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80015a2:	2001      	movs	r0, #1
 80015a4:	e134      	b.n	8001810 <HAL_RCC_OscConfig+0x2ac>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a6:	4b9d      	ldr	r3, [pc, #628]	; (800181c <HAL_RCC_OscConfig+0x2b8>)
 80015a8:	7922      	ldrb	r2, [r4, #4]
 80015aa:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015ac:	6863      	ldr	r3, [r4, #4]
 80015ae:	b16b      	cbz	r3, 80015cc <HAL_RCC_OscConfig+0x68>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f000 fd86 	bl	80020c0 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b4:	4d98      	ldr	r5, [pc, #608]	; (8001818 <HAL_RCC_OscConfig+0x2b4>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b6:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b8:	682b      	ldr	r3, [r5, #0]
 80015ba:	039f      	lsls	r7, r3, #14
 80015bc:	d4d8      	bmi.n	8001570 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015be:	f000 fd7f 	bl	80020c0 <HAL_GetTick>
 80015c2:	1b80      	subs	r0, r0, r6
 80015c4:	2864      	cmp	r0, #100	; 0x64
 80015c6:	d9f7      	bls.n	80015b8 <HAL_RCC_OscConfig+0x54>
          {
            return HAL_TIMEOUT;
 80015c8:	2003      	movs	r0, #3
 80015ca:	e121      	b.n	8001810 <HAL_RCC_OscConfig+0x2ac>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f000 fd78 	bl	80020c0 <HAL_GetTick>

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d0:	4d91      	ldr	r5, [pc, #580]	; (8001818 <HAL_RCC_OscConfig+0x2b4>)
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d2:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d4:	682b      	ldr	r3, [r5, #0]
 80015d6:	0398      	lsls	r0, r3, #14
 80015d8:	d5ca      	bpl.n	8001570 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015da:	f000 fd71 	bl	80020c0 <HAL_GetTick>
 80015de:	1b80      	subs	r0, r0, r6
 80015e0:	2864      	cmp	r0, #100	; 0x64
 80015e2:	d9f7      	bls.n	80015d4 <HAL_RCC_OscConfig+0x70>
 80015e4:	e7f0      	b.n	80015c8 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015e6:	4b8c      	ldr	r3, [pc, #560]	; (8001818 <HAL_RCC_OscConfig+0x2b4>)
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	f012 0f0c 	tst.w	r2, #12
 80015ee:	d007      	beq.n	8001600 <HAL_RCC_OscConfig+0x9c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015f0:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015f2:	f002 020c 	and.w	r2, r2, #12
 80015f6:	2a08      	cmp	r2, #8
 80015f8:	d117      	bne.n	800162a <HAL_RCC_OscConfig+0xc6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	0259      	lsls	r1, r3, #9
 80015fe:	d414      	bmi.n	800162a <HAL_RCC_OscConfig+0xc6>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001600:	4b85      	ldr	r3, [pc, #532]	; (8001818 <HAL_RCC_OscConfig+0x2b4>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	0792      	lsls	r2, r2, #30
 8001606:	d502      	bpl.n	800160e <HAL_RCC_OscConfig+0xaa>
 8001608:	68e2      	ldr	r2, [r4, #12]
 800160a:	2a01      	cmp	r2, #1
 800160c:	d1c9      	bne.n	80015a2 <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160e:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001610:	21f8      	movs	r1, #248	; 0xf8
 8001612:	fa91 f1a1 	rbit	r1, r1
 8001616:	6920      	ldr	r0, [r4, #16]
 8001618:	fab1 f181 	clz	r1, r1
 800161c:	fa00 f101 	lsl.w	r1, r0, r1
 8001620:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001624:	430a      	orrs	r2, r1
 8001626:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001628:	e02e      	b.n	8001688 <HAL_RCC_OscConfig+0x124>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800162a:	68e2      	ldr	r2, [r4, #12]
 800162c:	4b7c      	ldr	r3, [pc, #496]	; (8001820 <HAL_RCC_OscConfig+0x2bc>)
 800162e:	b1ea      	cbz	r2, 800166c <HAL_RCC_OscConfig+0x108>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f000 fd44 	bl	80020c0 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001638:	4d77      	ldr	r5, [pc, #476]	; (8001818 <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163a:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163c:	682b      	ldr	r3, [r5, #0]
 800163e:	4876      	ldr	r0, [pc, #472]	; (8001818 <HAL_RCC_OscConfig+0x2b4>)
 8001640:	079b      	lsls	r3, r3, #30
 8001642:	d405      	bmi.n	8001650 <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001644:	f000 fd3c 	bl	80020c0 <HAL_GetTick>
 8001648:	1b80      	subs	r0, r0, r6
 800164a:	2802      	cmp	r0, #2
 800164c:	d9f6      	bls.n	800163c <HAL_RCC_OscConfig+0xd8>
 800164e:	e7bb      	b.n	80015c8 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001650:	6803      	ldr	r3, [r0, #0]
 8001652:	22f8      	movs	r2, #248	; 0xf8
 8001654:	fa92 f2a2 	rbit	r2, r2
 8001658:	6921      	ldr	r1, [r4, #16]
 800165a:	fab2 f282 	clz	r2, r2
 800165e:	fa01 f202 	lsl.w	r2, r1, r2
 8001662:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001666:	4313      	orrs	r3, r2
 8001668:	6003      	str	r3, [r0, #0]
 800166a:	e00d      	b.n	8001688 <HAL_RCC_OscConfig+0x124>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166e:	f000 fd27 	bl	80020c0 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	4d69      	ldr	r5, [pc, #420]	; (8001818 <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001676:	682b      	ldr	r3, [r5, #0]
 8001678:	079f      	lsls	r7, r3, #30
 800167a:	d505      	bpl.n	8001688 <HAL_RCC_OscConfig+0x124>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800167c:	f000 fd20 	bl	80020c0 <HAL_GetTick>
 8001680:	1b80      	subs	r0, r0, r6
 8001682:	2802      	cmp	r0, #2
 8001684:	d9f7      	bls.n	8001676 <HAL_RCC_OscConfig+0x112>
 8001686:	e79f      	b.n	80015c8 <HAL_RCC_OscConfig+0x64>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	071e      	lsls	r6, r3, #28
 800168c:	d403      	bmi.n	8001696 <HAL_RCC_OscConfig+0x132>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	075d      	lsls	r5, r3, #29
 8001692:	d545      	bpl.n	8001720 <HAL_RCC_OscConfig+0x1bc>
 8001694:	e01f      	b.n	80016d6 <HAL_RCC_OscConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001696:	6962      	ldr	r2, [r4, #20]
 8001698:	4b62      	ldr	r3, [pc, #392]	; (8001824 <HAL_RCC_OscConfig+0x2c0>)
 800169a:	b172      	cbz	r2, 80016ba <HAL_RCC_OscConfig+0x156>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800169c:	2201      	movs	r2, #1
 800169e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a0:	f000 fd0e 	bl	80020c0 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a4:	4d5c      	ldr	r5, [pc, #368]	; (8001818 <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a6:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016aa:	0798      	lsls	r0, r3, #30
 80016ac:	d4ef      	bmi.n	800168e <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ae:	f000 fd07 	bl	80020c0 <HAL_GetTick>
 80016b2:	1b80      	subs	r0, r0, r6
 80016b4:	2802      	cmp	r0, #2
 80016b6:	d9f7      	bls.n	80016a8 <HAL_RCC_OscConfig+0x144>
 80016b8:	e786      	b.n	80015c8 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ba:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016bc:	f000 fd00 	bl	80020c0 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c0:	4d55      	ldr	r5, [pc, #340]	; (8001818 <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c2:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016c6:	0799      	lsls	r1, r3, #30
 80016c8:	d5e1      	bpl.n	800168e <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ca:	f000 fcf9 	bl	80020c0 <HAL_GetTick>
 80016ce:	1b80      	subs	r0, r0, r6
 80016d0:	2802      	cmp	r0, #2
 80016d2:	d9f7      	bls.n	80016c4 <HAL_RCC_OscConfig+0x160>
 80016d4:	e778      	b.n	80015c8 <HAL_RCC_OscConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	4b4f      	ldr	r3, [pc, #316]	; (8001818 <HAL_RCC_OscConfig+0x2b4>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80016dc:	4d52      	ldr	r5, [pc, #328]	; (8001828 <HAL_RCC_OscConfig+0x2c4>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016e4:	641a      	str	r2, [r3, #64]	; 0x40
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80016f0:	682b      	ldr	r3, [r5, #0]
 80016f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f6:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 80016f8:	f000 fce2 	bl	80020c0 <HAL_GetTick>
 80016fc:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80016fe:	682b      	ldr	r3, [r5, #0]
 8001700:	05da      	lsls	r2, r3, #23
 8001702:	d510      	bpl.n	8001726 <HAL_RCC_OscConfig+0x1c2>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001704:	4b49      	ldr	r3, [pc, #292]	; (800182c <HAL_RCC_OscConfig+0x2c8>)
 8001706:	7a22      	ldrb	r2, [r4, #8]
 8001708:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800170a:	68a3      	ldr	r3, [r4, #8]
 800170c:	b1bb      	cbz	r3, 800173e <HAL_RCC_OscConfig+0x1da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170e:	f000 fcd7 	bl	80020c0 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001712:	4d41      	ldr	r5, [pc, #260]	; (8001818 <HAL_RCC_OscConfig+0x2b4>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001714:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001716:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800171c:	079b      	lsls	r3, r3, #30
 800171e:	d508      	bpl.n	8001732 <HAL_RCC_OscConfig+0x1ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001720:	69a2      	ldr	r2, [r4, #24]
 8001722:	b9da      	cbnz	r2, 800175c <HAL_RCC_OscConfig+0x1f8>
 8001724:	e059      	b.n	80017da <HAL_RCC_OscConfig+0x276>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001726:	f000 fccb 	bl	80020c0 <HAL_GetTick>
 800172a:	1b80      	subs	r0, r0, r6
 800172c:	2802      	cmp	r0, #2
 800172e:	d9e6      	bls.n	80016fe <HAL_RCC_OscConfig+0x19a>
 8001730:	e74a      	b.n	80015c8 <HAL_RCC_OscConfig+0x64>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f000 fcc5 	bl	80020c0 <HAL_GetTick>
 8001736:	1b80      	subs	r0, r0, r6
 8001738:	42b8      	cmp	r0, r7
 800173a:	d9ee      	bls.n	800171a <HAL_RCC_OscConfig+0x1b6>
 800173c:	e744      	b.n	80015c8 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173e:	f000 fcbf 	bl	80020c0 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001742:	4d35      	ldr	r5, [pc, #212]	; (8001818 <HAL_RCC_OscConfig+0x2b4>)
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001744:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001746:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800174a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800174c:	0798      	lsls	r0, r3, #30
 800174e:	d5e7      	bpl.n	8001720 <HAL_RCC_OscConfig+0x1bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001750:	f000 fcb6 	bl	80020c0 <HAL_GetTick>
 8001754:	1b80      	subs	r0, r0, r6
 8001756:	42b8      	cmp	r0, r7
 8001758:	d9f7      	bls.n	800174a <HAL_RCC_OscConfig+0x1e6>
 800175a:	e735      	b.n	80015c8 <HAL_RCC_OscConfig+0x64>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800175c:	4d2e      	ldr	r5, [pc, #184]	; (8001818 <HAL_RCC_OscConfig+0x2b4>)
 800175e:	68ab      	ldr	r3, [r5, #8]
 8001760:	f003 030c 	and.w	r3, r3, #12
 8001764:	2b08      	cmp	r3, #8
 8001766:	f43f af1c 	beq.w	80015a2 <HAL_RCC_OscConfig+0x3e>
 800176a:	4e31      	ldr	r6, [pc, #196]	; (8001830 <HAL_RCC_OscConfig+0x2cc>)
 800176c:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800176e:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001770:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001772:	d141      	bne.n	80017f8 <HAL_RCC_OscConfig+0x294>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f000 fca4 	bl	80020c0 <HAL_GetTick>
 8001778:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177a:	682b      	ldr	r3, [r5, #0]
 800177c:	4f26      	ldr	r7, [pc, #152]	; (8001818 <HAL_RCC_OscConfig+0x2b4>)
 800177e:	0199      	lsls	r1, r3, #6
 8001780:	d42d      	bmi.n	80017de <HAL_RCC_OscConfig+0x27a>
 8001782:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001786:	fa92 f2a2 	rbit	r2, r2
 800178a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800178e:	fab2 fe82 	clz	lr, r2
 8001792:	fa93 f3a3 	rbit	r3, r3
 8001796:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800179a:	fab3 f583 	clz	r5, r3
 800179e:	fa92 f2a2 	rbit	r2, r2
 80017a2:	69e0      	ldr	r0, [r4, #28]
 80017a4:	6a23      	ldr	r3, [r4, #32]
 80017a6:	fab2 f182 	clz	r1, r2
 80017aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80017ac:	4303      	orrs	r3, r0
 80017ae:	fa02 f20e 	lsl.w	r2, r2, lr
 80017b2:	ea43 0002 	orr.w	r0, r3, r2
 80017b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017b8:	085a      	lsrs	r2, r3, #1
 80017ba:	3a01      	subs	r2, #1
 80017bc:	fa02 f305 	lsl.w	r3, r2, r5
 80017c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80017c2:	4303      	orrs	r3, r0
 80017c4:	408a      	lsls	r2, r1
 80017c6:	4313      	orrs	r3, r2
 80017c8:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ca:	2301      	movs	r3, #1
 80017cc:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f000 fc77 	bl	80020c0 <HAL_GetTick>
 80017d2:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	019a      	lsls	r2, r3, #6
 80017d8:	d508      	bpl.n	80017ec <HAL_RCC_OscConfig+0x288>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80017da:	2000      	movs	r0, #0
 80017dc:	e018      	b.n	8001810 <HAL_RCC_OscConfig+0x2ac>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017de:	f000 fc6f 	bl	80020c0 <HAL_GetTick>
 80017e2:	ebc8 0000 	rsb	r0, r8, r0
 80017e6:	2802      	cmp	r0, #2
 80017e8:	d9c7      	bls.n	800177a <HAL_RCC_OscConfig+0x216>
 80017ea:	e6ed      	b.n	80015c8 <HAL_RCC_OscConfig+0x64>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ec:	f000 fc68 	bl	80020c0 <HAL_GetTick>
 80017f0:	1b00      	subs	r0, r0, r4
 80017f2:	2802      	cmp	r0, #2
 80017f4:	d9ee      	bls.n	80017d4 <HAL_RCC_OscConfig+0x270>
 80017f6:	e6e7      	b.n	80015c8 <HAL_RCC_OscConfig+0x64>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f000 fc62 	bl	80020c0 <HAL_GetTick>
 80017fc:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	682b      	ldr	r3, [r5, #0]
 8001800:	019b      	lsls	r3, r3, #6
 8001802:	d5ea      	bpl.n	80017da <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001804:	f000 fc5c 	bl	80020c0 <HAL_GetTick>
 8001808:	1b00      	subs	r0, r0, r4
 800180a:	2802      	cmp	r0, #2
 800180c:	d9f7      	bls.n	80017fe <HAL_RCC_OscConfig+0x29a>
 800180e:	e6db      	b.n	80015c8 <HAL_RCC_OscConfig+0x64>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001810:	b002      	add	sp, #8
 8001812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800
 800181c:	40023802 	.word	0x40023802
 8001820:	42470000 	.word	0x42470000
 8001824:	42470e80 	.word	0x42470e80
 8001828:	40007000 	.word	0x40007000
 800182c:	40023870 	.word	0x40023870
 8001830:	42470060 	.word	0x42470060

08001834 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001834:	491b      	ldr	r1, [pc, #108]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x70>)
 8001836:	688b      	ldr	r3, [r1, #8]
 8001838:	f003 030c 	and.w	r3, r3, #12
 800183c:	2b04      	cmp	r3, #4
 800183e:	d02c      	beq.n	800189a <HAL_RCC_GetSysClockFreq+0x66>
 8001840:	2b08      	cmp	r3, #8
 8001842:	d12c      	bne.n	800189e <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001844:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001846:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001848:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800184c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001850:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001854:	684b      	ldr	r3, [r1, #4]
 8001856:	fa92 f2a2 	rbit	r2, r2
 800185a:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800185e:	fab2 f282 	clz	r2, r2
 8001862:	ea01 0103 	and.w	r1, r1, r3
 8001866:	fa21 f102 	lsr.w	r1, r1, r2
 800186a:	bf14      	ite	ne
 800186c:	4a0e      	ldrne	r2, [pc, #56]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800186e:	4a0f      	ldreq	r2, [pc, #60]	; (80018ac <HAL_RCC_GetSysClockFreq+0x78>)
 8001870:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001874:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001876:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800187a:	6852      	ldr	r2, [r2, #4]
 800187c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001880:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8001884:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001888:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 800188c:	fa22 f000 	lsr.w	r0, r2, r0
 8001890:	3001      	adds	r0, #1
 8001892:	0040      	lsls	r0, r0, #1
 8001894:	fbb3 f0f0 	udiv	r0, r3, r0
 8001898:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800189a:	4803      	ldr	r0, [pc, #12]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x74>)
 800189c:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800189e:	4803      	ldr	r0, [pc, #12]	; (80018ac <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	017d7840 	.word	0x017d7840
 80018ac:	00f42400 	.word	0x00f42400

080018b0 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80018b0:	4b55      	ldr	r3, [pc, #340]	; (8001a08 <HAL_RCC_ClockConfig+0x158>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	f002 020f 	and.w	r2, r2, #15
 80018b8:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018be:	4605      	mov	r5, r0
 80018c0:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80018c2:	d30a      	bcc.n	80018da <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c4:	6829      	ldr	r1, [r5, #0]
 80018c6:	0788      	lsls	r0, r1, #30
 80018c8:	d511      	bpl.n	80018ee <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ca:	4850      	ldr	r0, [pc, #320]	; (8001a0c <HAL_RCC_ClockConfig+0x15c>)
 80018cc:	6883      	ldr	r3, [r0, #8]
 80018ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d2:	68ab      	ldr	r3, [r5, #8]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	6083      	str	r3, [r0, #8]
 80018d8:	e009      	b.n	80018ee <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	b2ca      	uxtb	r2, r1
 80018dc:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 030f 	and.w	r3, r3, #15
 80018e4:	4299      	cmp	r1, r3
 80018e6:	d0ed      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 80018e8:	2001      	movs	r0, #1
 80018ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ee:	07c9      	lsls	r1, r1, #31
 80018f0:	d406      	bmi.n	8001900 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80018f2:	4b45      	ldr	r3, [pc, #276]	; (8001a08 <HAL_RCC_ClockConfig+0x158>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	f002 020f 	and.w	r2, r2, #15
 80018fa:	4296      	cmp	r6, r2
 80018fc:	d351      	bcc.n	80019a2 <HAL_RCC_ClockConfig+0xf2>
 80018fe:	e057      	b.n	80019b0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001900:	686b      	ldr	r3, [r5, #4]
 8001902:	4a42      	ldr	r2, [pc, #264]	; (8001a0c <HAL_RCC_ClockConfig+0x15c>)
 8001904:	2b01      	cmp	r3, #1
 8001906:	d103      	bne.n	8001910 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800190e:	e008      	b.n	8001922 <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001910:	1e99      	subs	r1, r3, #2
 8001912:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001914:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001916:	d802      	bhi.n	800191e <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001918:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800191c:	e001      	b.n	8001922 <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191e:	f012 0f02 	tst.w	r2, #2
 8001922:	d0e1      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001924:	4c39      	ldr	r4, [pc, #228]	; (8001a0c <HAL_RCC_ClockConfig+0x15c>)
 8001926:	68a2      	ldr	r2, [r4, #8]
 8001928:	f022 0203 	bic.w	r2, r2, #3
 800192c:	4313      	orrs	r3, r2
 800192e:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001930:	f000 fbc6 	bl	80020c0 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001934:	686b      	ldr	r3, [r5, #4]
 8001936:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001938:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193a:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193e:	d10c      	bne.n	800195a <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001940:	68a3      	ldr	r3, [r4, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b04      	cmp	r3, #4
 8001948:	d0d3      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194a:	f000 fbb9 	bl	80020c0 <HAL_GetTick>
 800194e:	1bc0      	subs	r0, r0, r7
 8001950:	4540      	cmp	r0, r8
 8001952:	d9f5      	bls.n	8001940 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8001954:	2003      	movs	r0, #3
 8001956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800195a:	2b02      	cmp	r3, #2
 800195c:	d10a      	bne.n	8001974 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800195e:	68a3      	ldr	r3, [r4, #8]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b08      	cmp	r3, #8
 8001966:	d0c4      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001968:	f000 fbaa 	bl	80020c0 <HAL_GetTick>
 800196c:	1bc0      	subs	r0, r0, r7
 800196e:	4540      	cmp	r0, r8
 8001970:	d9f5      	bls.n	800195e <HAL_RCC_ClockConfig+0xae>
 8001972:	e7ef      	b.n	8001954 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8001974:	2b03      	cmp	r3, #3
 8001976:	d10f      	bne.n	8001998 <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001978:	68a3      	ldr	r3, [r4, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b0c      	cmp	r3, #12
 8001980:	d0b7      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001982:	f000 fb9d 	bl	80020c0 <HAL_GetTick>
 8001986:	1bc0      	subs	r0, r0, r7
 8001988:	4540      	cmp	r0, r8
 800198a:	d9f5      	bls.n	8001978 <HAL_RCC_ClockConfig+0xc8>
 800198c:	e7e2      	b.n	8001954 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198e:	f000 fb97 	bl	80020c0 <HAL_GetTick>
 8001992:	1bc0      	subs	r0, r0, r7
 8001994:	4540      	cmp	r0, r8
 8001996:	d8dd      	bhi.n	8001954 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001998:	68a3      	ldr	r3, [r4, #8]
 800199a:	f013 0f0c 	tst.w	r3, #12
 800199e:	d1f6      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
 80019a0:	e7a7      	b.n	80018f2 <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a2:	b2f2      	uxtb	r2, r6
 80019a4:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	429e      	cmp	r6, r3
 80019ae:	d19b      	bne.n	80018e8 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	6829      	ldr	r1, [r5, #0]
 80019b2:	074a      	lsls	r2, r1, #29
 80019b4:	d506      	bpl.n	80019c4 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b6:	4815      	ldr	r0, [pc, #84]	; (8001a0c <HAL_RCC_ClockConfig+0x15c>)
 80019b8:	6883      	ldr	r3, [r0, #8]
 80019ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019be:	68eb      	ldr	r3, [r5, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c4:	070b      	lsls	r3, r1, #28
 80019c6:	d507      	bpl.n	80019d8 <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019c8:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <HAL_RCC_ClockConfig+0x15c>)
 80019ca:	6929      	ldr	r1, [r5, #16]
 80019cc:	6893      	ldr	r3, [r2, #8]
 80019ce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80019d2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019d6:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80019d8:	f7ff ff2c 	bl	8001834 <HAL_RCC_GetSysClockFreq>
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_RCC_ClockConfig+0x15c>)
 80019de:	22f0      	movs	r2, #240	; 0xf0
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	fa92 f2a2 	rbit	r2, r2
 80019e6:	fab2 f282 	clz	r2, r2
 80019ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019ee:	40d3      	lsrs	r3, r2
 80019f0:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_RCC_ClockConfig+0x160>)
 80019f2:	5cd3      	ldrb	r3, [r2, r3]
 80019f4:	40d8      	lsrs	r0, r3
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <HAL_RCC_ClockConfig+0x164>)
 80019f8:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019fa:	2000      	movs	r0, #0
 80019fc:	f000 fbca 	bl	8002194 <HAL_InitTick>
  
  return HAL_OK;
 8001a00:	2000      	movs	r0, #0
}
 8001a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a06:	bf00      	nop
 8001a08:	40023c00 	.word	0x40023c00
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	08002b81 	.word	0x08002b81
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001a18:	4b01      	ldr	r3, [pc, #4]	; (8001a20 <HAL_RCC_GetHCLKFreq+0x8>)
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a26:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	fa92 f2a2 	rbit	r2, r2
 8001a30:	fab2 f282 	clz	r2, r2
 8001a34:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001a38:	40d3      	lsrs	r3, r2
 8001a3a:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a3c:	5cd3      	ldrb	r3, [r2, r3]
 8001a3e:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001a40:	6810      	ldr	r0, [r2, #0]
}
 8001a42:	40d8      	lsrs	r0, r3
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	08002b81 	.word	0x08002b81
 8001a50:	20000004 	.word	0x20000004

08001a54 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a56:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	fa92 f2a2 	rbit	r2, r2
 8001a60:	fab2 f282 	clz	r2, r2
 8001a64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001a68:	40d3      	lsrs	r3, r2
 8001a6a:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a6c:	5cd3      	ldrb	r3, [r2, r3]
 8001a6e:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001a70:	6810      	ldr	r0, [r2, #0]
} 
 8001a72:	40d8      	lsrs	r0, r3
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	08002b81 	.word	0x08002b81
 8001a80:	20000004 	.word	0x20000004

08001a84 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a84:	230f      	movs	r3, #15
 8001a86:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_GetClockConfig+0x34>)
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	f002 0203 	and.w	r2, r2, #3
 8001a90:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001a98:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001aa0:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	08db      	lsrs	r3, r3, #3
 8001aa6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001aaa:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <HAL_RCC_GetClockConfig+0x38>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	600b      	str	r3, [r1, #0]
 8001ab6:	4770      	bx	lr
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40023c00 	.word	0x40023c00

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac4:	4f6a      	ldr	r7, [pc, #424]	; (8001c70 <HAL_GPIO_Init+0x1b0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac8:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8001c78 <HAL_GPIO_Init+0x1b8>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001acc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001c7c <HAL_GPIO_Init+0x1bc>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad2:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8001ad8:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8001ada:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8001adc:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8001ade:	ea34 0303 	bics.w	r3, r4, r3
 8001ae2:	f040 80bd 	bne.w	8001c60 <HAL_GPIO_Init+0x1a0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae6:	684d      	ldr	r5, [r1, #4]
 8001ae8:	f025 0a10 	bic.w	sl, r5, #16
 8001aec:	f1ba 0f02 	cmp.w	sl, #2
 8001af0:	d114      	bne.n	8001b1c <HAL_GPIO_Init+0x5c>
 8001af2:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8001af6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001afa:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001afe:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001b02:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001b06:	230f      	movs	r3, #15
 8001b08:	fa03 f30b 	lsl.w	r3, r3, fp
 8001b0c:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001b10:	690b      	ldr	r3, [r1, #16]
 8001b12:	fa03 f30b 	lsl.w	r3, r3, fp
 8001b16:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 8001b18:	f8c9 3020 	str.w	r3, [r9, #32]
 8001b1c:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b20:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b24:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b26:	fa09 f90b 	lsl.w	r9, r9, fp
 8001b2a:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b2e:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b32:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b36:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b3a:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b3e:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b40:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8001b44:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b46:	d80f      	bhi.n	8001b68 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b48:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b4a:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b4c:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b50:	fa06 f60b 	lsl.w	r6, r6, fp
 8001b54:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8001b56:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b58:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b5a:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b5e:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b62:	4096      	lsls	r6, r2
 8001b64:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8001b66:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b68:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b6a:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b6e:	688b      	ldr	r3, [r1, #8]
 8001b70:	fa03 f30b 	lsl.w	r3, r3, fp
 8001b74:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8001b78:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b7a:	00eb      	lsls	r3, r5, #3
 8001b7c:	d570      	bpl.n	8001c60 <HAL_GPIO_Init+0x1a0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	9303      	str	r3, [sp, #12]
 8001b82:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b86:	4b3b      	ldr	r3, [pc, #236]	; (8001c74 <HAL_GPIO_Init+0x1b4>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b88:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001b8c:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8001b90:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8001b94:	f022 0903 	bic.w	r9, r2, #3
 8001b98:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8001b9c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001ba0:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8001ba4:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001ba6:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bac:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001bb0:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001bb4:	260f      	movs	r6, #15
 8001bb6:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bba:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001bbc:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bc0:	d01c      	beq.n	8001bfc <HAL_GPIO_Init+0x13c>
 8001bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bc6:	4298      	cmp	r0, r3
 8001bc8:	d01a      	beq.n	8001c00 <HAL_GPIO_Init+0x140>
 8001bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bce:	4298      	cmp	r0, r3
 8001bd0:	d018      	beq.n	8001c04 <HAL_GPIO_Init+0x144>
 8001bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bd6:	4298      	cmp	r0, r3
 8001bd8:	d016      	beq.n	8001c08 <HAL_GPIO_Init+0x148>
 8001bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bde:	4298      	cmp	r0, r3
 8001be0:	d014      	beq.n	8001c0c <HAL_GPIO_Init+0x14c>
 8001be2:	4540      	cmp	r0, r8
 8001be4:	d014      	beq.n	8001c10 <HAL_GPIO_Init+0x150>
 8001be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bea:	4298      	cmp	r0, r3
 8001bec:	d012      	beq.n	8001c14 <HAL_GPIO_Init+0x154>
 8001bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bf2:	4298      	cmp	r0, r3
 8001bf4:	bf14      	ite	ne
 8001bf6:	2308      	movne	r3, #8
 8001bf8:	2307      	moveq	r3, #7
 8001bfa:	e00c      	b.n	8001c16 <HAL_GPIO_Init+0x156>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e00a      	b.n	8001c16 <HAL_GPIO_Init+0x156>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e008      	b.n	8001c16 <HAL_GPIO_Init+0x156>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e006      	b.n	8001c16 <HAL_GPIO_Init+0x156>
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e004      	b.n	8001c16 <HAL_GPIO_Init+0x156>
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	e002      	b.n	8001c16 <HAL_GPIO_Init+0x156>
 8001c10:	2305      	movs	r3, #5
 8001c12:	e000      	b.n	8001c16 <HAL_GPIO_Init+0x156>
 8001c14:	2306      	movs	r3, #6
 8001c16:	fa03 f30a 	lsl.w	r3, r3, sl
 8001c1a:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c1c:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c20:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8001c22:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c24:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8001c28:	bf0c      	ite	eq
 8001c2a:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8001c2c:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 8001c2e:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001c32:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c36:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8001c3a:	bf0c      	ite	eq
 8001c3c:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8001c3e:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8001c40:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c42:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c44:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8001c48:	bf0c      	ite	eq
 8001c4a:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8001c4c:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 8001c4e:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8001c52:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c56:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8001c58:	bf54      	ite	pl
 8001c5a:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8001c5c:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 8001c5e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c60:	3201      	adds	r2, #1
 8001c62:	2a10      	cmp	r2, #16
 8001c64:	f47f af38 	bne.w	8001ad8 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8001c68:	b005      	add	sp, #20
 8001c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c6e:	bf00      	nop
 8001c70:	40013c00 	.word	0x40013c00
 8001c74:	40020000 	.word	0x40020000
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40021400 	.word	0x40021400

08001c80 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c80:	6803      	ldr	r3, [r0, #0]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c88:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c8c:	2118      	movs	r1, #24
 8001c8e:	3a10      	subs	r2, #16
 8001c90:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c94:	4904      	ldr	r1, [pc, #16]	; (8001ca8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001c96:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c98:	bf88      	it	hi
 8001c9a:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c9c:	5c89      	ldrb	r1, [r1, r2]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c9e:	6583      	str	r3, [r0, #88]	; 0x58
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ca0:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001ca2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	08002b91 	.word	0x08002b91

08001cac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cac:	b570      	push	{r4, r5, r6, lr}
 8001cae:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001cb0:	f000 fa06 	bl	80020c0 <HAL_GetTick>
 8001cb4:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cb6:	2c00      	cmp	r4, #0
 8001cb8:	d064      	beq.n	8001d84 <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cc0:	6822      	ldr	r2, [r4, #0]
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cc8:	6813      	ldr	r3, [r2, #0]
 8001cca:	f023 0301 	bic.w	r3, r3, #1
 8001cce:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd0:	6821      	ldr	r1, [r4, #0]
 8001cd2:	680b      	ldr	r3, [r1, #0]
 8001cd4:	07d8      	lsls	r0, r3, #31
 8001cd6:	d508      	bpl.n	8001cea <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cd8:	f000 f9f2 	bl	80020c0 <HAL_GetTick>
 8001cdc:	1b40      	subs	r0, r0, r5
 8001cde:	2805      	cmp	r0, #5
 8001ce0:	d9f6      	bls.n	8001cd0 <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce2:	2320      	movs	r3, #32
 8001ce4:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ce6:	2003      	movs	r0, #3
 8001ce8:	e051      	b.n	8001d8e <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cea:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cec:	4a29      	ldr	r2, [pc, #164]	; (8001d94 <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cee:	6865      	ldr	r5, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf0:	69a0      	ldr	r0, [r4, #24]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cf2:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cf4:	68a3      	ldr	r3, [r4, #8]
 8001cf6:	431d      	orrs	r5, r3
 8001cf8:	68e3      	ldr	r3, [r4, #12]
 8001cfa:	431d      	orrs	r5, r3
 8001cfc:	6923      	ldr	r3, [r4, #16]
 8001cfe:	431d      	orrs	r5, r3
 8001d00:	6963      	ldr	r3, [r4, #20]
 8001d02:	432b      	orrs	r3, r5
 8001d04:	69e5      	ldr	r5, [r4, #28]
 8001d06:	4303      	orrs	r3, r0
 8001d08:	432b      	orrs	r3, r5
 8001d0a:	6a25      	ldr	r5, [r4, #32]
 8001d0c:	432b      	orrs	r3, r5
 8001d0e:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d10:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d12:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d14:	bf01      	itttt	eq
 8001d16:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 8001d18:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 8001d1a:	4335      	orreq	r5, r6
 8001d1c:	432b      	orreq	r3, r5
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d1e:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d20:	694b      	ldr	r3, [r1, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d22:	2a04      	cmp	r2, #4

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d24:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d28:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d2c:	d11c      	bne.n	8001d68 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001d30:	4313      	orrs	r3, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d32:	b920      	cbnz	r0, 8001d3e <HAL_DMA_Init+0x92>
  {
    switch (tmp)
 8001d34:	2a01      	cmp	r2, #1
 8001d36:	d00b      	beq.n	8001d50 <HAL_DMA_Init+0xa4>
 8001d38:	d313      	bcc.n	8001d62 <HAL_DMA_Init+0xb6>
 8001d3a:	2a02      	cmp	r2, #2
 8001d3c:	e010      	b.n	8001d60 <HAL_DMA_Init+0xb4>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d3e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001d42:	d10a      	bne.n	8001d5a <HAL_DMA_Init+0xae>
  {
    switch (tmp)
 8001d44:	2a03      	cmp	r2, #3
 8001d46:	d80f      	bhi.n	8001d68 <HAL_DMA_Init+0xbc>
 8001d48:	e8df f002 	tbb	[pc, r2]
 8001d4c:	021e0b1e 	.word	0x021e0b1e
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d52:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 8001d56:	d107      	bne.n	8001d68 <HAL_DMA_Init+0xbc>
 8001d58:	e016      	b.n	8001d88 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d5a:	2a02      	cmp	r2, #2
 8001d5c:	d914      	bls.n	8001d88 <HAL_DMA_Init+0xdc>
 8001d5e:	2a03      	cmp	r2, #3
 8001d60:	d102      	bne.n	8001d68 <HAL_DMA_Init+0xbc>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d64:	01d2      	lsls	r2, r2, #7
 8001d66:	d40f      	bmi.n	8001d88 <HAL_DMA_Init+0xdc>
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d68:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f7ff ff88 	bl	8001c80 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d70:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001d72:	233f      	movs	r3, #63	; 0x3f
 8001d74:	4093      	lsls	r3, r2
 8001d76:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d78:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d7a:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d7c:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d7e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8001d82:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8001d84:	2001      	movs	r0, #1
 8001d86:	bd70      	pop	{r4, r5, r6, pc}
    tmp |= hdma->Init.FIFOThreshold;
    
    if(DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d88:	2340      	movs	r3, #64	; 0x40
 8001d8a:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8001d92:	bd70      	pop	{r4, r5, r6, pc}
 8001d94:	f010803f 	.word	0xf010803f

08001d98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d98:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d9a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001d9e:	2c01      	cmp	r4, #1
 8001da0:	d038      	beq.n	8001e14 <HAL_DMA_Start_IT+0x7c>
 8001da2:	2401      	movs	r4, #1
 8001da4:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001da8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dac:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dae:	2c01      	cmp	r4, #1
 8001db0:	f04f 0500 	mov.w	r5, #0
 8001db4:	f04f 0402 	mov.w	r4, #2
 8001db8:	d128      	bne.n	8001e0c <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dba:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dbe:	6804      	ldr	r4, [r0, #0]
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc0:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dc2:	6825      	ldr	r5, [r4, #0]
 8001dc4:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001dc8:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dca:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dcc:	6883      	ldr	r3, [r0, #8]
 8001dce:	2b40      	cmp	r3, #64	; 0x40
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dd0:	bf0e      	itee	eq
 8001dd2:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001dd4:	60a1      	strne	r1, [r4, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001dd6:	60e2      	strne	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dd8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001dda:	bf08      	it	eq
 8001ddc:	60e1      	streq	r1, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dde:	233f      	movs	r3, #63	; 0x3f
 8001de0:	4093      	lsls	r3, r2
 8001de2:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	f043 0316 	orr.w	r3, r3, #22
 8001dea:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001dec:	6963      	ldr	r3, [r4, #20]
 8001dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df2:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001df4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001df6:	b11b      	cbz	r3, 8001e00 <HAL_DMA_Start_IT+0x68>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	f043 0308 	orr.w	r3, r3, #8
 8001dfe:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e00:	6823      	ldr	r3, [r4, #0]
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6023      	str	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 8001e08:	2000      	movs	r0, #0
 8001e0a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e0c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e10:	4620      	mov	r0, r4
 8001e12:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e14:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 8001e16:	bd70      	pop	{r4, r5, r6, pc}

08001e18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e1e:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8001e20:	4b59      	ldr	r3, [pc, #356]	; (8001f88 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e22:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8001e24:	681f      	ldr	r7, [r3, #0]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8001e26:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e28:	2308      	movs	r3, #8
 8001e2a:	4093      	lsls	r3, r2
 8001e2c:	421e      	tst	r6, r3
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e2e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e30:	d00c      	beq.n	8001e4c <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e32:	6801      	ldr	r1, [r0, #0]
 8001e34:	6808      	ldr	r0, [r1, #0]
 8001e36:	0740      	lsls	r0, r0, #29
 8001e38:	d508      	bpl.n	8001e4c <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e3a:	6808      	ldr	r0, [r1, #0]
 8001e3c:	f020 0004 	bic.w	r0, r0, #4
 8001e40:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e42:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e4c:	4b4f      	ldr	r3, [pc, #316]	; (8001f8c <HAL_DMA_IRQHandler+0x174>)
 8001e4e:	4093      	lsls	r3, r2
 8001e50:	421e      	tst	r6, r3
 8001e52:	d008      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e54:	6821      	ldr	r1, [r4, #0]
 8001e56:	6949      	ldr	r1, [r1, #20]
 8001e58:	0609      	lsls	r1, r1, #24
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e5a:	bf41      	itttt	mi
 8001e5c:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e5e:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 8001e60:	f043 0302 	orrmi.w	r3, r3, #2
 8001e64:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e66:	4b4a      	ldr	r3, [pc, #296]	; (8001f90 <HAL_DMA_IRQHandler+0x178>)
 8001e68:	4093      	lsls	r3, r2
 8001e6a:	421e      	tst	r6, r3
 8001e6c:	d008      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e6e:	6821      	ldr	r1, [r4, #0]
 8001e70:	6809      	ldr	r1, [r1, #0]
 8001e72:	0788      	lsls	r0, r1, #30
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e74:	bf41      	itttt	mi
 8001e76:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e78:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 8001e7a:	f043 0304 	orrmi.w	r3, r3, #4
 8001e7e:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e80:	2310      	movs	r3, #16
 8001e82:	fa03 f202 	lsl.w	r2, r3, r2
 8001e86:	4216      	tst	r6, r2
 8001e88:	d017      	beq.n	8001eba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	6819      	ldr	r1, [r3, #0]
 8001e8e:	0709      	lsls	r1, r1, #28
 8001e90:	d513      	bpl.n	8001eba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e92:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	0350      	lsls	r0, r2, #13
 8001e98:	d504      	bpl.n	8001ea4 <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	0319      	lsls	r1, r3, #12
 8001e9e:	d508      	bpl.n	8001eb2 <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ea0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001ea2:	e007      	b.n	8001eb4 <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	05d2      	lsls	r2, r2, #23
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ea8:	bf5e      	ittt	pl
 8001eaa:	681a      	ldrpl	r2, [r3, #0]
 8001eac:	f022 0208 	bicpl.w	r2, r2, #8
 8001eb0:	601a      	strpl	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001eb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001eb4:	b10b      	cbz	r3, 8001eba <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001eba:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	408a      	lsls	r2, r1
 8001ec0:	4216      	tst	r6, r2
 8001ec2:	d03b      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	06c6      	lsls	r6, r0, #27
 8001eca:	d537      	bpl.n	8001f3c <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ecc:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ece:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001ed2:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ed4:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ed6:	d119      	bne.n	8001f0c <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ed8:	f022 0216 	bic.w	r2, r2, #22
 8001edc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ede:	695a      	ldr	r2, [r3, #20]
 8001ee0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ee4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ee6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ee8:	b90a      	cbnz	r2, 8001eee <HAL_DMA_IRQHandler+0xd6>
 8001eea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001eec:	b11a      	cbz	r2, 8001ef6 <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	f022 0208 	bic.w	r2, r2, #8
 8001ef4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ef6:	233f      	movs	r3, #63	; 0x3f
 8001ef8:	408b      	lsls	r3, r1
 8001efa:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001efc:	2300      	movs	r3, #0
 8001efe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f02:	2301      	movs	r3, #1
 8001f04:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001f08:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001f0a:	e037      	b.n	8001f7c <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f0c:	0350      	lsls	r0, r2, #13
 8001f0e:	d504      	bpl.n	8001f1a <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	0319      	lsls	r1, r3, #12
 8001f14:	d40e      	bmi.n	8001f34 <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f18:	e00d      	b.n	8001f36 <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001f20:	d108      	bne.n	8001f34 <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f22:	6819      	ldr	r1, [r3, #0]
 8001f24:	f021 0110 	bic.w	r1, r1, #16
 8001f28:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f2a:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f2c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f30:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f36:	b10b      	cbz	r3, 8001f3c <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f38:	4620      	mov	r0, r4
 8001f3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f3e:	b303      	cbz	r3, 8001f82 <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f42:	07da      	lsls	r2, r3, #31
 8001f44:	d519      	bpl.n	8001f7a <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f46:	2305      	movs	r3, #5

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f48:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f4a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f4e:	6813      	ldr	r3, [r2, #0]
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8001f56:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001f5a:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);

      do
      {
        if (++count > timeout)
 8001f5e:	9b01      	ldr	r3, [sp, #4]
 8001f60:	3301      	adds	r3, #1
 8001f62:	429f      	cmp	r7, r3
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	d302      	bcc.n	8001f6e <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f68:	6813      	ldr	r3, [r2, #0]
 8001f6a:	07db      	lsls	r3, r3, #31
 8001f6c:	d4f7      	bmi.n	8001f5e <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f74:	2301      	movs	r3, #1
 8001f76:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f7a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001f7c:	b10b      	cbz	r3, 8001f82 <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f7e:	4620      	mov	r0, r4
 8001f80:	4798      	blx	r3
    }
  }
}
 8001f82:	b003      	add	sp, #12
 8001f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000004 	.word	0x20000004
 8001f8c:	00800001 	.word	0x00800001
 8001f90:	00800004 	.word	0x00800004

08001f94 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f94:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001f96:	68d3      	ldr	r3, [r2, #12]
 8001f98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f9c:	041b      	lsls	r3, r3, #16
 8001f9e:	0c1b      	lsrs	r3, r3, #16
 8001fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001fa4:	0200      	lsls	r0, r0, #8
 8001fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001faa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001fae:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001fb0:	60d3      	str	r3, [r2, #12]
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb8:	4b17      	ldr	r3, [pc, #92]	; (8002018 <HAL_NVIC_SetPriority+0x60>)
 8001fba:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fbc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fc0:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc2:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc6:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc8:	2c04      	cmp	r4, #4
 8001fca:	bf28      	it	cs
 8001fcc:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fce:	2d06      	cmp	r5, #6

  return (
 8001fd0:	f04f 0501 	mov.w	r5, #1
 8001fd4:	fa05 f404 	lsl.w	r4, r5, r4
 8001fd8:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fdc:	bf8c      	ite	hi
 8001fde:	3b03      	subhi	r3, #3
 8001fe0:	2300      	movls	r3, #0

  return (
 8001fe2:	400c      	ands	r4, r1
 8001fe4:	409c      	lsls	r4, r3
 8001fe6:	fa05 f303 	lsl.w	r3, r5, r3
 8001fea:	3b01      	subs	r3, #1
 8001fec:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001fee:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001ff0:	ea42 0204 	orr.w	r2, r2, r4
 8001ff4:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff8:	bfaf      	iteee	ge
 8001ffa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffe:	f000 000f 	andlt.w	r0, r0, #15
 8002002:	4b06      	ldrlt	r3, [pc, #24]	; (800201c <HAL_NVIC_SetPriority+0x64>)
 8002004:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002006:	bfa5      	ittet	ge
 8002008:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800200c:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200e:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002010:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8002014:	bd30      	pop	{r4, r5, pc}
 8002016:	bf00      	nop
 8002018:	e000ed00 	.word	0xe000ed00
 800201c:	e000ed14 	.word	0xe000ed14

08002020 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002020:	0942      	lsrs	r2, r0, #5
 8002022:	2301      	movs	r3, #1
 8002024:	f000 001f 	and.w	r0, r0, #31
 8002028:	fa03 f000 	lsl.w	r0, r3, r0
 800202c:	4b01      	ldr	r3, [pc, #4]	; (8002034 <HAL_NVIC_EnableIRQ+0x14>)
 800202e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002032:	4770      	bx	lr
 8002034:	e000e100 	.word	0xe000e100

08002038 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002038:	3801      	subs	r0, #1
 800203a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800203e:	d20a      	bcs.n	8002056 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002042:	4a07      	ldr	r2, [pc, #28]	; (8002060 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002044:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002046:	21f0      	movs	r1, #240	; 0xf0
 8002048:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800204c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204e:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002050:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8002056:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000e010 	.word	0xe000e010
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002066:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002068:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800206a:	bf0c      	ite	eq
 800206c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002070:	f022 0204 	bicne.w	r2, r2, #4
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	4770      	bx	lr
 8002078:	e000e010 	.word	0xe000e010

0800207c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800207c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800207e:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <HAL_Init+0x30>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002086:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800208e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002096:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002098:	2003      	movs	r0, #3
 800209a:	f7ff ff7b 	bl	8001f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800209e:	2000      	movs	r0, #0
 80020a0:	f000 f878 	bl	8002194 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80020a4:	f000 f8b2 	bl	800220c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80020a8:	2000      	movs	r0, #0
 80020aa:	bd08      	pop	{r3, pc}
 80020ac:	40023c00 	.word	0x40023c00

080020b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80020b0:	4a02      	ldr	r2, [pc, #8]	; (80020bc <HAL_IncTick+0xc>)
 80020b2:	6813      	ldr	r3, [r2, #0]
 80020b4:	3301      	adds	r3, #1
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20003d74 	.word	0x20003d74

080020c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80020c0:	4b01      	ldr	r3, [pc, #4]	; (80020c8 <HAL_GetTick+0x8>)
 80020c2:	6818      	ldr	r0, [r3, #0]
}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20003d74 	.word	0x20003d74

080020cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020cc:	490f      	ldr	r1, [pc, #60]	; (800210c <SystemInit+0x40>)
 80020ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80020d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <SystemInit+0x44>)
 80020dc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020de:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80020e0:	f042 0201 	orr.w	r2, r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020e6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80020ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80020f4:	4a07      	ldr	r2, [pc, #28]	; (8002114 <SystemInit+0x48>)
 80020f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020fe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002100:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002102:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002106:	608b      	str	r3, [r1, #8]
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000ed00 	.word	0xe000ed00
 8002110:	40023800 	.word	0x40023800
 8002114:	24003010 	.word	0x24003010

08002118 <NMI_Handler>:
 8002118:	4770      	bx	lr

0800211a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800211a:	e7fe      	b.n	800211a <HardFault_Handler>

0800211c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800211c:	e7fe      	b.n	800211c <MemManage_Handler>

0800211e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800211e:	e7fe      	b.n	800211e <BusFault_Handler>

08002120 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002120:	e7fe      	b.n	8002120 <UsageFault_Handler>

08002122 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002122:	4770      	bx	lr

08002124 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8002124:	f7fe bf09 	b.w	8000f3a <osSystickHandler>

08002128 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002128:	4801      	ldr	r0, [pc, #4]	; (8002130 <DMA1_Stream1_IRQHandler+0x8>)
 800212a:	f7ff be75 	b.w	8001e18 <HAL_DMA_IRQHandler>
 800212e:	bf00      	nop
 8002130:	20003e94 	.word	0x20003e94

08002134 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002134:	4801      	ldr	r0, [pc, #4]	; (800213c <DMA1_Stream3_IRQHandler+0x8>)
 8002136:	f7ff be6f 	b.w	8001e18 <HAL_DMA_IRQHandler>
 800213a:	bf00      	nop
 800213c:	20003f50 	.word	0x20003f50

08002140 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002140:	4801      	ldr	r0, [pc, #4]	; (8002148 <DMA1_Stream5_IRQHandler+0x8>)
 8002142:	f7ff be69 	b.w	8001e18 <HAL_DMA_IRQHandler>
 8002146:	bf00      	nop
 8002148:	20003db8 	.word	0x20003db8

0800214c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800214c:	4801      	ldr	r0, [pc, #4]	; (8002154 <DMA1_Stream6_IRQHandler+0x8>)
 800214e:	f7ff be63 	b.w	8001e18 <HAL_DMA_IRQHandler>
 8002152:	bf00      	nop
 8002154:	200040d8 	.word	0x200040d8

08002158 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002158:	4801      	ldr	r0, [pc, #4]	; (8002160 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800215a:	f7ff b8e2 	b.w	8001322 <HAL_TIM_IRQHandler>
 800215e:	bf00      	nop
 8002160:	20003d78 	.word	0x20003d78

08002164 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002164:	4801      	ldr	r0, [pc, #4]	; (800216c <DMA2_Stream1_IRQHandler+0x8>)
 8002166:	f7ff be57 	b.w	8001e18 <HAL_DMA_IRQHandler>
 800216a:	bf00      	nop
 800216c:	20003e1c 	.word	0x20003e1c

08002170 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002170:	4801      	ldr	r0, [pc, #4]	; (8002178 <DMA2_Stream2_IRQHandler+0x8>)
 8002172:	f7ff be51 	b.w	8001e18 <HAL_DMA_IRQHandler>
 8002176:	bf00      	nop
 8002178:	20004078 	.word	0x20004078

0800217c <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800217c:	4801      	ldr	r0, [pc, #4]	; (8002184 <DMA2_Stream6_IRQHandler+0x8>)
 800217e:	f7ff be4b 	b.w	8001e18 <HAL_DMA_IRQHandler>
 8002182:	bf00      	nop
 8002184:	20004018 	.word	0x20004018

08002188 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002188:	4801      	ldr	r0, [pc, #4]	; (8002190 <DMA2_Stream7_IRQHandler+0x8>)
 800218a:	f7ff be45 	b.w	8001e18 <HAL_DMA_IRQHandler>
 800218e:	bf00      	nop
 8002190:	20003fb8 	.word	0x20003fb8

08002194 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8002196:	4601      	mov	r1, r0
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002198:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800219a:	2200      	movs	r2, #0
 800219c:	2019      	movs	r0, #25
 800219e:	f7ff ff0b 	bl	8001fb8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80021a2:	2019      	movs	r0, #25
 80021a4:	f7ff ff3c 	bl	8002020 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80021a8:	2500      	movs	r5, #0
 80021aa:	4b14      	ldr	r3, [pc, #80]	; (80021fc <HAL_InitTick+0x68>)
 80021ac:	9502      	str	r5, [sp, #8]
 80021ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80021b0:	4c13      	ldr	r4, [pc, #76]	; (8002200 <HAL_InitTick+0x6c>)
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80021b2:	f042 0201 	orr.w	r2, r2, #1
 80021b6:	645a      	str	r2, [r3, #68]	; 0x44
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	9302      	str	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021c0:	a901      	add	r1, sp, #4
 80021c2:	a803      	add	r0, sp, #12
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80021c4:	9b02      	ldr	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021c6:	f7ff fc5d 	bl	8001a84 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80021ca:	f7ff fc43 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80021ce:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_InitTick+0x70>)
 80021d0:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80021d2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80021d6:	60e3      	str	r3, [r4, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_InitTick+0x74>)
 80021da:	fbb0 f0f3 	udiv	r0, r0, r3
 80021de:	3801      	subs	r0, #1
 80021e0:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80021e2:	4620      	mov	r0, r4
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 80021e4:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e6:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80021e8:	f7ff f9a2 	bl	8001530 <HAL_TIM_Base_Init>
 80021ec:	b918      	cbnz	r0, 80021f6 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80021ee:	4620      	mov	r0, r4
 80021f0:	f7ff f888 	bl	8001304 <HAL_TIM_Base_Start_IT>
 80021f4:	e000      	b.n	80021f8 <HAL_InitTick+0x64>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80021f6:	2001      	movs	r0, #1
}
 80021f8:	b009      	add	sp, #36	; 0x24
 80021fa:	bd30      	pop	{r4, r5, pc}
 80021fc:	40023800 	.word	0x40023800
 8002200:	20003d78 	.word	0x20003d78
 8002204:	40010000 	.word	0x40010000
 8002208:	000f4240 	.word	0x000f4240

0800220c <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800220c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800220e:	2003      	movs	r0, #3
 8002210:	f7ff fec0 	bl	8001f94 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	4611      	mov	r1, r2
 8002218:	f06f 000b 	mvn.w	r0, #11
 800221c:	f7ff fecc 	bl	8001fb8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002220:	2200      	movs	r2, #0
 8002222:	4611      	mov	r1, r2
 8002224:	f06f 000a 	mvn.w	r0, #10
 8002228:	f7ff fec6 	bl	8001fb8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	4611      	mov	r1, r2
 8002230:	f06f 0009 	mvn.w	r0, #9
 8002234:	f7ff fec0 	bl	8001fb8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	4611      	mov	r1, r2
 800223c:	f06f 0004 	mvn.w	r0, #4
 8002240:	f7ff feba 	bl	8001fb8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002244:	2200      	movs	r2, #0
 8002246:	4611      	mov	r1, r2
 8002248:	f06f 0003 	mvn.w	r0, #3
 800224c:	f7ff feb4 	bl	8001fb8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002250:	2200      	movs	r2, #0
 8002252:	210f      	movs	r1, #15
 8002254:	f06f 0001 	mvn.w	r0, #1
 8002258:	f7ff feae 	bl	8001fb8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800225c:	2200      	movs	r2, #0
 800225e:	210f      	movs	r1, #15
 8002260:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002264:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002268:	f7ff bea6 	b.w	8001fb8 <HAL_NVIC_SetPriority>

0800226c <HAL_UART_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800226c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800226e:	6803      	ldr	r3, [r0, #0]
 8002270:	4a98      	ldr	r2, [pc, #608]	; (80024d4 <HAL_UART_MspInit+0x268>)
 8002272:	4293      	cmp	r3, r2

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002274:	b08a      	sub	sp, #40	; 0x28
 8002276:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002278:	d14a      	bne.n	8002310 <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800227a:	2600      	movs	r6, #0
 800227c:	4b96      	ldr	r3, [pc, #600]	; (80024d8 <HAL_UART_MspInit+0x26c>)
 800227e:	9601      	str	r6, [sp, #4]
 8002280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002282:	4896      	ldr	r0, [pc, #600]	; (80024dc <HAL_UART_MspInit+0x270>)

    /* Peripheral DMA init*/
  
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002284:	4d96      	ldr	r5, [pc, #600]	; (80024e0 <HAL_UART_MspInit+0x274>)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002286:	f042 0210 	orr.w	r2, r2, #16
 800228a:	645a      	str	r2, [r3, #68]	; 0x44
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 8002296:	23c0      	movs	r3, #192	; 0xc0
 8002298:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800229e:	2301      	movs	r3, #1
 80022a0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a2:	2303      	movs	r3, #3
 80022a4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a6:	a905      	add	r1, sp, #20
    */
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022a8:	2307      	movs	r3, #7
 80022aa:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ac:	f7ff fc08 	bl	8001ac0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart1_rx.Instance = DMA2_Stream2;
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80022b0:	498c      	ldr	r1, [pc, #560]	; (80024e4 <HAL_UART_MspInit+0x278>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022b2:	60ae      	str	r6, [r5, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_usart1_rx.Instance = DMA2_Stream2;
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80022b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80022b8:	e885 000a 	stmia.w	r5, {r1, r3}
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022c0:	612b      	str	r3, [r5, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80022c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022c6:	61eb      	str	r3, [r5, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022c8:	4628      	mov	r0, r5
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80022ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    /* Peripheral DMA init*/
  
    hdma_usart1_rx.Instance = DMA2_Stream2;
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ce:	60ee      	str	r6, [r5, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022d0:	616e      	str	r6, [r5, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022d2:	61ae      	str	r6, [r5, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80022d4:	622b      	str	r3, [r5, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022d6:	626e      	str	r6, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022d8:	f7ff fce8 	bl	8001cac <HAL_DMA_Init>
 80022dc:	b108      	cbz	r0, 80022e2 <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 80022de:	f000 fb71 	bl	80029c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80022e2:	6365      	str	r5, [r4, #52]	; 0x34

    hdma_usart1_tx.Instance = DMA2_Stream7;
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022e4:	4a80      	ldr	r2, [pc, #512]	; (80024e8 <HAL_UART_MspInit+0x27c>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80022e6:	63ac      	str	r4, [r5, #56]	; 0x38

    hdma_usart1_tx.Instance = DMA2_Stream7;
 80022e8:	4d80      	ldr	r5, [pc, #512]	; (80024ec <HAL_UART_MspInit+0x280>)
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80022ee:	f04f 0c40 	mov.w	ip, #64	; 0x40
 80022f2:	e885 100c 	stmia.w	r5, {r2, r3, ip}
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    hdma_usart1_tx.Instance = DMA2_Stream7;
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022fa:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022fc:	612a      	str	r2, [r5, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80022fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002302:	61ea      	str	r2, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    hdma_usart1_tx.Instance = DMA2_Stream7;
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002304:	60eb      	str	r3, [r5, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002306:	616b      	str	r3, [r5, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002308:	61ab      	str	r3, [r5, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800230a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800230e:	e089      	b.n	8002424 <HAL_UART_MspInit+0x1b8>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8002310:	4a77      	ldr	r2, [pc, #476]	; (80024f0 <HAL_UART_MspInit+0x284>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d138      	bne.n	8002388 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002316:	2600      	movs	r6, #0
 8002318:	4b6f      	ldr	r3, [pc, #444]	; (80024d8 <HAL_UART_MspInit+0x26c>)
 800231a:	9602      	str	r6, [sp, #8]
 800231c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = Motor1_TX_Pin|Motor1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231e:	4875      	ldr	r0, [pc, #468]	; (80024f4 <HAL_UART_MspInit+0x288>)

    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002320:	4d75      	ldr	r5, [pc, #468]	; (80024f8 <HAL_UART_MspInit+0x28c>)
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002322:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002326:	641a      	str	r2, [r3, #64]	; 0x40
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	9302      	str	r3, [sp, #8]
 8002330:	9b02      	ldr	r3, [sp, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = Motor1_TX_Pin|Motor1_RX_Pin;
 8002332:	230c      	movs	r3, #12
 8002334:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800233a:	2301      	movs	r3, #1
 800233c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233e:	2303      	movs	r3, #3
 8002340:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002342:	a905      	add	r1, sp, #20
    */
    GPIO_InitStruct.Pin = Motor1_TX_Pin|Motor1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002344:	2307      	movs	r3, #7
 8002346:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002348:	f7ff fbba 	bl	8001ac0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800234c:	496b      	ldr	r1, [pc, #428]	; (80024fc <HAL_UART_MspInit+0x290>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800234e:	60ae      	str	r6, [r5, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002350:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002354:	e885 000a 	stmia.w	r5, {r1, r3}
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800235c:	612b      	str	r3, [r5, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800235e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002362:	61eb      	str	r3, [r5, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002364:	4628      	mov	r0, r5
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800236a:	60ee      	str	r6, [r5, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800236c:	616e      	str	r6, [r5, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800236e:	61ae      	str	r6, [r5, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002370:	622b      	str	r3, [r5, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002372:	626e      	str	r6, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002374:	f7ff fc9a 	bl	8001cac <HAL_DMA_Init>
 8002378:	b108      	cbz	r0, 800237e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800237a:	f000 fb23 	bl	80029c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800237e:	6365      	str	r5, [r4, #52]	; 0x34

    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002380:	4b5f      	ldr	r3, [pc, #380]	; (8002500 <HAL_UART_MspInit+0x294>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002382:	63ac      	str	r4, [r5, #56]	; 0x38

    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002384:	4d5f      	ldr	r5, [pc, #380]	; (8002504 <HAL_UART_MspInit+0x298>)
 8002386:	e03b      	b.n	8002400 <HAL_UART_MspInit+0x194>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8002388:	4a5f      	ldr	r2, [pc, #380]	; (8002508 <HAL_UART_MspInit+0x29c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d14c      	bne.n	8002428 <HAL_UART_MspInit+0x1bc>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800238e:	2600      	movs	r6, #0
 8002390:	4b51      	ldr	r3, [pc, #324]	; (80024d8 <HAL_UART_MspInit+0x26c>)
 8002392:	9603      	str	r6, [sp, #12]
 8002394:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = Motor2_TX_Pin|Motor2_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002396:	4851      	ldr	r0, [pc, #324]	; (80024dc <HAL_UART_MspInit+0x270>)

    /* Peripheral DMA init*/
  
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002398:	4d5c      	ldr	r5, [pc, #368]	; (800250c <HAL_UART_MspInit+0x2a0>)
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800239a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800239e:	641a      	str	r2, [r3, #64]	; 0x40
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a6:	9303      	str	r3, [sp, #12]
 80023a8:	9b03      	ldr	r3, [sp, #12]
  
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = Motor2_TX_Pin|Motor2_RX_Pin;
 80023aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023ae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023b4:	2301      	movs	r3, #1
 80023b6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b8:	2303      	movs	r3, #3
 80023ba:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023bc:	a905      	add	r1, sp, #20
    */
    GPIO_InitStruct.Pin = Motor2_TX_Pin|Motor2_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023be:	2307      	movs	r3, #7
 80023c0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c2:	f7ff fb7d 	bl	8001ac0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart3_rx.Instance = DMA1_Stream1;
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80023c6:	4a52      	ldr	r2, [pc, #328]	; (8002510 <HAL_UART_MspInit+0x2a4>)
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023c8:	60ae      	str	r6, [r5, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_usart3_rx.Instance = DMA1_Stream1;
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80023ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80023ce:	e885 000c 	stmia.w	r5, {r2, r3}
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023d6:	612b      	str	r3, [r5, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80023d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023dc:	61eb      	str	r3, [r5, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80023de:	4628      	mov	r0, r5
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80023e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    /* Peripheral DMA init*/
  
    hdma_usart3_rx.Instance = DMA1_Stream1;
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023e4:	60ee      	str	r6, [r5, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023e6:	616e      	str	r6, [r5, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023e8:	61ae      	str	r6, [r5, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80023ea:	622b      	str	r3, [r5, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ec:	626e      	str	r6, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80023ee:	f7ff fc5d 	bl	8001cac <HAL_DMA_Init>
 80023f2:	b108      	cbz	r0, 80023f8 <HAL_UART_MspInit+0x18c>
    {
      Error_Handler();
 80023f4:	f000 fae6 	bl	80029c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80023f8:	6365      	str	r5, [r4, #52]	; 0x34

    hdma_usart3_tx.Instance = DMA1_Stream3;
 80023fa:	4b46      	ldr	r3, [pc, #280]	; (8002514 <HAL_UART_MspInit+0x2a8>)
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80023fc:	63ac      	str	r4, [r5, #56]	; 0x38

    hdma_usart3_tx.Instance = DMA1_Stream3;
 80023fe:	4d46      	ldr	r5, [pc, #280]	; (8002518 <HAL_UART_MspInit+0x2ac>)
 8002400:	602b      	str	r3, [r5, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002402:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002406:	f44f 6280 	mov.w	r2, #1024	; 0x400
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);

    hdma_usart3_tx.Instance = DMA1_Stream3;
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800240a:	606b      	str	r3, [r5, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800240c:	2340      	movs	r3, #64	; 0x40
 800240e:	60ab      	str	r3, [r5, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002410:	612a      	str	r2, [r5, #16]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);

    hdma_usart3_tx.Instance = DMA1_Stream3;
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002412:	2300      	movs	r3, #0
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 8002414:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002418:	61ea      	str	r2, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);

    hdma_usart3_tx.Instance = DMA1_Stream3;
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800241a:	60eb      	str	r3, [r5, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800241c:	616b      	str	r3, [r5, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800241e:	61ab      	str	r3, [r5, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002420:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002424:	622a      	str	r2, [r5, #32]
 8002426:	e049      	b.n	80024bc <HAL_UART_MspInit+0x250>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8002428:	4a3c      	ldr	r2, [pc, #240]	; (800251c <HAL_UART_MspInit+0x2b0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d14f      	bne.n	80024ce <HAL_UART_MspInit+0x262>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800242e:	2600      	movs	r6, #0
 8002430:	4b29      	ldr	r3, [pc, #164]	; (80024d8 <HAL_UART_MspInit+0x26c>)
 8002432:	9604      	str	r6, [sp, #16]
 8002434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = iNemo_TX_Pin|iNemo_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002436:	483a      	ldr	r0, [pc, #232]	; (8002520 <HAL_UART_MspInit+0x2b4>)

    /* Peripheral DMA init*/
  
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002438:	4d3a      	ldr	r5, [pc, #232]	; (8002524 <HAL_UART_MspInit+0x2b8>)
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800243a:	f042 0220 	orr.w	r2, r2, #32
 800243e:	645a      	str	r2, [r3, #68]	; 0x44
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	9304      	str	r3, [sp, #16]
 8002448:	9b04      	ldr	r3, [sp, #16]
  
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = iNemo_TX_Pin|iNemo_RX_Pin;
 800244a:	23c0      	movs	r3, #192	; 0xc0
 800244c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002452:	2301      	movs	r3, #1
 8002454:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002456:	2303      	movs	r3, #3
 8002458:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800245a:	a905      	add	r1, sp, #20
    */
    GPIO_InitStruct.Pin = iNemo_TX_Pin|iNemo_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800245c:	2308      	movs	r3, #8
 800245e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002460:	f7ff fb2e 	bl	8001ac0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart6_rx.Instance = DMA2_Stream1;
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002464:	4b30      	ldr	r3, [pc, #192]	; (8002528 <HAL_UART_MspInit+0x2bc>)
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002466:	60ae      	str	r6, [r5, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_usart6_rx.Instance = DMA2_Stream1;
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002468:	f04f 6c20 	mov.w	ip, #167772160	; 0xa000000
 800246c:	e885 1008 	stmia.w	r5, {r3, ip}
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002474:	612b      	str	r3, [r5, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002476:	4628      	mov	r0, r5
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002478:	f44f 7380 	mov.w	r3, #256	; 0x100
    /* Peripheral DMA init*/
  
    hdma_usart6_rx.Instance = DMA2_Stream1;
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800247c:	60ee      	str	r6, [r5, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800247e:	616e      	str	r6, [r5, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002480:	61ae      	str	r6, [r5, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002482:	61eb      	str	r3, [r5, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002484:	622e      	str	r6, [r5, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002486:	626e      	str	r6, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002488:	f7ff fc10 	bl	8001cac <HAL_DMA_Init>
 800248c:	b108      	cbz	r0, 8002492 <HAL_UART_MspInit+0x226>
    {
      Error_Handler();
 800248e:	f000 fa99 	bl	80029c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002492:	6365      	str	r5, [r4, #52]	; 0x34

    hdma_usart6_tx.Instance = DMA2_Stream6;
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002494:	4b25      	ldr	r3, [pc, #148]	; (800252c <HAL_UART_MspInit+0x2c0>)
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002496:	63ac      	str	r4, [r5, #56]	; 0x38

    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002498:	4d25      	ldr	r5, [pc, #148]	; (8002530 <HAL_UART_MspInit+0x2c4>)
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800249a:	f44f 6280 	mov.w	r2, #1024	; 0x400

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);

    hdma_usart6_tx.Instance = DMA2_Stream6;
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800249e:	f04f 6620 	mov.w	r6, #167772160	; 0xa000000
 80024a2:	f04f 0e40 	mov.w	lr, #64	; 0x40
 80024a6:	e885 4048 	stmia.w	r5, {r3, r6, lr}
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024aa:	612a      	str	r2, [r5, #16]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);

    hdma_usart6_tx.Instance = DMA2_Stream6;
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ac:	2300      	movs	r3, #0
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 80024ae:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);

    hdma_usart6_tx.Instance = DMA2_Stream6;
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024b2:	60eb      	str	r3, [r5, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024b4:	616b      	str	r3, [r5, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024b6:	61ab      	str	r3, [r5, #24]
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 80024b8:	61ea      	str	r2, [r5, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024ba:	622b      	str	r3, [r5, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024bc:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80024be:	4628      	mov	r0, r5
 80024c0:	f7ff fbf4 	bl	8001cac <HAL_DMA_Init>
 80024c4:	b108      	cbz	r0, 80024ca <HAL_UART_MspInit+0x25e>
    {
      Error_Handler();
 80024c6:	f000 fa7d 	bl	80029c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80024ca:	6325      	str	r5, [r4, #48]	; 0x30
 80024cc:	63ac      	str	r4, [r5, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80024ce:	b00a      	add	sp, #40	; 0x28
 80024d0:	bd70      	pop	{r4, r5, r6, pc}
 80024d2:	bf00      	nop
 80024d4:	40011000 	.word	0x40011000
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020400 	.word	0x40020400
 80024e0:	20004078 	.word	0x20004078
 80024e4:	40026440 	.word	0x40026440
 80024e8:	400264b8 	.word	0x400264b8
 80024ec:	20003fb8 	.word	0x20003fb8
 80024f0:	40004400 	.word	0x40004400
 80024f4:	40020000 	.word	0x40020000
 80024f8:	20003db8 	.word	0x20003db8
 80024fc:	40026088 	.word	0x40026088
 8002500:	400260a0 	.word	0x400260a0
 8002504:	200040d8 	.word	0x200040d8
 8002508:	40004800 	.word	0x40004800
 800250c:	20003e94 	.word	0x20003e94
 8002510:	40026028 	.word	0x40026028
 8002514:	40026058 	.word	0x40026058
 8002518:	20003f50 	.word	0x20003f50
 800251c:	40011400 	.word	0x40011400
 8002520:	40020800 	.word	0x40020800
 8002524:	20003e1c 	.word	0x20003e1c
 8002528:	40026428 	.word	0x40026428
 800252c:	400264a0 	.word	0x400264a0
 8002530:	20004018 	.word	0x20004018

08002534 <StartCombineiNemo>:
  /* USER CODE END StartRXMotor2 */
}

/* StartCombineiNemo function */
void StartCombineiNemo(void const * argument)
{
 8002534:	e7fe      	b.n	8002534 <StartCombineiNemo>

08002536 <StartCombineM1>:
  /* USER CODE END StartCombineiNemo */
}

/* StartCombineM1 function */
void StartCombineM1(void const * argument)
{
 8002536:	e7fe      	b.n	8002536 <StartCombineM1>

08002538 <StartCombineM2>:
  /* USER CODE END StartCombineM1 */
}

/* StartCombineM2 function */
void StartCombineM2(void const * argument)
{
 8002538:	e7fe      	b.n	8002538 <StartCombineM2>

0800253a <StartDefaultTask>:
}
/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 800253a:	b508      	push	{r3, lr}
        // osDelay(100);
        // HAL_UART_Transmit_DMA(&huart1,(uint8_t *)test, strlen(test));
        for(;; )
        {

                osDelay(500); //TODO Remove
 800253c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002540:	f7fe fcef 	bl	8000f22 <osDelay>
 8002544:	e7fa      	b.n	800253c <StartDefaultTask+0x2>
	...

08002548 <StartRXMotor2>:
  /* USER CODE END StartRXMotor1 */
}

/* StartRXMotor2 function */
void StartRXMotor2(void const * argument)
{
 8002548:	b508      	push	{r3, lr}
                   mptr->velocity[0] = 7.7;
                   mptr->position[0] = 7.7;                             //TODO Put code here: mptr->voltage = 223.72;
                   osMessagePut(RXBoxM2Handle, (uint32_t)mptr, osWaitForever); // Send Message
                   osThreadYield(); // Cooperative multitasking
                   // We are done here, exit this thread*/
                osDelay(Ts);
 800254a:	4c02      	ldr	r4, [pc, #8]	; (8002554 <StartRXMotor2+0xc>)
 800254c:	7820      	ldrb	r0, [r4, #0]
 800254e:	f7fe fce8 	bl	8000f22 <osDelay>
 8002552:	e7fb      	b.n	800254c <StartRXMotor2+0x4>
 8002554:	2000000d 	.word	0x2000000d

08002558 <StartRXMotor1>:
 8002558:	b508      	push	{r3, lr}
 800255a:	f7ff fff5 	bl	8002548 <StartRXMotor2>

0800255e <StartTXMotor2>:
 800255e:	b508      	push	{r3, lr}
 8002560:	f7ff fff2 	bl	8002548 <StartRXMotor2>

08002564 <StartTXMotor1>:
 8002564:	b508      	push	{r3, lr}
 8002566:	f7ff ffef 	bl	8002548 <StartRXMotor2>

0800256a <StartRXiNemo>:
 800256a:	b508      	push	{r3, lr}
 800256c:	f7ff ffec 	bl	8002548 <StartRXMotor2>

08002570 <StartRXPC>:
 8002570:	b508      	push	{r3, lr}
 8002572:	f7ff ffe9 	bl	8002548 <StartRXMotor2>

08002576 <StartTXPC>:
 8002576:	b508      	push	{r3, lr}
 8002578:	f7ff ffe6 	bl	8002548 <StartRXMotor2>

0800257c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800257c:	b530      	push	{r4, r5, lr}
 800257e:	b095      	sub	sp, #84	; 0x54

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002580:	2300      	movs	r3, #0
 8002582:	4a21      	ldr	r2, [pc, #132]	; (8002608 <SystemClock_Config+0x8c>)
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002588:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800258c:	6411      	str	r1, [r2, #64]	; 0x40
 800258e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002590:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002594:	9201      	str	r2, [sp, #4]
 8002596:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002598:	4a1c      	ldr	r2, [pc, #112]	; (800260c <SystemClock_Config+0x90>)
 800259a:	9302      	str	r3, [sp, #8]
 800259c:	6811      	ldr	r1, [r2, #0]
 800259e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80025a2:	6011      	str	r1, [r2, #0]
 80025a4:	6812      	ldr	r2, [r2, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80025a6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025a8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80025ac:	9202      	str	r2, [sp, #8]
 80025ae:	9a02      	ldr	r2, [sp, #8]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025b0:	2202      	movs	r2, #2
 80025b2:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025b4:	2201      	movs	r2, #1
 80025b6:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025b8:	a808      	add	r0, sp, #32

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80025ba:	2210      	movs	r2, #16
 80025bc:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025be:	f7fe ffd1 	bl	8001564 <HAL_RCC_OscConfig>
 80025c2:	4601      	mov	r1, r0
 80025c4:	b100      	cbz	r0, 80025c8 <SystemClock_Config+0x4c>
 80025c6:	e7fe      	b.n	80025c6 <SystemClock_Config+0x4a>
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80025c8:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025ca:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025cc:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025ce:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025d0:	240f      	movs	r4, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80025d2:	a803      	add	r0, sp, #12
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025d4:	9403      	str	r4, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80025d6:	f7ff f96b 	bl	80018b0 <HAL_RCC_ClockConfig>
 80025da:	4605      	mov	r5, r0
 80025dc:	b100      	cbz	r0, 80025e0 <SystemClock_Config+0x64>
 80025de:	e7fe      	b.n	80025de <SystemClock_Config+0x62>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80025e0:	f7ff fa1a 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 80025e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80025ec:	f7ff fd24 	bl	8002038 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80025f0:	2004      	movs	r0, #4
 80025f2:	f7ff fd37 	bl	8002064 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80025f6:	462a      	mov	r2, r5
 80025f8:	4621      	mov	r1, r4
 80025fa:	f04f 30ff 	mov.w	r0, #4294967295
 80025fe:	f7ff fcdb 	bl	8001fb8 <HAL_NVIC_SetPriority>
}
 8002602:	b015      	add	sp, #84	; 0x54
 8002604:	bd30      	pop	{r4, r5, pc}
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800
 800260c:	40007000 	.word	0x40007000

08002610 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8002610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002612:	b0c9      	sub	sp, #292	; 0x124
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002614:	2400      	movs	r4, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002616:	f7ff fd31 	bl	800207c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800261a:	f7ff ffaf 	bl	800257c <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800261e:	4b5a      	ldr	r3, [pc, #360]	; (8002788 <main+0x178>)
 8002620:	9402      	str	r4, [sp, #8]
 8002622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002624:	f042 0201 	orr.w	r2, r2, #1
 8002628:	631a      	str	r2, [r3, #48]	; 0x30
 800262a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800262c:	f002 0201 	and.w	r2, r2, #1
 8002630:	9202      	str	r2, [sp, #8]
 8002632:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002634:	9403      	str	r4, [sp, #12]
 8002636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002638:	f042 0202 	orr.w	r2, r2, #2
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
 800263e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002640:	f002 0202 	and.w	r2, r2, #2
 8002644:	9203      	str	r2, [sp, #12]
 8002646:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002648:	9404      	str	r4, [sp, #16]
 800264a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800264c:	f042 0204 	orr.w	r2, r2, #4
 8002650:	631a      	str	r2, [r3, #48]	; 0x30
 8002652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002654:	f002 0204 	and.w	r2, r2, #4
 8002658:	9204      	str	r2, [sp, #16]
 800265a:	9a04      	ldr	r2, [sp, #16]
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800265c:	9400      	str	r4, [sp, #0]
 800265e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002660:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002664:	631a      	str	r2, [r3, #48]	; 0x30
 8002666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002668:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800266c:	9200      	str	r2, [sp, #0]
 800266e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002670:	9401      	str	r4, [sp, #4]
 8002672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002674:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002678:	631a      	str	r2, [r3, #48]	; 0x30
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002680:	4622      	mov	r2, r4
 8002682:	2105      	movs	r1, #5
  */
static void MX_DMA_Init(void)
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002684:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002686:	200c      	movs	r0, #12
  */
static void MX_DMA_Init(void)
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002688:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800268a:	f7ff fc95 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800268e:	200c      	movs	r0, #12
 8002690:	f7ff fcc6 	bl	8002020 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002694:	4622      	mov	r2, r4
 8002696:	2105      	movs	r1, #5
 8002698:	200e      	movs	r0, #14
 800269a:	f7ff fc8d 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800269e:	200e      	movs	r0, #14
 80026a0:	f7ff fcbe 	bl	8002020 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80026a4:	4622      	mov	r2, r4
 80026a6:	2105      	movs	r1, #5
 80026a8:	2010      	movs	r0, #16
 80026aa:	f7ff fc85 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80026ae:	2010      	movs	r0, #16
 80026b0:	f7ff fcb6 	bl	8002020 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80026b4:	4622      	mov	r2, r4
 80026b6:	2105      	movs	r1, #5
 80026b8:	2011      	movs	r0, #17
 80026ba:	f7ff fc7d 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80026be:	2011      	movs	r0, #17
 80026c0:	f7ff fcae 	bl	8002020 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80026c4:	4622      	mov	r2, r4
 80026c6:	2105      	movs	r1, #5
 80026c8:	2039      	movs	r0, #57	; 0x39
 80026ca:	f7ff fc75 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80026ce:	2039      	movs	r0, #57	; 0x39
 80026d0:	f7ff fca6 	bl	8002020 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80026d4:	4622      	mov	r2, r4
 80026d6:	2105      	movs	r1, #5
 80026d8:	203a      	movs	r0, #58	; 0x3a
 80026da:	f7ff fc6d 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80026de:	203a      	movs	r0, #58	; 0x3a
 80026e0:	f7ff fc9e 	bl	8002020 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80026e4:	4622      	mov	r2, r4
 80026e6:	2105      	movs	r1, #5
 80026e8:	2045      	movs	r0, #69	; 0x45
 80026ea:	f7ff fc65 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80026ee:	2045      	movs	r0, #69	; 0x45
 80026f0:	f7ff fc96 	bl	8002020 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80026f4:	4622      	mov	r2, r4
 80026f6:	2105      	movs	r1, #5
 80026f8:	2046      	movs	r0, #70	; 0x46
 80026fa:	f7ff fc5d 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80026fe:	2046      	movs	r0, #70	; 0x46
 8002700:	f7ff fc8e 	bl	8002020 <HAL_NVIC_EnableIRQ>

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8002704:	4821      	ldr	r0, [pc, #132]	; (800278c <main+0x17c>)
  huart2.Init.BaudRate = 115200;
 8002706:	4b22      	ldr	r3, [pc, #136]	; (8002790 <main+0x180>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002708:	6084      	str	r4, [r0, #8]
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 800270a:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800270e:	250c      	movs	r5, #12
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8002710:	e880 0048 	stmia.w	r0, {r3, r6}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002714:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002716:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002718:	6145      	str	r5, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800271a:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800271c:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800271e:	f7fe fd41 	bl	80011a4 <HAL_UART_Init>
 8002722:	b100      	cbz	r0, 8002726 <main+0x116>
 8002724:	e7fe      	b.n	8002724 <main+0x114>

/* USART3 init function */
static void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 8002726:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <main+0x184>)
 8002728:	4a1b      	ldr	r2, [pc, #108]	; (8002798 <main+0x188>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800272a:	6098      	str	r0, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800272c:	60d8      	str	r0, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800272e:	6118      	str	r0, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002730:	6198      	str	r0, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002732:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002734:	4618      	mov	r0, r3
/* USART3 init function */
static void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 8002736:	e883 0044 	stmia.w	r3, {r2, r6}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800273a:	615d      	str	r5, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800273c:	f7fe fd32 	bl	80011a4 <HAL_UART_Init>
 8002740:	b100      	cbz	r0, 8002744 <main+0x134>
 8002742:	e7fe      	b.n	8002742 <main+0x132>

/* USART6 init function */
static void MX_USART6_UART_Init(void)
{

  huart6.Instance = USART6;
 8002744:	4b15      	ldr	r3, [pc, #84]	; (800279c <main+0x18c>)
 8002746:	4a16      	ldr	r2, [pc, #88]	; (80027a0 <main+0x190>)
  huart6.Init.BaudRate = 115200;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002748:	6098      	str	r0, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800274a:	60d8      	str	r0, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800274c:	6118      	str	r0, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274e:	6198      	str	r0, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002750:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002752:	4618      	mov	r0, r3
/* USART6 init function */
static void MX_USART6_UART_Init(void)
{

  huart6.Instance = USART6;
  huart6.Init.BaudRate = 115200;
 8002754:	e883 0044 	stmia.w	r3, {r2, r6}
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002758:	615d      	str	r5, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800275a:	f7fe fd23 	bl	80011a4 <HAL_UART_Init>
 800275e:	b100      	cbz	r0, 8002762 <main+0x152>
 8002760:	e7fe      	b.n	8002760 <main+0x150>

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8002762:	4c10      	ldr	r4, [pc, #64]	; (80027a4 <main+0x194>)
  huart1.Init.BaudRate = 9600;
 8002764:	4a10      	ldr	r2, [pc, #64]	; (80027a8 <main+0x198>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002766:	60a0      	str	r0, [r4, #8]
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 8002768:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
 800276c:	60e0      	str	r0, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800276e:	6120      	str	r0, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002770:	61a0      	str	r0, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002772:	61e0      	str	r0, [r4, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002774:	4620      	mov	r0, r4
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002776:	6165      	str	r5, [r4, #20]
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 8002778:	e884 000c 	stmia.w	r4, {r2, r3}
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800277c:	f7fe fd12 	bl	80011a4 <HAL_UART_Init>
 8002780:	4605      	mov	r5, r0
 8002782:	b198      	cbz	r0, 80027ac <main+0x19c>
 8002784:	e7fe      	b.n	8002784 <main+0x174>
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	20004220 	.word	0x20004220
 8002790:	40004400 	.word	0x40004400
 8002794:	20003ef4 	.word	0x20003ef4
 8002798:	40004800 	.word	0x40004800
 800279c:	200041d4 	.word	0x200041d4
 80027a0:	40011400 	.word	0x40011400
 80027a4:	20004148 	.word	0x20004148
 80027a8:	40011000 	.word	0x40011000

/* USER CODE BEGIN 4 */

static void DMA_Start(void){

        HAL_UART_Transmit_DMA(&huart1, TXBuf, (uint16_t)(sizeof(TXBuf)/sizeof(TXBuf[0])));
 80027ac:	4620      	mov	r0, r4
        /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 80027ae:	4c6d      	ldr	r4, [pc, #436]	; (8002964 <main+0x354>)

/* USER CODE BEGIN 4 */

static void DMA_Start(void){

        HAL_UART_Transmit_DMA(&huart1, TXBuf, (uint16_t)(sizeof(TXBuf)/sizeof(TXBuf[0])));
 80027b0:	496d      	ldr	r1, [pc, #436]	; (8002968 <main+0x358>)
 80027b2:	2205      	movs	r2, #5
 80027b4:	f7fe fd24 	bl	8001200 <HAL_UART_Transmit_DMA>
        /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 80027b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ba:	af11      	add	r7, sp, #68	; 0x44
 80027bc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80027be:	4626      	mov	r6, r4
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80027c0:	4629      	mov	r1, r5
        /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 80027c2:	f856 3b04 	ldr.w	r3, [r6], #4
 80027c6:	603b      	str	r3, [r7, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80027c8:	a811      	add	r0, sp, #68	; 0x44
 80027ca:	f7fe fb8e 	bl	8000eea <osThreadCreate>
 80027ce:	4b67      	ldr	r3, [pc, #412]	; (800296c <main+0x35c>)
 80027d0:	6018      	str	r0, [r3, #0]

  /* definition and creation of TXPC */
  osThreadDef(TXPC, StartTXPC, osPriorityRealtime, 0, 128);
 80027d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80027d4:	af16      	add	r7, sp, #88	; 0x58
 80027d6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80027d8:	6833      	ldr	r3, [r6, #0]
 80027da:	603b      	str	r3, [r7, #0]
  TXPCHandle = osThreadCreate(osThread(TXPC), NULL);
 80027dc:	4629      	mov	r1, r5
 80027de:	a816      	add	r0, sp, #88	; 0x58
 80027e0:	f7fe fb83 	bl	8000eea <osThreadCreate>
 80027e4:	4b62      	ldr	r3, [pc, #392]	; (8002970 <main+0x360>)

  /* definition and creation of RXPC */
  osThreadDef(RXPC, StartRXPC, osPriorityRealtime, 0, 128);
 80027e6:	f104 0718 	add.w	r7, r4, #24
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* definition and creation of TXPC */
  osThreadDef(TXPC, StartTXPC, osPriorityRealtime, 0, 128);
  TXPCHandle = osThreadCreate(osThread(TXPC), NULL);
 80027ea:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXPC */
  osThreadDef(RXPC, StartRXPC, osPriorityRealtime, 0, 128);
 80027ec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80027ee:	ae1b      	add	r6, sp, #108	; 0x6c
 80027f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6033      	str	r3, [r6, #0]
  RXPCHandle = osThreadCreate(osThread(RXPC), NULL);
 80027f6:	4629      	mov	r1, r5
 80027f8:	a81b      	add	r0, sp, #108	; 0x6c
 80027fa:	f7fe fb76 	bl	8000eea <osThreadCreate>
 80027fe:	4b5d      	ldr	r3, [pc, #372]	; (8002974 <main+0x364>)

  /* definition and creation of RXiNemo */
  osThreadDef(RXiNemo, StartRXiNemo, osPriorityNormal, 0, 128);
 8002800:	f104 072c 	add.w	r7, r4, #44	; 0x2c
  osThreadDef(TXPC, StartTXPC, osPriorityRealtime, 0, 128);
  TXPCHandle = osThreadCreate(osThread(TXPC), NULL);

  /* definition and creation of RXPC */
  osThreadDef(RXPC, StartRXPC, osPriorityRealtime, 0, 128);
  RXPCHandle = osThreadCreate(osThread(RXPC), NULL);
 8002804:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXiNemo */
  osThreadDef(RXiNemo, StartRXiNemo, osPriorityNormal, 0, 128);
 8002806:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002808:	ae20      	add	r6, sp, #128	; 0x80
 800280a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	6033      	str	r3, [r6, #0]
  RXiNemoHandle = osThreadCreate(osThread(RXiNemo), NULL);
 8002810:	4629      	mov	r1, r5
 8002812:	a820      	add	r0, sp, #128	; 0x80
 8002814:	f7fe fb69 	bl	8000eea <osThreadCreate>
 8002818:	4b57      	ldr	r3, [pc, #348]	; (8002978 <main+0x368>)

  /* definition and creation of TXMotor1 */
  osThreadDef(TXMotor1, StartTXMotor1, osPriorityHigh, 0, 128);
 800281a:	f104 0740 	add.w	r7, r4, #64	; 0x40
  osThreadDef(RXPC, StartRXPC, osPriorityRealtime, 0, 128);
  RXPCHandle = osThreadCreate(osThread(RXPC), NULL);

  /* definition and creation of RXiNemo */
  osThreadDef(RXiNemo, StartRXiNemo, osPriorityNormal, 0, 128);
  RXiNemoHandle = osThreadCreate(osThread(RXiNemo), NULL);
 800281e:	6018      	str	r0, [r3, #0]

  /* definition and creation of TXMotor1 */
  osThreadDef(TXMotor1, StartTXMotor1, osPriorityHigh, 0, 128);
 8002820:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002822:	ae25      	add	r6, sp, #148	; 0x94
 8002824:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6033      	str	r3, [r6, #0]
  TXMotor1Handle = osThreadCreate(osThread(TXMotor1), NULL);
 800282a:	4629      	mov	r1, r5
 800282c:	a825      	add	r0, sp, #148	; 0x94
 800282e:	f7fe fb5c 	bl	8000eea <osThreadCreate>
 8002832:	4b52      	ldr	r3, [pc, #328]	; (800297c <main+0x36c>)

  /* definition and creation of TXMotor2 */
  osThreadDef(TXMotor2, StartTXMotor2, osPriorityHigh, 0, 128);
 8002834:	f104 0754 	add.w	r7, r4, #84	; 0x54
  osThreadDef(RXiNemo, StartRXiNemo, osPriorityNormal, 0, 128);
  RXiNemoHandle = osThreadCreate(osThread(RXiNemo), NULL);

  /* definition and creation of TXMotor1 */
  osThreadDef(TXMotor1, StartTXMotor1, osPriorityHigh, 0, 128);
  TXMotor1Handle = osThreadCreate(osThread(TXMotor1), NULL);
 8002838:	6018      	str	r0, [r3, #0]

  /* definition and creation of TXMotor2 */
  osThreadDef(TXMotor2, StartTXMotor2, osPriorityHigh, 0, 128);
 800283a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800283c:	ae2a      	add	r6, sp, #168	; 0xa8
 800283e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6033      	str	r3, [r6, #0]
  TXMotor2Handle = osThreadCreate(osThread(TXMotor2), NULL);
 8002844:	4629      	mov	r1, r5
 8002846:	a82a      	add	r0, sp, #168	; 0xa8
 8002848:	f7fe fb4f 	bl	8000eea <osThreadCreate>
 800284c:	4b4c      	ldr	r3, [pc, #304]	; (8002980 <main+0x370>)

  /* definition and creation of RXMotor1 */
  osThreadDef(RXMotor1, StartRXMotor1, osPriorityAboveNormal, 0, 128);
 800284e:	f104 0768 	add.w	r7, r4, #104	; 0x68
  osThreadDef(TXMotor1, StartTXMotor1, osPriorityHigh, 0, 128);
  TXMotor1Handle = osThreadCreate(osThread(TXMotor1), NULL);

  /* definition and creation of TXMotor2 */
  osThreadDef(TXMotor2, StartTXMotor2, osPriorityHigh, 0, 128);
  TXMotor2Handle = osThreadCreate(osThread(TXMotor2), NULL);
 8002852:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXMotor1 */
  osThreadDef(RXMotor1, StartRXMotor1, osPriorityAboveNormal, 0, 128);
 8002854:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002856:	ae2f      	add	r6, sp, #188	; 0xbc
 8002858:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6033      	str	r3, [r6, #0]
  RXMotor1Handle = osThreadCreate(osThread(RXMotor1), NULL);
 800285e:	4629      	mov	r1, r5
 8002860:	a82f      	add	r0, sp, #188	; 0xbc
 8002862:	f7fe fb42 	bl	8000eea <osThreadCreate>
 8002866:	4b47      	ldr	r3, [pc, #284]	; (8002984 <main+0x374>)

  /* definition and creation of RXMotor2 */
  osThreadDef(RXMotor2, StartRXMotor2, osPriorityAboveNormal, 0, 128);
 8002868:	f104 077c 	add.w	r7, r4, #124	; 0x7c
  osThreadDef(TXMotor2, StartTXMotor2, osPriorityHigh, 0, 128);
  TXMotor2Handle = osThreadCreate(osThread(TXMotor2), NULL);

  /* definition and creation of RXMotor1 */
  osThreadDef(RXMotor1, StartRXMotor1, osPriorityAboveNormal, 0, 128);
  RXMotor1Handle = osThreadCreate(osThread(RXMotor1), NULL);
 800286c:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXMotor2 */
  osThreadDef(RXMotor2, StartRXMotor2, osPriorityAboveNormal, 0, 128);
 800286e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002870:	ae34      	add	r6, sp, #208	; 0xd0
 8002872:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	6033      	str	r3, [r6, #0]
  RXMotor2Handle = osThreadCreate(osThread(RXMotor2), NULL);
 8002878:	4629      	mov	r1, r5
 800287a:	a834      	add	r0, sp, #208	; 0xd0
 800287c:	f7fe fb35 	bl	8000eea <osThreadCreate>
 8002880:	4b41      	ldr	r3, [pc, #260]	; (8002988 <main+0x378>)

  /* definition and creation of CombineiNemo */
  osThreadDef(CombineiNemo, StartCombineiNemo, osPriorityRealtime, 0, 128);
 8002882:	f104 0790 	add.w	r7, r4, #144	; 0x90
  osThreadDef(RXMotor1, StartRXMotor1, osPriorityAboveNormal, 0, 128);
  RXMotor1Handle = osThreadCreate(osThread(RXMotor1), NULL);

  /* definition and creation of RXMotor2 */
  osThreadDef(RXMotor2, StartRXMotor2, osPriorityAboveNormal, 0, 128);
  RXMotor2Handle = osThreadCreate(osThread(RXMotor2), NULL);
 8002886:	6018      	str	r0, [r3, #0]

  /* definition and creation of CombineiNemo */
  osThreadDef(CombineiNemo, StartCombineiNemo, osPriorityRealtime, 0, 128);
 8002888:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800288a:	ae39      	add	r6, sp, #228	; 0xe4
 800288c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6033      	str	r3, [r6, #0]
  CombineiNemoHandle = osThreadCreate(osThread(CombineiNemo), NULL);
 8002892:	4629      	mov	r1, r5
 8002894:	a839      	add	r0, sp, #228	; 0xe4
 8002896:	f7fe fb28 	bl	8000eea <osThreadCreate>
 800289a:	4b3c      	ldr	r3, [pc, #240]	; (800298c <main+0x37c>)

  /* definition and creation of CombineM1 */
  osThreadDef(CombineM1, StartCombineM1, osPriorityRealtime, 0, 128);
 800289c:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
  osThreadDef(RXMotor2, StartRXMotor2, osPriorityAboveNormal, 0, 128);
  RXMotor2Handle = osThreadCreate(osThread(RXMotor2), NULL);

  /* definition and creation of CombineiNemo */
  osThreadDef(CombineiNemo, StartCombineiNemo, osPriorityRealtime, 0, 128);
  CombineiNemoHandle = osThreadCreate(osThread(CombineiNemo), NULL);
 80028a0:	6018      	str	r0, [r3, #0]

  /* definition and creation of CombineM1 */
  osThreadDef(CombineM1, StartCombineM1, osPriorityRealtime, 0, 128);
 80028a2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80028a4:	ae3e      	add	r6, sp, #248	; 0xf8
 80028a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	6033      	str	r3, [r6, #0]
  CombineM1Handle = osThreadCreate(osThread(CombineM1), NULL);
 80028ac:	4629      	mov	r1, r5
 80028ae:	a83e      	add	r0, sp, #248	; 0xf8
 80028b0:	f7fe fb1b 	bl	8000eea <osThreadCreate>
 80028b4:	4b36      	ldr	r3, [pc, #216]	; (8002990 <main+0x380>)

  /* definition and creation of CombineM2 */
  osThreadDef(CombineM2, StartCombineM2, osPriorityRealtime, 0, 128);
 80028b6:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
  osThreadDef(CombineiNemo, StartCombineiNemo, osPriorityRealtime, 0, 128);
  CombineiNemoHandle = osThreadCreate(osThread(CombineiNemo), NULL);

  /* definition and creation of CombineM1 */
  osThreadDef(CombineM1, StartCombineM1, osPriorityRealtime, 0, 128);
  CombineM1Handle = osThreadCreate(osThread(CombineM1), NULL);
 80028ba:	6018      	str	r0, [r3, #0]

  /* definition and creation of CombineM2 */
  osThreadDef(CombineM2, StartCombineM2, osPriorityRealtime, 0, 128);
 80028bc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80028be:	ae43      	add	r6, sp, #268	; 0x10c
 80028c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6033      	str	r3, [r6, #0]
  CombineM2Handle = osThreadCreate(osThread(CombineM2), NULL);
 80028c6:	4629      	mov	r1, r5
 80028c8:	a843      	add	r0, sp, #268	; 0x10c
 80028ca:	f7fe fb0e 	bl	8000eea <osThreadCreate>
 80028ce:	4b31      	ldr	r3, [pc, #196]	; (8002994 <main+0x384>)
        /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of TXBox */
  osMessageQDef(TXBox, 6, float);
 80028d0:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
  osThreadDef(CombineM1, StartCombineM1, osPriorityRealtime, 0, 128);
  CombineM1Handle = osThreadCreate(osThread(CombineM1), NULL);

  /* definition and creation of CombineM2 */
  osThreadDef(CombineM2, StartCombineM2, osPriorityRealtime, 0, 128);
  CombineM2Handle = osThreadCreate(osThread(CombineM2), NULL);
 80028d4:	6018      	str	r0, [r3, #0]
        /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of TXBox */
  osMessageQDef(TXBox, 6, float);
 80028d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028da:	ab05      	add	r3, sp, #20
 80028dc:	e883 0003 	stmia.w	r3, {r0, r1}
  TXBoxHandle = osMessageCreate(osMessageQ(TXBox), NULL);
 80028e0:	4629      	mov	r1, r5
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe fb25 	bl	8000f32 <osMessageCreate>
 80028e8:	4b2b      	ldr	r3, [pc, #172]	; (8002998 <main+0x388>)

  /* definition and creation of TXBoxM1 */
  osMessageQDef(TXBoxM1, 16, uint16_t);
 80028ea:	34d4      	adds	r4, #212	; 0xd4
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of TXBox */
  osMessageQDef(TXBox, 6, float);
  TXBoxHandle = osMessageCreate(osMessageQ(TXBox), NULL);
 80028ec:	6018      	str	r0, [r3, #0]

  /* definition and creation of TXBoxM1 */
  osMessageQDef(TXBoxM1, 16, uint16_t);
 80028ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028f2:	ab07      	add	r3, sp, #28
 80028f4:	e883 0003 	stmia.w	r3, {r0, r1}
  TXBoxM1Handle = osMessageCreate(osMessageQ(TXBoxM1), NULL);
 80028f8:	4629      	mov	r1, r5
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fb19 	bl	8000f32 <osMessageCreate>
 8002900:	4b26      	ldr	r3, [pc, #152]	; (800299c <main+0x38c>)
 8002902:	6018      	str	r0, [r3, #0]

  /* definition and creation of TXBoxM2 */
  osMessageQDef(TXBoxM2, 16, uint16_t);
 8002904:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002908:	ab09      	add	r3, sp, #36	; 0x24
 800290a:	e883 0003 	stmia.w	r3, {r0, r1}
  TXBoxM2Handle = osMessageCreate(osMessageQ(TXBoxM2), NULL);
 800290e:	4629      	mov	r1, r5
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe fb0e 	bl	8000f32 <osMessageCreate>
 8002916:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <main+0x390>)
 8002918:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXBoxiNemo */
  osMessageQDef(RXBoxiNemo, 16, uint16_t);
 800291a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800291e:	ab0b      	add	r3, sp, #44	; 0x2c
 8002920:	e883 0003 	stmia.w	r3, {r0, r1}
  RXBoxiNemoHandle = osMessageCreate(osMessageQ(RXBoxiNemo), NULL);
 8002924:	4629      	mov	r1, r5
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fb03 	bl	8000f32 <osMessageCreate>
 800292c:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <main+0x394>)
 800292e:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXBoxM1 */
  osMessageQDef(RXBoxM1, 16, uint16_t);
 8002930:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002934:	ab0d      	add	r3, sp, #52	; 0x34
 8002936:	e883 0003 	stmia.w	r3, {r0, r1}
  RXBoxM1Handle = osMessageCreate(osMessageQ(RXBoxM1), NULL);
 800293a:	4629      	mov	r1, r5
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe faf8 	bl	8000f32 <osMessageCreate>
 8002942:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <main+0x398>)
 8002944:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXBoxM2 */
  osMessageQDef(RXBoxM2, 16, uint16_t);
 8002946:	e894 0003 	ldmia.w	r4, {r0, r1}
 800294a:	ab0f      	add	r3, sp, #60	; 0x3c
 800294c:	e883 0003 	stmia.w	r3, {r0, r1}
  RXBoxM2Handle = osMessageCreate(osMessageQ(RXBoxM2), NULL);
 8002950:	4618      	mov	r0, r3
 8002952:	4629      	mov	r1, r5
 8002954:	f7fe faed 	bl	8000f32 <osMessageCreate>
 8002958:	4b14      	ldr	r3, [pc, #80]	; (80029ac <main+0x39c>)
 800295a:	6018      	str	r0, [r3, #0]
        /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */


  /* Start scheduler */
  osKernelStart();
 800295c:	f7fe fac0 	bl	8000ee0 <osKernelStart>
 8002960:	e7fe      	b.n	8002960 <main+0x350>
 8002962:	bf00      	nop
 8002964:	08002a90 	.word	0x08002a90
 8002968:	20000008 	.word	0x20000008
 800296c:	20003db4 	.word	0x20003db4
 8002970:	200041b0 	.word	0x200041b0
 8002974:	20004260 	.word	0x20004260
 8002978:	200041ac 	.word	0x200041ac
 800297c:	20003fb0 	.word	0x20003fb0
 8002980:	20003e7c 	.word	0x20003e7c
 8002984:	200041c0 	.word	0x200041c0
 8002988:	200041b4 	.word	0x200041b4
 800298c:	200041bc 	.word	0x200041bc
 8002990:	20004264 	.word	0x20004264
 8002994:	2000418c 	.word	0x2000418c
 8002998:	20003fb4 	.word	0x20003fb4
 800299c:	200041a4 	.word	0x200041a4
 80029a0:	20003e18 	.word	0x20003e18
 80029a4:	20003f38 	.word	0x20003f38
 80029a8:	20003f34 	.word	0x20003f34
 80029ac:	200041b8 	.word	0x200041b8

080029b0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80029b0:	6802      	ldr	r2, [r0, #0]
 80029b2:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d101      	bne.n	80029bc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80029b8:	f7ff bb7a 	b.w	80020b0 <HAL_IncTick>
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40010000 	.word	0x40010000

080029c4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80029c4:	e7fe      	b.n	80029c4 <Error_Handler>
	...

080029c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029ce:	e003      	b.n	80029d8 <LoopCopyDataInit>

080029d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029d6:	3104      	adds	r1, #4

080029d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029d8:	480b      	ldr	r0, [pc, #44]	; (8002a08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029da:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029e0:	d3f6      	bcc.n	80029d0 <CopyDataInit>
  ldr  r2, =_sbss
 80029e2:	4a0b      	ldr	r2, [pc, #44]	; (8002a10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029e4:	e002      	b.n	80029ec <LoopFillZerobss>

080029e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029e8:	f842 3b04 	str.w	r3, [r2], #4

080029ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029ec:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029f0:	d3f9      	bcc.n	80029e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029f2:	f7ff fb6b 	bl	80020cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029f6:	f000 f811 	bl	8002a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029fa:	f7ff fe09 	bl	8002610 <main>
  bx  lr    
 80029fe:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a00:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8002a04:	08002c0c 	.word	0x08002c0c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a0c:	20000010 	.word	0x20000010
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8002a10:	20000010 	.word	0x20000010
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a14:	20004268 	.word	0x20004268

08002a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a18:	e7fe      	b.n	8002a18 <ADC_IRQHandler>
	...

08002a1c <__libc_init_array>:
 8002a1c:	b570      	push	{r4, r5, r6, lr}
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <__libc_init_array+0x3c>)
 8002a20:	4c0e      	ldr	r4, [pc, #56]	; (8002a5c <__libc_init_array+0x40>)
 8002a22:	1ae4      	subs	r4, r4, r3
 8002a24:	10a4      	asrs	r4, r4, #2
 8002a26:	2500      	movs	r5, #0
 8002a28:	461e      	mov	r6, r3
 8002a2a:	42a5      	cmp	r5, r4
 8002a2c:	d004      	beq.n	8002a38 <__libc_init_array+0x1c>
 8002a2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a32:	4798      	blx	r3
 8002a34:	3501      	adds	r5, #1
 8002a36:	e7f8      	b.n	8002a2a <__libc_init_array+0xe>
 8002a38:	f000 f81e 	bl	8002a78 <_init>
 8002a3c:	4c08      	ldr	r4, [pc, #32]	; (8002a60 <__libc_init_array+0x44>)
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <__libc_init_array+0x48>)
 8002a40:	1ae4      	subs	r4, r4, r3
 8002a42:	10a4      	asrs	r4, r4, #2
 8002a44:	2500      	movs	r5, #0
 8002a46:	461e      	mov	r6, r3
 8002a48:	42a5      	cmp	r5, r4
 8002a4a:	d004      	beq.n	8002a56 <__libc_init_array+0x3a>
 8002a4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a50:	4798      	blx	r3
 8002a52:	3501      	adds	r5, #1
 8002a54:	e7f8      	b.n	8002a48 <__libc_init_array+0x2c>
 8002a56:	bd70      	pop	{r4, r5, r6, pc}
 8002a58:	08002c04 	.word	0x08002c04
 8002a5c:	08002c04 	.word	0x08002c04
 8002a60:	08002c08 	.word	0x08002c08
 8002a64:	08002c04 	.word	0x08002c04

08002a68 <memset>:
 8002a68:	4402      	add	r2, r0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d002      	beq.n	8002a76 <memset+0xe>
 8002a70:	f803 1b01 	strb.w	r1, [r3], #1
 8002a74:	e7fa      	b.n	8002a6c <memset+0x4>
 8002a76:	4770      	bx	lr

08002a78 <_init>:
 8002a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7a:	bf00      	nop
 8002a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a7e:	bc08      	pop	{r3}
 8002a80:	469e      	mov	lr, r3
 8002a82:	4770      	bx	lr

08002a84 <_fini>:
 8002a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a86:	bf00      	nop
 8002a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8a:	bc08      	pop	{r3}
 8002a8c:	469e      	mov	lr, r3
 8002a8e:	4770      	bx	lr
