
Baleka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08007108  08007108  00017108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080073dc  080073dc  000173dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080073e4  080073e4  000173e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080073e8  080073e8  000173e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000055c  20000000  080073ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002055c  2**0
                  CONTENTS
  8 .bss          0000420c  2000055c  2000055c  0002055c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004768  20004768  0002055c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002055c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013112  00000000  00000000  0002058c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002e61  00000000  00000000  0003369e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000993c  00000000  00000000  000364ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da8  00000000  00000000  0003fe40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e0  00000000  00000000  00040be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00006d4b  00000000  00000000  00041cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000521c  00000000  00000000  00048a13  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007e  00000000  00000000  0004dc2f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002e64  00000000  00000000  0004dcb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000055c 	.word	0x2000055c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070ec 	.word	0x080070ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000560 	.word	0x20000560
 80001cc:	080070ec 	.word	0x080070ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97e 	b.w	8000eb4 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460e      	mov	r6, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9d08      	ldr	r5, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d150      	bne.n	8000c82 <__udivmoddi4+0xb2>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96c      	bls.n	8000cc0 <__udivmoddi4+0xf0>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0420 	rsb	r4, lr, #32
 8000bf4:	fa20 f404 	lsr.w	r4, r0, r4
 8000bf8:	fa01 f60e 	lsl.w	r6, r1, lr
 8000bfc:	ea44 0c06 	orr.w	ip, r4, r6
 8000c00:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c0c:	0c22      	lsrs	r2, r4, #16
 8000c0e:	fbbc f0f9 	udiv	r0, ip, r9
 8000c12:	fa1f f887 	uxth.w	r8, r7
 8000c16:	fb09 c610 	mls	r6, r9, r0, ip
 8000c1a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000c1e:	fb00 f308 	mul.w	r3, r0, r8
 8000c22:	42b3      	cmp	r3, r6
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x6a>
 8000c26:	19f6      	adds	r6, r6, r7
 8000c28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2c:	f080 8122 	bcs.w	8000e74 <__udivmoddi4+0x2a4>
 8000c30:	42b3      	cmp	r3, r6
 8000c32:	f240 811f 	bls.w	8000e74 <__udivmoddi4+0x2a4>
 8000c36:	3802      	subs	r0, #2
 8000c38:	443e      	add	r6, r7
 8000c3a:	1af6      	subs	r6, r6, r3
 8000c3c:	b2a2      	uxth	r2, r4
 8000c3e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000c42:	fb09 6613 	mls	r6, r9, r3, r6
 8000c46:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000c4a:	fb03 f808 	mul.w	r8, r3, r8
 8000c4e:	45a0      	cmp	r8, r4
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x96>
 8000c52:	19e4      	adds	r4, r4, r7
 8000c54:	f103 32ff 	add.w	r2, r3, #4294967295
 8000c58:	f080 810a 	bcs.w	8000e70 <__udivmoddi4+0x2a0>
 8000c5c:	45a0      	cmp	r8, r4
 8000c5e:	f240 8107 	bls.w	8000e70 <__udivmoddi4+0x2a0>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	443c      	add	r4, r7
 8000c66:	ebc8 0404 	rsb	r4, r8, r4
 8000c6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d062      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c74:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c78:	2300      	movs	r3, #0
 8000c7a:	602c      	str	r4, [r5, #0]
 8000c7c:	606b      	str	r3, [r5, #4]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0xc6>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d055      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000c90:	4608      	mov	r0, r1
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	f040 8090 	bne.w	8000dc0 <__udivmoddi4+0x1f0>
 8000ca0:	42b3      	cmp	r3, r6
 8000ca2:	d302      	bcc.n	8000caa <__udivmoddi4+0xda>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	f200 80f8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000caa:	1a84      	subs	r4, r0, r2
 8000cac:	eb66 0603 	sbc.w	r6, r6, r3
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	46b4      	mov	ip, r6
 8000cb4:	2d00      	cmp	r5, #0
 8000cb6:	d040      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cb8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc0:	b912      	cbnz	r2, 8000cc8 <__udivmoddi4+0xf8>
 8000cc2:	2701      	movs	r7, #1
 8000cc4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cc8:	fab7 fe87 	clz	lr, r7
 8000ccc:	f1be 0f00 	cmp.w	lr, #0
 8000cd0:	d135      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd2:	1bf3      	subs	r3, r6, r7
 8000cd4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb08 3610 	mls	r6, r8, r0, r3
 8000ce8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000cec:	fb0c f300 	mul.w	r3, ip, r0
 8000cf0:	42b3      	cmp	r3, r6
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19f6      	adds	r6, r6, r7
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42b3      	cmp	r3, r6
 8000cfe:	f200 80ce 	bhi.w	8000e9e <__udivmoddi4+0x2ce>
 8000d02:	4610      	mov	r0, r2
 8000d04:	1af6      	subs	r6, r6, r3
 8000d06:	b2a2      	uxth	r2, r4
 8000d08:	fbb6 f3f8 	udiv	r3, r6, r8
 8000d0c:	fb08 6613 	mls	r6, r8, r3, r6
 8000d10:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d14:	fb0c fc03 	mul.w	ip, ip, r3
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b5 	bhi.w	8000e94 <__udivmoddi4+0x2c4>
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	ebcc 0404 	rsb	r4, ip, r4
 8000d30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d34:	e79c      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000d36:	4629      	mov	r1, r5
 8000d38:	4628      	mov	r0, r5
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0120 	rsb	r1, lr, #32
 8000d42:	fa06 f30e 	lsl.w	r3, r6, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f901 	lsr.w	r9, r0, r1
 8000d4e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d52:	40ce      	lsrs	r6, r1
 8000d54:	ea49 0903 	orr.w	r9, r9, r3
 8000d58:	fbb6 faf8 	udiv	sl, r6, r8
 8000d5c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000d60:	fb08 661a 	mls	r6, r8, sl, r6
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000d6c:	fb0a f20c 	mul.w	r2, sl, ip
 8000d70:	429a      	cmp	r2, r3
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1be>
 8000d78:	19db      	adds	r3, r3, r7
 8000d7a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000d7e:	f080 8087 	bcs.w	8000e90 <__udivmoddi4+0x2c0>
 8000d82:	429a      	cmp	r2, r3
 8000d84:	f240 8084 	bls.w	8000e90 <__udivmoddi4+0x2c0>
 8000d88:	f1aa 0a02 	sub.w	sl, sl, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	1a9b      	subs	r3, r3, r2
 8000d90:	fa1f f989 	uxth.w	r9, r9
 8000d94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d98:	fb08 3311 	mls	r3, r8, r1, r3
 8000d9c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000da0:	fb01 f60c 	mul.w	r6, r1, ip
 8000da4:	429e      	cmp	r6, r3
 8000da6:	d907      	bls.n	8000db8 <__udivmoddi4+0x1e8>
 8000da8:	19db      	adds	r3, r3, r7
 8000daa:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dae:	d26b      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000db0:	429e      	cmp	r6, r3
 8000db2:	d969      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000db4:	3902      	subs	r1, #2
 8000db6:	443b      	add	r3, r7
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000dbe:	e78e      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dc0:	f1c1 0e20 	rsb	lr, r1, #32
 8000dc4:	fa22 f40e 	lsr.w	r4, r2, lr
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	4323      	orrs	r3, r4
 8000dcc:	fa20 f70e 	lsr.w	r7, r0, lr
 8000dd0:	fa06 f401 	lsl.w	r4, r6, r1
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	fa26 f60e 	lsr.w	r6, r6, lr
 8000ddc:	433c      	orrs	r4, r7
 8000dde:	fbb6 f9fc 	udiv	r9, r6, ip
 8000de2:	0c27      	lsrs	r7, r4, #16
 8000de4:	fb0c 6619 	mls	r6, ip, r9, r6
 8000de8:	fa1f f883 	uxth.w	r8, r3
 8000dec:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000df0:	fb09 f708 	mul.w	r7, r9, r8
 8000df4:	42b7      	cmp	r7, r6
 8000df6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfa:	fa00 fa01 	lsl.w	sl, r0, r1
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x242>
 8000e00:	18f6      	adds	r6, r6, r3
 8000e02:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e06:	d241      	bcs.n	8000e8c <__udivmoddi4+0x2bc>
 8000e08:	42b7      	cmp	r7, r6
 8000e0a:	d93f      	bls.n	8000e8c <__udivmoddi4+0x2bc>
 8000e0c:	f1a9 0902 	sub.w	r9, r9, #2
 8000e10:	441e      	add	r6, r3
 8000e12:	1bf6      	subs	r6, r6, r7
 8000e14:	b2a0      	uxth	r0, r4
 8000e16:	fbb6 f4fc 	udiv	r4, r6, ip
 8000e1a:	fb0c 6614 	mls	r6, ip, r4, r6
 8000e1e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000e22:	fb04 f808 	mul.w	r8, r4, r8
 8000e26:	45b8      	cmp	r8, r7
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x26a>
 8000e2a:	18ff      	adds	r7, r7, r3
 8000e2c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e30:	d228      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000e32:	45b8      	cmp	r8, r7
 8000e34:	d926      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000e36:	3c02      	subs	r4, #2
 8000e38:	441f      	add	r7, r3
 8000e3a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000e3e:	ebc8 0707 	rsb	r7, r8, r7
 8000e42:	fba0 8902 	umull	r8, r9, r0, r2
 8000e46:	454f      	cmp	r7, r9
 8000e48:	4644      	mov	r4, r8
 8000e4a:	464e      	mov	r6, r9
 8000e4c:	d314      	bcc.n	8000e78 <__udivmoddi4+0x2a8>
 8000e4e:	d029      	beq.n	8000ea4 <__udivmoddi4+0x2d4>
 8000e50:	b365      	cbz	r5, 8000eac <__udivmoddi4+0x2dc>
 8000e52:	ebba 0304 	subs.w	r3, sl, r4
 8000e56:	eb67 0706 	sbc.w	r7, r7, r6
 8000e5a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	40cf      	lsrs	r7, r1
 8000e62:	ea4e 0303 	orr.w	r3, lr, r3
 8000e66:	e885 0088 	stmia.w	r5, {r3, r7}
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e70:	4613      	mov	r3, r2
 8000e72:	e6f8      	b.n	8000c66 <__udivmoddi4+0x96>
 8000e74:	4610      	mov	r0, r2
 8000e76:	e6e0      	b.n	8000c3a <__udivmoddi4+0x6a>
 8000e78:	ebb8 0402 	subs.w	r4, r8, r2
 8000e7c:	eb69 0603 	sbc.w	r6, r9, r3
 8000e80:	3801      	subs	r0, #1
 8000e82:	e7e5      	b.n	8000e50 <__udivmoddi4+0x280>
 8000e84:	4604      	mov	r4, r0
 8000e86:	e7d8      	b.n	8000e3a <__udivmoddi4+0x26a>
 8000e88:	4611      	mov	r1, r2
 8000e8a:	e795      	b.n	8000db8 <__udivmoddi4+0x1e8>
 8000e8c:	4681      	mov	r9, r0
 8000e8e:	e7c0      	b.n	8000e12 <__udivmoddi4+0x242>
 8000e90:	468a      	mov	sl, r1
 8000e92:	e77c      	b.n	8000d8e <__udivmoddi4+0x1be>
 8000e94:	3b02      	subs	r3, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e748      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e70a      	b.n	8000cb4 <__udivmoddi4+0xe4>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	443e      	add	r6, r7
 8000ea2:	e72f      	b.n	8000d04 <__udivmoddi4+0x134>
 8000ea4:	45c2      	cmp	sl, r8
 8000ea6:	d3e7      	bcc.n	8000e78 <__udivmoddi4+0x2a8>
 8000ea8:	463e      	mov	r6, r7
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x280>
 8000eac:	4629      	mov	r1, r5
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <prvResetNextTaskUnblockTime+0x1c>)
 8000eba:	6813      	ldr	r3, [r2, #0]
 8000ebc:	6819      	ldr	r1, [r3, #0]
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <prvResetNextTaskUnblockTime+0x20>)
 8000ec0:	b911      	cbnz	r1, 8000ec8 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec6:	e003      	b.n	8000ed0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000ec8:	6812      	ldr	r2, [r2, #0]
 8000eca:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8000ecc:	68d2      	ldr	r2, [r2, #12]
 8000ece:	6852      	ldr	r2, [r2, #4]
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	4770      	bx	lr
 8000ed4:	2000057c 	.word	0x2000057c
 8000ed8:	20000648 	.word	0x20000648

08000edc <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <prvAddCurrentTaskToDelayedList+0x3c>)
 8000ede:	681a      	ldr	r2, [r3, #0]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8000ee0:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8000ee2:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <prvAddCurrentTaskToDelayedList+0x40>)
 8000ee6:	6812      	ldr	r2, [r2, #0]
 8000ee8:	4290      	cmp	r0, r2
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8000eea:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 8000eec:	d207      	bcs.n	8000efe <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8000eee:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <prvAddCurrentTaskToDelayedList+0x44>)
 8000ef0:	6810      	ldr	r0, [r2, #0]
 8000ef2:	6819      	ldr	r1, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8000ef8:	3104      	adds	r1, #4
 8000efa:	f001 b93b 	b.w	8002174 <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8000efe:	4a09      	ldr	r2, [pc, #36]	; (8000f24 <prvAddCurrentTaskToDelayedList+0x48>)
 8000f00:	6810      	ldr	r0, [r2, #0]
 8000f02:	6819      	ldr	r1, [r3, #0]
 8000f04:	3104      	adds	r1, #4
 8000f06:	f001 f935 	bl	8002174 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8000f0a:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <prvAddCurrentTaskToDelayedList+0x4c>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 8000f10:	bf38      	it	cc
 8000f12:	601c      	strcc	r4, [r3, #0]
 8000f14:	bd10      	pop	{r4, pc}
 8000f16:	bf00      	nop
 8000f18:	20000644 	.word	0x20000644
 8000f1c:	2000064c 	.word	0x2000064c
 8000f20:	20000650 	.word	0x20000650
 8000f24:	2000057c 	.word	0x2000057c
 8000f28:	20000648 	.word	0x20000648

08000f2c <xTaskGenericCreate.part.5>:
	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8000f2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f30:	469a      	mov	sl, r3
 8000f32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000f34:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8000f36:	4681      	mov	r9, r0
 8000f38:	460e      	mov	r6, r1
 8000f3a:	4615      	mov	r5, r2
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f3c:	b93b      	cbnz	r3, 8000f4e <xTaskGenericCreate.part.5+0x22>
 8000f3e:	0090      	lsls	r0, r2, #2
 8000f40:	f001 f964 	bl	800220c <pvPortMalloc>

		if( pxStack != NULL )
 8000f44:	4683      	mov	fp, r0
 8000f46:	2800      	cmp	r0, #0
 8000f48:	f000 80b2 	beq.w	80010b0 <xTaskGenericCreate.part.5+0x184>
 8000f4c:	e000      	b.n	8000f50 <xTaskGenericCreate.part.5+0x24>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f4e:	469b      	mov	fp, r3

		if( pxStack != NULL )
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8000f50:	205c      	movs	r0, #92	; 0x5c
 8000f52:	f001 f95b 	bl	800220c <pvPortMalloc>

			if( pxNewTCB != NULL )
 8000f56:	4604      	mov	r4, r0
 8000f58:	b188      	cbz	r0, 8000f7e <xTaskGenericCreate.part.5+0x52>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8000f5a:	00ad      	lsls	r5, r5, #2
 8000f5c:	462a      	mov	r2, r5
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8000f5e:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8000f62:	21a5      	movs	r1, #165	; 0xa5
 8000f64:	4658      	mov	r0, fp
 8000f66:	f003 f9f8 	bl	800435a <memset>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8000f6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f6c:	3d04      	subs	r5, #4
 8000f6e:	441d      	add	r5, r3
 8000f70:	f025 0507 	bic.w	r5, r5, #7
 8000f74:	1e73      	subs	r3, r6, #1
 8000f76:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8000f7a:	360f      	adds	r6, #15
 8000f7c:	e005      	b.n	8000f8a <xTaskGenericCreate.part.5+0x5e>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 8000f7e:	4658      	mov	r0, fp
 8000f80:	f001 f9d6 	bl	8002330 <vPortFree>
 8000f84:	e094      	b.n	80010b0 <xTaskGenericCreate.part.5+0x184>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f86:	429e      	cmp	r6, r3
 8000f88:	d006      	beq.n	8000f98 <xTaskGenericCreate.part.5+0x6c>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8000f8a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8000f8e:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8000f92:	7819      	ldrb	r1, [r3, #0]
 8000f94:	2900      	cmp	r1, #0
 8000f96:	d1f6      	bne.n	8000f86 <xTaskGenericCreate.part.5+0x5a>
 8000f98:	2f06      	cmp	r7, #6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000f9a:	f04f 0800 	mov.w	r8, #0
 8000f9e:	46bb      	mov	fp, r7
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8000fa0:	f104 0604 	add.w	r6, r4, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	f04f 0b06 	movcs.w	fp, #6
 8000faa:	4630      	mov	r0, r6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000fac:	f884 8043 	strb.w	r8, [r4, #67]	; 0x43
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8000fb0:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8000fb4:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 8000fb8:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8000fbc:	f001 f8cb 	bl	8002156 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8000fc0:	f104 0018 	add.w	r0, r4, #24
 8000fc4:	f001 f8c7 	bl	8002156 <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000fc8:	f1cb 0307 	rsb	r3, fp, #7
 8000fcc:	61a3      	str	r3, [r4, #24]
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 8000fce:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8000fd2:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8000fd4:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
		pxTCB->eNotifyState = eNotWaitingNotification;
 8000fd6:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000fda:	4652      	mov	r2, sl
 8000fdc:	4649      	mov	r1, r9
 8000fde:	4628      	mov	r0, r5
 8000fe0:	f000 ff56 	bl	8001e90 <pxPortInitialiseStack>
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8000fe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000fe6:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8000fe8:	b103      	cbz	r3, 8000fec <xTaskGenericCreate.part.5+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000fea:	601c      	str	r4, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8000fec:	f000 ff72 	bl	8001ed4 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8000ff0:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <xTaskGenericCreate.part.5+0x18c>)
			if( pxCurrentTCB == NULL )
 8000ff2:	4d32      	ldr	r5, [pc, #200]	; (80010bc <xTaskGenericCreate.part.5+0x190>)

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 8000ff4:	6813      	ldr	r3, [r2, #0]
 8000ff6:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 80010e4 <xTaskGenericCreate.part.5+0x1b8>
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 8000ffe:	682b      	ldr	r3, [r5, #0]
 8001000:	bb3b      	cbnz	r3, 8001052 <xTaskGenericCreate.part.5+0x126>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8001002:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001004:	6812      	ldr	r2, [r2, #0]
 8001006:	2a01      	cmp	r2, #1
 8001008:	d12b      	bne.n	8001062 <xTaskGenericCreate.part.5+0x136>
 800100a:	4698      	mov	r8, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800100c:	eb09 0008 	add.w	r0, r9, r8
 8001010:	f108 0814 	add.w	r8, r8, #20
 8001014:	f001 f894 	bl	8002140 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001018:	f1b8 0f8c 	cmp.w	r8, #140	; 0x8c
 800101c:	d1f6      	bne.n	800100c <xTaskGenericCreate.part.5+0xe0>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800101e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80010e8 <xTaskGenericCreate.part.5+0x1bc>
	vListInitialise( &xDelayedTaskList2 );
 8001022:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80010ec <xTaskGenericCreate.part.5+0x1c0>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8001026:	4650      	mov	r0, sl
 8001028:	f001 f88a 	bl	8002140 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800102c:	4640      	mov	r0, r8
 800102e:	f001 f887 	bl	8002140 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001032:	4823      	ldr	r0, [pc, #140]	; (80010c0 <xTaskGenericCreate.part.5+0x194>)
 8001034:	f001 f884 	bl	8002140 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001038:	4822      	ldr	r0, [pc, #136]	; (80010c4 <xTaskGenericCreate.part.5+0x198>)
 800103a:	f001 f881 	bl	8002140 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800103e:	4822      	ldr	r0, [pc, #136]	; (80010c8 <xTaskGenericCreate.part.5+0x19c>)
 8001040:	f001 f87e 	bl	8002140 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <xTaskGenericCreate.part.5+0x1a0>)
 8001046:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <xTaskGenericCreate.part.5+0x1a4>)
 800104c:	f8c3 8000 	str.w	r8, [r3]
 8001050:	e007      	b.n	8001062 <xTaskGenericCreate.part.5+0x136>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8001052:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <xTaskGenericCreate.part.5+0x1a8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	b923      	cbnz	r3, 8001062 <xTaskGenericCreate.part.5+0x136>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8001058:	682b      	ldr	r3, [r5, #0]
 800105a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105c:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
 800105e:	bf28      	it	cs
 8001060:	602c      	strcs	r4, [r5, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8001062:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <xTaskGenericCreate.part.5+0x1ac>)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001064:	491d      	ldr	r1, [pc, #116]	; (80010dc <xTaskGenericCreate.part.5+0x1b0>)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8001066:	6813      	ldr	r3, [r2, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 800106c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			uxTaskNumber++;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800106e:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001070:	680b      	ldr	r3, [r1, #0]
 8001072:	2401      	movs	r4, #1
 8001074:	fa04 f002 	lsl.w	r0, r4, r2
 8001078:	4303      	orrs	r3, r0
 800107a:	2014      	movs	r0, #20
 800107c:	600b      	str	r3, [r1, #0]
 800107e:	fb00 9002 	mla	r0, r0, r2, r9
 8001082:	4631      	mov	r1, r6
 8001084:	f001 f86a 	bl	800215c <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8001088:	f000 ff46 	bl	8001f18 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <xTaskGenericCreate.part.5+0x1a8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	b15b      	cbz	r3, 80010aa <xTaskGenericCreate.part.5+0x17e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8001092:	682b      	ldr	r3, [r5, #0]
 8001094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001096:	429f      	cmp	r7, r3
 8001098:	d907      	bls.n	80010aa <xTaskGenericCreate.part.5+0x17e>
			{
				taskYIELD_IF_USING_PREEMPTION();
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <xTaskGenericCreate.part.5+0x1b4>)
 800109c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	f3bf 8f4f 	dsb	sy
 80010a6:	f3bf 8f6f 	isb	sy
	{
		if( xSchedulerRunning != pdFALSE )
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80010aa:	4620      	mov	r0, r4
 80010ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 80010b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010b8:	20000694 	.word	0x20000694
 80010bc:	20000644 	.word	0x20000644
 80010c0:	20000654 	.word	0x20000654
 80010c4:	20000588 	.word	0x20000588
 80010c8:	2000059c 	.word	0x2000059c
 80010cc:	2000057c 	.word	0x2000057c
 80010d0:	20000650 	.word	0x20000650
 80010d4:	20000580 	.word	0x20000580
 80010d8:	20000668 	.word	0x20000668
 80010dc:	20000698 	.word	0x20000698
 80010e0:	e000ed04 	.word	0xe000ed04
 80010e4:	200005b4 	.word	0x200005b4
 80010e8:	2000066c 	.word	0x2000066c
 80010ec:	20000680 	.word	0x20000680

080010f0 <prvTaskIsTaskSuspended.part.0>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80010f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010f4:	f383 8811 	msr	BASEPRI, r3
 80010f8:	f3bf 8f6f 	isb	sy
 80010fc:	f3bf 8f4f 	dsb	sy
 8001100:	e7fe      	b.n	8001100 <prvTaskIsTaskSuspended.part.0+0x10>

08001102 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001102:	b470      	push	{r4, r5, r6}
 8001104:	ac03      	add	r4, sp, #12
 8001106:	cc70      	ldmia	r4, {r4, r5, r6}
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 8001108:	b940      	cbnz	r0, 800111c <xTaskGenericCreate+0x1a>
 800110a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800110e:	f383 8811 	msr	BASEPRI, r3
 8001112:	f3bf 8f6f 	isb	sy
 8001116:	f3bf 8f4f 	dsb	sy
 800111a:	e7fe      	b.n	800111a <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800111c:	2c06      	cmp	r4, #6
 800111e:	d908      	bls.n	8001132 <xTaskGenericCreate+0x30>
 8001120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001124:	f383 8811 	msr	BASEPRI, r3
 8001128:	f3bf 8f6f 	isb	sy
 800112c:	f3bf 8f4f 	dsb	sy
 8001130:	e7fe      	b.n	8001130 <xTaskGenericCreate+0x2e>
 8001132:	9605      	str	r6, [sp, #20]
 8001134:	9504      	str	r5, [sp, #16]
 8001136:	9403      	str	r4, [sp, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 8001138:	bc70      	pop	{r4, r5, r6}
 800113a:	f7ff bef7 	b.w	8000f2c <xTaskGenericCreate.part.5>
	...

08001140 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001142:	2400      	movs	r4, #0
 8001144:	9402      	str	r4, [sp, #8]
 8001146:	9401      	str	r4, [sp, #4]
 8001148:	9400      	str	r4, [sp, #0]
 800114a:	4623      	mov	r3, r4
 800114c:	2280      	movs	r2, #128	; 0x80
 800114e:	4913      	ldr	r1, [pc, #76]	; (800119c <vTaskStartScheduler+0x5c>)
 8001150:	4813      	ldr	r0, [pc, #76]	; (80011a0 <vTaskStartScheduler+0x60>)
 8001152:	f7ff feeb 	bl	8000f2c <xTaskGenericCreate.part.5>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001156:	2801      	cmp	r0, #1
 8001158:	d114      	bne.n	8001184 <vTaskStartScheduler+0x44>
 800115a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800115e:	f383 8811 	msr	BASEPRI, r3
 8001162:	f3bf 8f6f 	isb	sy
 8001166:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <vTaskStartScheduler+0x64>)
 800116c:	f04f 32ff 	mov.w	r2, #4294967295
 8001170:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <vTaskStartScheduler+0x68>)
 8001174:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <vTaskStartScheduler+0x6c>)
 8001178:	601c      	str	r4, [r3, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 800117a:	b004      	add	sp, #16
 800117c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001180:	f000 bf3a 	b.w	8001ff8 <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8001184:	b940      	cbnz	r0, 8001198 <vTaskStartScheduler+0x58>
 8001186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800118a:	f383 8811 	msr	BASEPRI, r3
 800118e:	f3bf 8f6f 	isb	sy
 8001192:	f3bf 8f4f 	dsb	sy
 8001196:	e7fe      	b.n	8001196 <vTaskStartScheduler+0x56>
	}
}
 8001198:	b004      	add	sp, #16
 800119a:	bd10      	pop	{r4, pc}
 800119c:	080071f4 	.word	0x080071f4
 80011a0:	08001459 	.word	0x08001459
 80011a4:	20000648 	.word	0x20000648
 80011a8:	20000580 	.word	0x20000580
 80011ac:	2000064c 	.word	0x2000064c

080011b0 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80011b0:	4a02      	ldr	r2, [pc, #8]	; (80011bc <vTaskSuspendAll+0xc>)
 80011b2:	6813      	ldr	r3, [r2, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000640 	.word	0x20000640

080011c0 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011c0:	4b40      	ldr	r3, [pc, #256]	; (80012c4 <xTaskIncrementTick+0x104>)
 80011c2:	681b      	ldr	r3, [r3, #0]

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80011c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d13c      	bne.n	8001246 <xTaskIncrementTick+0x86>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 80011cc:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <xTaskIncrementTick+0x108>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	3201      	adds	r2, #1
 80011d2:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80011d4:	681d      	ldr	r5, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
 80011d6:	b9bd      	cbnz	r5, 8001208 <xTaskIncrementTick+0x48>
			{
				taskSWITCH_DELAYED_LISTS();
 80011d8:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <xTaskIncrementTick+0x10c>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	b142      	cbz	r2, 80011f2 <xTaskIncrementTick+0x32>
 80011e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011e4:	f383 8811 	msr	BASEPRI, r3
 80011e8:	f3bf 8f6f 	isb	sy
 80011ec:	f3bf 8f4f 	dsb	sy
 80011f0:	e7fe      	b.n	80011f0 <xTaskIncrementTick+0x30>
 80011f2:	4a37      	ldr	r2, [pc, #220]	; (80012d0 <xTaskIncrementTick+0x110>)
 80011f4:	6819      	ldr	r1, [r3, #0]
 80011f6:	6810      	ldr	r0, [r2, #0]
 80011f8:	6018      	str	r0, [r3, #0]
 80011fa:	6011      	str	r1, [r2, #0]
 80011fc:	4a35      	ldr	r2, [pc, #212]	; (80012d4 <xTaskIncrementTick+0x114>)
 80011fe:	6813      	ldr	r3, [r2, #0]
 8001200:	3301      	adds	r3, #1
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	f7ff fe58 	bl	8000eb8 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8001208:	4c33      	ldr	r4, [pc, #204]	; (80012d8 <xTaskIncrementTick+0x118>)
 800120a:	9401      	str	r4, [sp, #4]
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	4e33      	ldr	r6, [pc, #204]	; (80012dc <xTaskIncrementTick+0x11c>)
 8001210:	4f33      	ldr	r7, [pc, #204]	; (80012e0 <xTaskIncrementTick+0x120>)
 8001212:	429d      	cmp	r5, r3
 8001214:	f04f 0b00 	mov.w	fp, #0
 8001218:	d30b      	bcc.n	8001232 <xTaskIncrementTick+0x72>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800121a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80012cc <xTaskIncrementTick+0x10c>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 800121e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80012ec <xTaskIncrementTick+0x12c>
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001222:	f8d8 2000 	ldr.w	r2, [r8]
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	b9a2      	cbnz	r2, 8001254 <xTaskIncrementTick+0x94>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 800122a:	9b01      	ldr	r3, [sp, #4]
 800122c:	f04f 32ff 	mov.w	r2, #4294967295
 8001230:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001236:	2214      	movs	r2, #20
 8001238:	434a      	muls	r2, r1
 800123a:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 800123c:	2a02      	cmp	r2, #2
 800123e:	bf28      	it	cs
 8001240:	f04f 0b01 	movcs.w	fp, #1
 8001244:	e034      	b.n	80012b0 <xTaskIncrementTick+0xf0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001246:	4a27      	ldr	r2, [pc, #156]	; (80012e4 <xTaskIncrementTick+0x124>)
 8001248:	6813      	ldr	r3, [r2, #0]
 800124a:	3301      	adds	r3, #1
 800124c:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800124e:	f04f 0b00 	mov.w	fp, #0
 8001252:	e02d      	b.n	80012b0 <xTaskIncrementTick+0xf0>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001254:	f8d8 2000 	ldr.w	r2, [r8]
 8001258:	68d2      	ldr	r2, [r2, #12]
 800125a:	68d4      	ldr	r4, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800125c:	6861      	ldr	r1, [r4, #4]

						if( xConstTickCount < xItemValue )
 800125e:	428d      	cmp	r5, r1
 8001260:	d202      	bcs.n	8001268 <xTaskIncrementTick+0xa8>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8001262:	9b01      	ldr	r3, [sp, #4]
 8001264:	6019      	str	r1, [r3, #0]
							break;
 8001266:	e7e4      	b.n	8001232 <xTaskIncrementTick+0x72>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001268:	f104 0a04 	add.w	sl, r4, #4
 800126c:	4650      	mov	r0, sl
 800126e:	f000 ff99 	bl	80021a4 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001272:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001274:	b119      	cbz	r1, 800127e <xTaskIncrementTick+0xbe>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001276:	f104 0018 	add.w	r0, r4, #24
 800127a:	f000 ff93 	bl	80021a4 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 800127e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001280:	f8d9 1000 	ldr.w	r1, [r9]
 8001284:	2301      	movs	r3, #1
 8001286:	fa03 fe00 	lsl.w	lr, r3, r0
 800128a:	ea4e 0101 	orr.w	r1, lr, r1
 800128e:	f04f 0e14 	mov.w	lr, #20
 8001292:	f8c9 1000 	str.w	r1, [r9]
 8001296:	fb0e 6000 	mla	r0, lr, r0, r6
 800129a:	4651      	mov	r1, sl
 800129c:	f000 ff5e 	bl	800215c <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80012a0:	6838      	ldr	r0, [r7, #0]
 80012a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80012a4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 80012a6:	4291      	cmp	r1, r2
 80012a8:	bf28      	it	cs
 80012aa:	f04f 0b01 	movcs.w	fp, #1
 80012ae:	e7b8      	b.n	8001222 <xTaskIncrementTick+0x62>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <xTaskIncrementTick+0x128>)
 80012b2:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 80012b4:	2a00      	cmp	r2, #0
 80012b6:	bf18      	it	ne
 80012b8:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 80012bc:	4658      	mov	r0, fp
 80012be:	b003      	add	sp, #12
 80012c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012c4:	20000640 	.word	0x20000640
 80012c8:	2000064c 	.word	0x2000064c
 80012cc:	2000057c 	.word	0x2000057c
 80012d0:	20000650 	.word	0x20000650
 80012d4:	20000578 	.word	0x20000578
 80012d8:	20000648 	.word	0x20000648
 80012dc:	200005b4 	.word	0x200005b4
 80012e0:	20000644 	.word	0x20000644
 80012e4:	200005b0 	.word	0x200005b0
 80012e8:	2000069c 	.word	0x2000069c
 80012ec:	20000698 	.word	0x20000698

080012f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80012f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80012f4:	4c30      	ldr	r4, [pc, #192]	; (80013b8 <xTaskResumeAll+0xc8>)
 80012f6:	6823      	ldr	r3, [r4, #0]
 80012f8:	b943      	cbnz	r3, 800130c <xTaskResumeAll+0x1c>
 80012fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012fe:	f383 8811 	msr	BASEPRI, r3
 8001302:	f3bf 8f6f 	isb	sy
 8001306:	f3bf 8f4f 	dsb	sy
 800130a:	e7fe      	b.n	800130a <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800130c:	f000 fde2 	bl	8001ed4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	3b01      	subs	r3, #1
 8001314:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001316:	6823      	ldr	r3, [r4, #0]
 8001318:	b10b      	cbz	r3, 800131e <xTaskResumeAll+0x2e>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 800131a:	2400      	movs	r4, #0
 800131c:	e047      	b.n	80013ae <xTaskResumeAll+0xbe>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800131e:	4b27      	ldr	r3, [pc, #156]	; (80013bc <xTaskResumeAll+0xcc>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f9      	beq.n	800131a <xTaskResumeAll+0x2a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001326:	4d26      	ldr	r5, [pc, #152]	; (80013c0 <xTaskResumeAll+0xd0>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8001328:	4e26      	ldr	r6, [pc, #152]	; (80013c4 <xTaskResumeAll+0xd4>)
 800132a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80013d8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800132e:	682b      	ldr	r3, [r5, #0]
 8001330:	b303      	cbz	r3, 8001374 <xTaskResumeAll+0x84>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001332:	68eb      	ldr	r3, [r5, #12]
 8001334:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001336:	f104 0904 	add.w	r9, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800133a:	f104 0018 	add.w	r0, r4, #24
 800133e:	f000 ff31 	bl	80021a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001342:	4648      	mov	r0, r9
 8001344:	f000 ff2e 	bl	80021a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001348:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800134a:	6833      	ldr	r3, [r6, #0]
 800134c:	2701      	movs	r7, #1
 800134e:	fa07 f102 	lsl.w	r1, r7, r2
 8001352:	2014      	movs	r0, #20
 8001354:	430b      	orrs	r3, r1
 8001356:	fb00 8002 	mla	r0, r0, r2, r8
 800135a:	4649      	mov	r1, r9
 800135c:	6033      	str	r3, [r6, #0]
 800135e:	f000 fefd 	bl	800215c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <xTaskResumeAll+0xd8>)
 8001364:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136a:	429a      	cmp	r2, r3
 800136c:	d3df      	bcc.n	800132e <xTaskResumeAll+0x3e>
					{
						xYieldPending = pdTRUE;
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <xTaskResumeAll+0xdc>)
 8001370:	601f      	str	r7, [r3, #0]
 8001372:	e7da      	b.n	800132a <xTaskResumeAll+0x3a>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8001374:	4c16      	ldr	r4, [pc, #88]	; (80013d0 <xTaskResumeAll+0xe0>)
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	b963      	cbnz	r3, 8001394 <xTaskResumeAll+0xa4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <xTaskResumeAll+0xdc>)
 800137c:	681c      	ldr	r4, [r3, #0]
 800137e:	2c01      	cmp	r4, #1
 8001380:	d1cb      	bne.n	800131a <xTaskResumeAll+0x2a>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <xTaskResumeAll+0xe4>)
 8001384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	f3bf 8f4f 	dsb	sy
 800138e:	f3bf 8f6f 	isb	sy
 8001392:	e00c      	b.n	80013ae <xTaskResumeAll+0xbe>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 8001394:	4d0d      	ldr	r5, [pc, #52]	; (80013cc <xTaskResumeAll+0xdc>)
 8001396:	2601      	movs	r6, #1
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8001398:	6823      	ldr	r3, [r4, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0ed      	beq.n	800137a <xTaskResumeAll+0x8a>
					{
						if( xTaskIncrementTick() != pdFALSE )
 800139e:	f7ff ff0f 	bl	80011c0 <xTaskIncrementTick>
 80013a2:	b100      	cbz	r0, 80013a6 <xTaskResumeAll+0xb6>
						{
							xYieldPending = pdTRUE;
 80013a4:	602e      	str	r6, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 80013a6:	6823      	ldr	r3, [r4, #0]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	6023      	str	r3, [r4, #0]
 80013ac:	e7f4      	b.n	8001398 <xTaskResumeAll+0xa8>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80013ae:	f000 fdb3 	bl	8001f18 <vPortExitCritical>

	return xAlreadyYielded;
}
 80013b2:	4620      	mov	r0, r4
 80013b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013b8:	20000640 	.word	0x20000640
 80013bc:	20000694 	.word	0x20000694
 80013c0:	20000654 	.word	0x20000654
 80013c4:	20000698 	.word	0x20000698
 80013c8:	20000644 	.word	0x20000644
 80013cc:	2000069c 	.word	0x2000069c
 80013d0:	200005b0 	.word	0x200005b0
 80013d4:	e000ed04 	.word	0xe000ed04
 80013d8:	200005b4 	.word	0x200005b4

080013dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80013dc:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80013de:	b940      	cbnz	r0, 80013f2 <vTaskDelay+0x16>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <vTaskDelay+0x68>)
 80013e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	f3bf 8f4f 	dsb	sy
 80013ec:	f3bf 8f6f 	isb	sy
 80013f0:	bd38      	pop	{r3, r4, r5, pc}


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <vTaskDelay+0x6c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	b143      	cbz	r3, 800140a <vTaskDelay+0x2e>
 80013f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013fc:	f383 8811 	msr	BASEPRI, r3
 8001400:	f3bf 8f6f 	isb	sy
 8001404:	f3bf 8f4f 	dsb	sy
 8001408:	e7fe      	b.n	8001408 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800140a:	f7ff fed1 	bl	80011b0 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <vTaskDelay+0x70>)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001410:	4d0f      	ldr	r5, [pc, #60]	; (8001450 <vTaskDelay+0x74>)
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	18c4      	adds	r4, r0, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001416:	6828      	ldr	r0, [r5, #0]
 8001418:	3004      	adds	r0, #4
 800141a:	f000 fec3 	bl	80021a4 <uxListRemove>
 800141e:	b940      	cbnz	r0, 8001432 <vTaskDelay+0x56>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001420:	682b      	ldr	r3, [r5, #0]
 8001422:	490c      	ldr	r1, [pc, #48]	; (8001454 <vTaskDelay+0x78>)
 8001424:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001426:	680a      	ldr	r2, [r1, #0]
 8001428:	2301      	movs	r3, #1
 800142a:	4083      	lsls	r3, r0
 800142c:	ea22 0303 	bic.w	r3, r2, r3
 8001430:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001432:	4620      	mov	r0, r4
 8001434:	f7ff fd52 	bl	8000edc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001438:	f7ff ff5a 	bl	80012f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800143c:	2800      	cmp	r0, #0
 800143e:	d0cf      	beq.n	80013e0 <vTaskDelay+0x4>
 8001440:	bd38      	pop	{r3, r4, r5, pc}
 8001442:	bf00      	nop
 8001444:	e000ed04 	.word	0xe000ed04
 8001448:	20000640 	.word	0x20000640
 800144c:	2000064c 	.word	0x2000064c
 8001450:	20000644 	.word	0x20000644
 8001454:	20000698 	.word	0x20000698

08001458 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001458:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800145a:	4d18      	ldr	r5, [pc, #96]	; (80014bc <prvIdleTask+0x64>)
 800145c:	462e      	mov	r6, r5
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800145e:	4f18      	ldr	r7, [pc, #96]	; (80014c0 <prvIdleTask+0x68>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8001460:	682b      	ldr	r3, [r5, #0]
 8001462:	b1f3      	cbz	r3, 80014a2 <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 8001464:	f7ff fea4 	bl	80011b0 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001468:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 800146a:	f7ff ff41 	bl	80012f0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800146e:	2c00      	cmp	r4, #0
 8001470:	d0f6      	beq.n	8001460 <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8001472:	f000 fd2f 	bl	8001ed4 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <prvIdleTask+0x68>)
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800147c:	1d20      	adds	r0, r4, #4
 800147e:	f000 fe91 	bl	80021a4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001482:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <prvIdleTask+0x6c>)
 8001484:	6813      	ldr	r3, [r2, #0]
 8001486:	3b01      	subs	r3, #1
 8001488:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800148a:	6833      	ldr	r3, [r6, #0]
 800148c:	3b01      	subs	r3, #1
 800148e:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 8001490:	f000 fd42 	bl	8001f18 <vPortExitCritical>
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 8001494:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001496:	f000 ff4b 	bl	8002330 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 800149a:	4620      	mov	r0, r4
 800149c:	f000 ff48 	bl	8002330 <vPortFree>
 80014a0:	e7de      	b.n	8001460 <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <prvIdleTask+0x70>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d9d9      	bls.n	800145e <prvIdleTask+0x6>
			{
				taskYIELD();
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <prvIdleTask+0x74>)
 80014ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	f3bf 8f4f 	dsb	sy
 80014b6:	f3bf 8f6f 	isb	sy
 80014ba:	e7d0      	b.n	800145e <prvIdleTask+0x6>
 80014bc:	20000584 	.word	0x20000584
 80014c0:	20000588 	.word	0x20000588
 80014c4:	20000694 	.word	0x20000694
 80014c8:	200005b4 	.word	0x200005b4
 80014cc:	e000ed04 	.word	0xe000ed04

080014d0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <vTaskSwitchContext+0x60>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <vTaskSwitchContext+0x64>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80014d6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80014d8:	b10a      	cbz	r2, 80014de <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80014da:	2201      	movs	r2, #1
 80014dc:	e025      	b.n	800152a <vTaskSwitchContext+0x5a>
	}
	else
	{
		xYieldPending = pdFALSE;
 80014de:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <vTaskSwitchContext+0x68>)
 80014e2:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	f1c3 031f 	rsb	r3, r3, #31
 80014ee:	2214      	movs	r2, #20
 80014f0:	4912      	ldr	r1, [pc, #72]	; (800153c <vTaskSwitchContext+0x6c>)
 80014f2:	435a      	muls	r2, r3
 80014f4:	1888      	adds	r0, r1, r2
 80014f6:	588c      	ldr	r4, [r1, r2]
 80014f8:	b944      	cbnz	r4, 800150c <vTaskSwitchContext+0x3c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80014fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014fe:	f383 8811 	msr	BASEPRI, r3
 8001502:	f3bf 8f6f 	isb	sy
 8001506:	f3bf 8f4f 	dsb	sy
 800150a:	e7fe      	b.n	800150a <vTaskSwitchContext+0x3a>
 800150c:	6844      	ldr	r4, [r0, #4]
 800150e:	3208      	adds	r2, #8
 8001510:	6864      	ldr	r4, [r4, #4]
 8001512:	6044      	str	r4, [r0, #4]
 8001514:	440a      	add	r2, r1
 8001516:	4294      	cmp	r4, r2
 8001518:	bf04      	itt	eq
 800151a:	6862      	ldreq	r2, [r4, #4]
 800151c:	6042      	streq	r2, [r0, #4]
 800151e:	2214      	movs	r2, #20
 8001520:	fb02 1303 	mla	r3, r2, r3, r1
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <vTaskSwitchContext+0x70>)
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	bd10      	pop	{r4, pc}
 800152e:	bf00      	nop
 8001530:	20000640 	.word	0x20000640
 8001534:	2000069c 	.word	0x2000069c
 8001538:	20000698 	.word	0x20000698
 800153c:	200005b4 	.word	0x200005b4
 8001540:	20000644 	.word	0x20000644

08001544 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001544:	b538      	push	{r3, r4, r5, lr}
 8001546:	460d      	mov	r5, r1
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 8001548:	b940      	cbnz	r0, 800155c <vTaskPlaceOnEventList+0x18>
 800154a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800154e:	f383 8811 	msr	BASEPRI, r3
 8001552:	f3bf 8f6f 	isb	sy
 8001556:	f3bf 8f4f 	dsb	sy
 800155a:	e7fe      	b.n	800155a <vTaskPlaceOnEventList+0x16>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800155c:	4c11      	ldr	r4, [pc, #68]	; (80015a4 <vTaskPlaceOnEventList+0x60>)
 800155e:	6821      	ldr	r1, [r4, #0]
 8001560:	3118      	adds	r1, #24
 8001562:	f000 fe07 	bl	8002174 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001566:	6820      	ldr	r0, [r4, #0]
 8001568:	3004      	adds	r0, #4
 800156a:	f000 fe1b 	bl	80021a4 <uxListRemove>
 800156e:	b940      	cbnz	r0, 8001582 <vTaskPlaceOnEventList+0x3e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001570:	6823      	ldr	r3, [r4, #0]
 8001572:	490d      	ldr	r1, [pc, #52]	; (80015a8 <vTaskPlaceOnEventList+0x64>)
 8001574:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001576:	680a      	ldr	r2, [r1, #0]
 8001578:	2301      	movs	r3, #1
 800157a:	4083      	lsls	r3, r0
 800157c:	ea22 0303 	bic.w	r3, r2, r3
 8001580:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8001582:	1c6b      	adds	r3, r5, #1
 8001584:	d106      	bne.n	8001594 <vTaskPlaceOnEventList+0x50>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001586:	6821      	ldr	r1, [r4, #0]
 8001588:	4808      	ldr	r0, [pc, #32]	; (80015ac <vTaskPlaceOnEventList+0x68>)
 800158a:	3104      	adds	r1, #4
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800158c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001590:	f000 bde4 	b.w	800215c <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <vTaskPlaceOnEventList+0x6c>)
 8001596:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001598:	4428      	add	r0, r5
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800159a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800159e:	f7ff bc9d 	b.w	8000edc <prvAddCurrentTaskToDelayedList>
 80015a2:	bf00      	nop
 80015a4:	20000644 	.word	0x20000644
 80015a8:	20000698 	.word	0x20000698
 80015ac:	2000059c 	.word	0x2000059c
 80015b0:	2000064c 	.word	0x2000064c

080015b4 <xTaskRemoveFromEventList>:
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80015b4:	68c3      	ldr	r3, [r0, #12]

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80015b6:	b570      	push	{r4, r5, r6, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80015b8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80015ba:	b944      	cbnz	r4, 80015ce <xTaskRemoveFromEventList+0x1a>
 80015bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c0:	f383 8811 	msr	BASEPRI, r3
 80015c4:	f3bf 8f6f 	isb	sy
 80015c8:	f3bf 8f4f 	dsb	sy
 80015cc:	e7fe      	b.n	80015cc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80015ce:	f104 0518 	add.w	r5, r4, #24
 80015d2:	4628      	mov	r0, r5
 80015d4:	f000 fde6 	bl	80021a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <xTaskRemoveFromEventList+0x6c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	b983      	cbnz	r3, 8001600 <xTaskRemoveFromEventList+0x4c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80015de:	1d26      	adds	r6, r4, #4
 80015e0:	4630      	mov	r0, r6
 80015e2:	f000 fddf 	bl	80021a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80015e6:	490f      	ldr	r1, [pc, #60]	; (8001624 <xTaskRemoveFromEventList+0x70>)
 80015e8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80015ea:	680a      	ldr	r2, [r1, #0]
 80015ec:	2301      	movs	r3, #1
 80015ee:	40ab      	lsls	r3, r5
 80015f0:	4313      	orrs	r3, r2
 80015f2:	600b      	str	r3, [r1, #0]
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <xTaskRemoveFromEventList+0x74>)
 80015f6:	2014      	movs	r0, #20
 80015f8:	4631      	mov	r1, r6
 80015fa:	fb00 3005 	mla	r0, r0, r5, r3
 80015fe:	e001      	b.n	8001604 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001600:	480a      	ldr	r0, [pc, #40]	; (800162c <xTaskRemoveFromEventList+0x78>)
 8001602:	4629      	mov	r1, r5
 8001604:	f000 fdaa 	bl	800215c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <xTaskRemoveFromEventList+0x7c>)
 800160a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001610:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001612:	bf83      	ittte	hi
 8001614:	4b07      	ldrhi	r3, [pc, #28]	; (8001634 <xTaskRemoveFromEventList+0x80>)
 8001616:	2001      	movhi	r0, #1
 8001618:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
 800161a:	2000      	movls	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 800161c:	bd70      	pop	{r4, r5, r6, pc}
 800161e:	bf00      	nop
 8001620:	20000640 	.word	0x20000640
 8001624:	20000698 	.word	0x20000698
 8001628:	200005b4 	.word	0x200005b4
 800162c:	20000654 	.word	0x20000654
 8001630:	20000644 	.word	0x20000644
 8001634:	2000069c 	.word	0x2000069c

08001638 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001638:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 800163a:	b908      	cbnz	r0, 8001640 <vTaskSetTimeOutState+0x8>
 800163c:	f7ff fd58 	bl	80010f0 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <vTaskSetTimeOutState+0x18>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001646:	4b03      	ldr	r3, [pc, #12]	; (8001654 <vTaskSetTimeOutState+0x1c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6043      	str	r3, [r0, #4]
 800164c:	bd08      	pop	{r3, pc}
 800164e:	bf00      	nop
 8001650:	20000578 	.word	0x20000578
 8001654:	2000064c 	.word	0x2000064c

08001658 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001658:	b538      	push	{r3, r4, r5, lr}
 800165a:	460d      	mov	r5, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800165c:	4604      	mov	r4, r0
 800165e:	b940      	cbnz	r0, 8001672 <xTaskCheckForTimeOut+0x1a>
 8001660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001664:	f383 8811 	msr	BASEPRI, r3
 8001668:	f3bf 8f6f 	isb	sy
 800166c:	f3bf 8f4f 	dsb	sy
 8001670:	e7fe      	b.n	8001670 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8001672:	b941      	cbnz	r1, 8001686 <xTaskCheckForTimeOut+0x2e>
 8001674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001678:	f383 8811 	msr	BASEPRI, r3
 800167c:	f3bf 8f6f 	isb	sy
 8001680:	f3bf 8f4f 	dsb	sy
 8001684:	e7fe      	b.n	8001684 <xTaskCheckForTimeOut+0x2c>

	taskENTER_CRITICAL();
 8001686:	f000 fc25 	bl	8001ed4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <xTaskCheckForTimeOut+0x6c>)
 800168c:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 800168e:	682b      	ldr	r3, [r5, #0]
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	d010      	beq.n	80016b6 <xTaskCheckForTimeOut+0x5e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001694:	4a0c      	ldr	r2, [pc, #48]	; (80016c8 <xTaskCheckForTimeOut+0x70>)
 8001696:	6820      	ldr	r0, [r4, #0]
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	4290      	cmp	r0, r2
 800169c:	6862      	ldr	r2, [r4, #4]
 800169e:	d001      	beq.n	80016a4 <xTaskCheckForTimeOut+0x4c>
 80016a0:	4291      	cmp	r1, r2
 80016a2:	d20a      	bcs.n	80016ba <xTaskCheckForTimeOut+0x62>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 80016a4:	1a88      	subs	r0, r1, r2
 80016a6:	4283      	cmp	r3, r0
 80016a8:	d907      	bls.n	80016ba <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 80016aa:	1a52      	subs	r2, r2, r1
 80016ac:	4413      	add	r3, r2
 80016ae:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80016b0:	4620      	mov	r0, r4
 80016b2:	f7ff ffc1 	bl	8001638 <vTaskSetTimeOutState>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
 80016b6:	2400      	movs	r4, #0
 80016b8:	e000      	b.n	80016bc <xTaskCheckForTimeOut+0x64>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 80016ba:	2401      	movs	r4, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 80016bc:	f000 fc2c 	bl	8001f18 <vPortExitCritical>

	return xReturn;
}
 80016c0:	4620      	mov	r0, r4
 80016c2:	bd38      	pop	{r3, r4, r5, pc}
 80016c4:	2000064c 	.word	0x2000064c
 80016c8:	20000578 	.word	0x20000578

080016cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 80016cc:	4b01      	ldr	r3, [pc, #4]	; (80016d4 <vTaskMissedYield+0x8>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	4770      	bx	lr
 80016d4:	2000069c 	.word	0x2000069c

080016d8 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <xTaskGetSchedulerState+0x18>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	b133      	cbz	r3, 80016ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016de:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <xTaskGetSchedulerState+0x1c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80016e4:	bf0c      	ite	eq
 80016e6:	2002      	moveq	r0, #2
 80016e8:	2000      	movne	r0, #0
 80016ea:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80016ec:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 80016ee:	4770      	bx	lr
 80016f0:	20000580 	.word	0x20000580
 80016f4:	20000640 	.word	0x20000640

080016f8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80016f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80016fc:	4604      	mov	r4, r0
 80016fe:	2800      	cmp	r0, #0
 8001700:	d038      	beq.n	8001774 <vTaskPriorityInherit+0x7c>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001702:	4d1d      	ldr	r5, [pc, #116]	; (8001778 <vTaskPriorityInherit+0x80>)
 8001704:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001706:	682a      	ldr	r2, [r5, #0]
 8001708:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800170a:	4293      	cmp	r3, r2
 800170c:	d232      	bcs.n	8001774 <vTaskPriorityInherit+0x7c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800170e:	6982      	ldr	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001710:	4e1a      	ldr	r6, [pc, #104]	; (800177c <vTaskPriorityInherit+0x84>)
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001712:	2a00      	cmp	r2, #0
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001714:	bfa1      	itttt	ge
 8001716:	682a      	ldrge	r2, [r5, #0]
 8001718:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 800171a:	f1c2 0207 	rsbge	r2, r2, #7
 800171e:	6182      	strge	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001720:	2714      	movs	r7, #20
 8001722:	6942      	ldr	r2, [r0, #20]
 8001724:	fb07 6303 	mla	r3, r7, r3, r6
 8001728:	429a      	cmp	r2, r3
 800172a:	d120      	bne.n	800176e <vTaskPriorityInherit+0x76>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800172c:	f100 0804 	add.w	r8, r0, #4
 8001730:	4640      	mov	r0, r8
 8001732:	f000 fd37 	bl	80021a4 <uxListRemove>
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <vTaskPriorityInherit+0x88>)
 8001738:	b948      	cbnz	r0, 800174e <vTaskPriorityInherit+0x56>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800173a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800173c:	4347      	muls	r7, r0
 800173e:	59f2      	ldr	r2, [r6, r7]
 8001740:	b92a      	cbnz	r2, 800174e <vTaskPriorityInherit+0x56>
 8001742:	6819      	ldr	r1, [r3, #0]
 8001744:	2201      	movs	r2, #1
 8001746:	4082      	lsls	r2, r0
 8001748:	ea21 0202 	bic.w	r2, r1, r2
 800174c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800174e:	682a      	ldr	r2, [r5, #0]
 8001750:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001752:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8001754:	2001      	movs	r0, #1
 8001756:	681c      	ldr	r4, [r3, #0]
 8001758:	4090      	lsls	r0, r2
 800175a:	4320      	orrs	r0, r4
 800175c:	6018      	str	r0, [r3, #0]
 800175e:	2014      	movs	r0, #20
 8001760:	4641      	mov	r1, r8
 8001762:	fb00 6002 	mla	r0, r0, r2, r6
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 800176a:	f000 bcf7 	b.w	800215c <vListInsertEnd>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800176e:	682b      	ldr	r3, [r5, #0]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001778:	20000644 	.word	0x20000644
 800177c:	200005b4 	.word	0x200005b4
 8001780:	20000698 	.word	0x20000698

08001784 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 8001786:	4604      	mov	r4, r0
 8001788:	b908      	cbnz	r0, 800178e <xTaskPriorityDisinherit+0xa>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 800178a:	2000      	movs	r0, #0
 800178c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800178e:	4b22      	ldr	r3, [pc, #136]	; (8001818 <xTaskPriorityDisinherit+0x94>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4298      	cmp	r0, r3
 8001794:	d008      	beq.n	80017a8 <xTaskPriorityDisinherit+0x24>
 8001796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800179a:	f383 8811 	msr	BASEPRI, r3
 800179e:	f3bf 8f6f 	isb	sy
 80017a2:	f3bf 8f4f 	dsb	sy
 80017a6:	e7fe      	b.n	80017a6 <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
 80017a8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80017aa:	b943      	cbnz	r3, 80017be <xTaskPriorityDisinherit+0x3a>
 80017ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b0:	f383 8811 	msr	BASEPRI, r3
 80017b4:	f3bf 8f6f 	isb	sy
 80017b8:	f3bf 8f4f 	dsb	sy
 80017bc:	e7fe      	b.n	80017bc <xTaskPriorityDisinherit+0x38>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80017be:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80017c0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 80017c2:	3b01      	subs	r3, #1

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80017c4:	4291      	cmp	r1, r2
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 80017c6:	6503      	str	r3, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80017c8:	d0df      	beq.n	800178a <xTaskPriorityDisinherit+0x6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1dd      	bne.n	800178a <xTaskPriorityDisinherit+0x6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80017ce:	1d05      	adds	r5, r0, #4
 80017d0:	4628      	mov	r0, r5
 80017d2:	f000 fce7 	bl	80021a4 <uxListRemove>
 80017d6:	4e11      	ldr	r6, [pc, #68]	; (800181c <xTaskPriorityDisinherit+0x98>)
 80017d8:	4a11      	ldr	r2, [pc, #68]	; (8001820 <xTaskPriorityDisinherit+0x9c>)
 80017da:	b950      	cbnz	r0, 80017f2 <xTaskPriorityDisinherit+0x6e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80017dc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80017de:	2114      	movs	r1, #20
 80017e0:	4379      	muls	r1, r7
 80017e2:	5873      	ldr	r3, [r6, r1]
 80017e4:	b92b      	cbnz	r3, 80017f2 <xTaskPriorityDisinherit+0x6e>
 80017e6:	6810      	ldr	r0, [r2, #0]
 80017e8:	2301      	movs	r3, #1
 80017ea:	40bb      	lsls	r3, r7
 80017ec:	ea20 0303 	bic.w	r3, r0, r3
 80017f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80017f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
 80017f4:	6810      	ldr	r0, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80017f6:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017f8:	f1c3 0107 	rsb	r1, r3, #7
 80017fc:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80017fe:	2401      	movs	r4, #1
 8001800:	fa04 f103 	lsl.w	r1, r4, r3
 8001804:	4308      	orrs	r0, r1
 8001806:	6010      	str	r0, [r2, #0]
 8001808:	2014      	movs	r0, #20
 800180a:	fb00 6003 	mla	r0, r0, r3, r6
 800180e:	4629      	mov	r1, r5
 8001810:	f000 fca4 	bl	800215c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8001814:	4620      	mov	r0, r4
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8001816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001818:	20000644 	.word	0x20000644
 800181c:	200005b4 	.word	0x200005b4
 8001820:	20000698 	.word	0x20000698

08001824 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <pvTaskIncrementMutexHeldCount+0x14>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	b11a      	cbz	r2, 8001832 <pvTaskIncrementMutexHeldCount+0xe>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800182a:	6819      	ldr	r1, [r3, #0]
 800182c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800182e:	3201      	adds	r2, #1
 8001830:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 8001832:	6818      	ldr	r0, [r3, #0]
	}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000644 	.word	0x20000644

0800183c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800183c:	b538      	push	{r3, r4, r5, lr}
 800183e:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001840:	6c02      	ldr	r2, [r0, #64]	; 0x40

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001842:	4604      	mov	r4, r0
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001844:	b932      	cbnz	r2, 8001854 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001846:	6805      	ldr	r5, [r0, #0]
 8001848:	bb45      	cbnz	r5, 800189c <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800184a:	6840      	ldr	r0, [r0, #4]
 800184c:	f7ff ff9a 	bl	8001784 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8001850:	6065      	str	r5, [r4, #4]
 8001852:	e024      	b.n	800189e <prvCopyDataToQueue+0x62>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001854:	b96d      	cbnz	r5, 8001872 <prvCopyDataToQueue+0x36>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001856:	6880      	ldr	r0, [r0, #8]
 8001858:	f002 fd74 	bl	8004344 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800185c:	68a2      	ldr	r2, [r4, #8]
 800185e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001860:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001862:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001864:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001866:	4293      	cmp	r3, r2
 8001868:	d318      	bcc.n	800189c <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 800186e:	4628      	mov	r0, r5
 8001870:	e015      	b.n	800189e <prvCopyDataToQueue+0x62>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001872:	68c0      	ldr	r0, [r0, #12]
 8001874:	f002 fd66 	bl	8004344 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001878:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800187a:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800187c:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800187e:	425b      	negs	r3, r3
 8001880:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001882:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001884:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001886:	bf3e      	ittt	cc
 8001888:	6862      	ldrcc	r2, [r4, #4]
 800188a:	189b      	addcc	r3, r3, r2
 800188c:	60e3      	strcc	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800188e:	2d02      	cmp	r5, #2
 8001890:	d104      	bne.n	800189c <prvCopyDataToQueue+0x60>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001892:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001894:	b113      	cbz	r3, 800189c <prvCopyDataToQueue+0x60>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8001896:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001898:	3b01      	subs	r3, #1
 800189a:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 800189c:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800189e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018a0:	3301      	adds	r3, #1
 80018a2:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 80018a4:	bd38      	pop	{r3, r4, r5, pc}

080018a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80018a6:	4603      	mov	r3, r0
 80018a8:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80018aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80018ac:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80018ae:	b162      	cbz	r2, 80018ca <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80018b0:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80018b2:	685c      	ldr	r4, [r3, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80018b4:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80018b6:	42a1      	cmp	r1, r4

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80018b8:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80018ba:	bf24      	itt	cs
 80018bc:	6819      	ldrcs	r1, [r3, #0]
 80018be:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80018c0:	68d9      	ldr	r1, [r3, #12]
	}
}
 80018c2:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80018c6:	f002 bd3d 	b.w	8004344 <memcpy>
	}
}
 80018ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80018d0:	b538      	push	{r3, r4, r5, lr}
 80018d2:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80018d4:	f000 fafe 	bl	8001ed4 <vPortEnterCritical>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018d8:	f104 0524 	add.w	r5, r4, #36	; 0x24
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80018dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80018de:	2b00      	cmp	r3, #0
 80018e0:	dd0b      	ble.n	80018fa <prvUnlockQueue+0x2a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018e4:	b14b      	cbz	r3, 80018fa <prvUnlockQueue+0x2a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018e6:	4628      	mov	r0, r5
 80018e8:	f7ff fe64 	bl	80015b4 <xTaskRemoveFromEventList>
 80018ec:	b108      	cbz	r0, 80018f2 <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 80018ee:	f7ff feed 	bl	80016cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 80018f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80018f4:	3b01      	subs	r3, #1
 80018f6:	64a3      	str	r3, [r4, #72]	; 0x48
 80018f8:	e7f0      	b.n	80018dc <prvUnlockQueue+0xc>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
 80018fe:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8001900:	f000 fb0a 	bl	8001f18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001904:	f000 fae6 	bl	8001ed4 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001908:	f104 0510 	add.w	r5, r4, #16
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800190c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800190e:	2b00      	cmp	r3, #0
 8001910:	dd0b      	ble.n	800192a <prvUnlockQueue+0x5a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001912:	6923      	ldr	r3, [r4, #16]
 8001914:	b14b      	cbz	r3, 800192a <prvUnlockQueue+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001916:	4628      	mov	r0, r5
 8001918:	f7ff fe4c 	bl	80015b4 <xTaskRemoveFromEventList>
 800191c:	b108      	cbz	r0, 8001922 <prvUnlockQueue+0x52>
				{
					vTaskMissedYield();
 800191e:	f7ff fed5 	bl	80016cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 8001922:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001924:	3b01      	subs	r3, #1
 8001926:	6463      	str	r3, [r4, #68]	; 0x44
 8001928:	e7f0      	b.n	800190c <prvUnlockQueue+0x3c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8001930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 8001934:	f000 baf0 	b.w	8001f18 <vPortExitCritical>

08001938 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001938:	b538      	push	{r3, r4, r5, lr}
 800193a:	460d      	mov	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800193c:	4604      	mov	r4, r0
 800193e:	b940      	cbnz	r0, 8001952 <xQueueGenericReset+0x1a>
 8001940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001944:	f383 8811 	msr	BASEPRI, r3
 8001948:	f3bf 8f6f 	isb	sy
 800194c:	f3bf 8f4f 	dsb	sy
 8001950:	e7fe      	b.n	8001950 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8001952:	f000 fabf 	bl	8001ed4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001956:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001958:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800195a:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800195c:	60a2      	str	r2, [r4, #8]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800195e:	4343      	muls	r3, r0
 8001960:	18d1      	adds	r1, r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001962:	1a1b      	subs	r3, r3, r0
 8001964:	4413      	add	r3, r2

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001966:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001968:	60e3      	str	r3, [r4, #12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800196a:	2100      	movs	r1, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 800196c:	f04f 33ff 	mov.w	r3, #4294967295
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001970:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8001972:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8001974:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8001976:	b985      	cbnz	r5, 800199a <xQueueGenericReset+0x62>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001978:	6923      	ldr	r3, [r4, #16]
 800197a:	b1b3      	cbz	r3, 80019aa <xQueueGenericReset+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800197c:	f104 0010 	add.w	r0, r4, #16
 8001980:	f7ff fe18 	bl	80015b4 <xTaskRemoveFromEventList>
 8001984:	2801      	cmp	r0, #1
 8001986:	d110      	bne.n	80019aa <xQueueGenericReset+0x72>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <xQueueGenericReset+0x7c>)
 800198a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	f3bf 8f4f 	dsb	sy
 8001994:	f3bf 8f6f 	isb	sy
 8001998:	e007      	b.n	80019aa <xQueueGenericReset+0x72>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800199a:	f104 0010 	add.w	r0, r4, #16
 800199e:	f000 fbcf 	bl	8002140 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80019a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80019a6:	f000 fbcb 	bl	8002140 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80019aa:	f000 fab5 	bl	8001f18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 80019ae:	2001      	movs	r0, #1
 80019b0:	bd38      	pop	{r3, r4, r5, pc}
 80019b2:	bf00      	nop
 80019b4:	e000ed04 	.word	0xe000ed04

080019b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 80019b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ba:	460d      	mov	r5, r1
 80019bc:	4617      	mov	r7, r2

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80019be:	4606      	mov	r6, r0
 80019c0:	b940      	cbnz	r0, 80019d4 <xQueueGenericCreate+0x1c>
 80019c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c6:	f383 8811 	msr	BASEPRI, r3
 80019ca:	f3bf 8f6f 	isb	sy
 80019ce:	f3bf 8f4f 	dsb	sy
 80019d2:	e7fe      	b.n	80019d2 <xQueueGenericCreate+0x1a>

	if( uxItemSize == ( UBaseType_t ) 0 )
 80019d4:	b111      	cbz	r1, 80019dc <xQueueGenericCreate+0x24>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019d6:	4348      	muls	r0, r1
 80019d8:	3001      	adds	r0, #1
 80019da:	e000      	b.n	80019de <xQueueGenericCreate+0x26>
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
 80019dc:	4608      	mov	r0, r1
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80019de:	3054      	adds	r0, #84	; 0x54
 80019e0:	f000 fc14 	bl	800220c <pvPortMalloc>

	if( pxNewQueue != NULL )
 80019e4:	4604      	mov	r4, r0
 80019e6:	b130      	cbz	r0, 80019f6 <xQueueGenericCreate+0x3e>
	{
		if( uxItemSize == ( UBaseType_t ) 0 )
 80019e8:	b90d      	cbnz	r5, 80019ee <xQueueGenericCreate+0x36>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80019ea:	6020      	str	r0, [r4, #0]
 80019ec:	e00c      	b.n	8001a08 <xQueueGenericCreate+0x50>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80019ee:	f100 0354 	add.w	r3, r0, #84	; 0x54
 80019f2:	6003      	str	r3, [r0, #0]
 80019f4:	e008      	b.n	8001a08 <xQueueGenericCreate+0x50>
 80019f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019fa:	f383 8811 	msr	BASEPRI, r3
 80019fe:	f3bf 8f6f 	isb	sy
 8001a02:	f3bf 8f4f 	dsb	sy
 8001a06:	e7fe      	b.n	8001a06 <xQueueGenericCreate+0x4e>
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
 8001a08:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 8001a0a:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f7ff ff92 	bl	8001938 <xQueueGenericReset>

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
 8001a14:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
	}

	configASSERT( xReturn );

	return xReturn;
}
 8001a18:	4620      	mov	r0, r4
 8001a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001a1c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001a1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a20:	4689      	mov	r9, r1
 8001a22:	9201      	str	r2, [sp, #4]
 8001a24:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001a26:	4604      	mov	r4, r0
 8001a28:	b940      	cbnz	r0, 8001a3c <xQueueGenericSend+0x20>
 8001a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a2e:	f383 8811 	msr	BASEPRI, r3
 8001a32:	f3bf 8f6f 	isb	sy
 8001a36:	f3bf 8f4f 	dsb	sy
 8001a3a:	e7fe      	b.n	8001a3a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a3c:	b951      	cbnz	r1, 8001a54 <xQueueGenericSend+0x38>
 8001a3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a40:	b143      	cbz	r3, 8001a54 <xQueueGenericSend+0x38>
 8001a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a46:	f383 8811 	msr	BASEPRI, r3
 8001a4a:	f3bf 8f6f 	isb	sy
 8001a4e:	f3bf 8f4f 	dsb	sy
 8001a52:	e7fe      	b.n	8001a52 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001a54:	2f02      	cmp	r7, #2
 8001a56:	d10b      	bne.n	8001a70 <xQueueGenericSend+0x54>
 8001a58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d008      	beq.n	8001a70 <xQueueGenericSend+0x54>
 8001a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a62:	f383 8811 	msr	BASEPRI, r3
 8001a66:	f3bf 8f6f 	isb	sy
 8001a6a:	f3bf 8f4f 	dsb	sy
 8001a6e:	e7fe      	b.n	8001a6e <xQueueGenericSend+0x52>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001a70:	f7ff fe32 	bl	80016d8 <xTaskGetSchedulerState>
 8001a74:	b910      	cbnz	r0, 8001a7c <xQueueGenericSend+0x60>
 8001a76:	9e01      	ldr	r6, [sp, #4]
 8001a78:	b10e      	cbz	r6, 8001a7e <xQueueGenericSend+0x62>
 8001a7a:	e073      	b.n	8001b64 <xQueueGenericSend+0x148>
 8001a7c:	2600      	movs	r6, #0
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 8001a7e:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8001b7c <xQueueGenericSend+0x160>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8001a82:	f04f 0800 	mov.w	r8, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001a86:	f000 fa25 	bl	8001ed4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001a8a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001a8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d301      	bcc.n	8001a96 <xQueueGenericSend+0x7a>
 8001a92:	2f02      	cmp	r7, #2
 8001a94:	d11a      	bne.n	8001acc <xQueueGenericSend+0xb0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001a96:	463a      	mov	r2, r7
 8001a98:	4649      	mov	r1, r9
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	f7ff fece 	bl	800183c <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001aa2:	b133      	cbz	r3, 8001ab2 <xQueueGenericSend+0x96>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8001aa4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001aa8:	f7ff fd84 	bl	80015b4 <xTaskRemoveFromEventList>
 8001aac:	2801      	cmp	r0, #1
 8001aae:	d109      	bne.n	8001ac4 <xQueueGenericSend+0xa8>
 8001ab0:	e000      	b.n	8001ab4 <xQueueGenericSend+0x98>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001ab2:	b138      	cbz	r0, 8001ac4 <xQueueGenericSend+0xa8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001ab4:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <xQueueGenericSend+0x160>)
 8001ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	f3bf 8f4f 	dsb	sy
 8001ac0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001ac4:	f000 fa28 	bl	8001f18 <vPortExitCritical>
				return pdPASS;
 8001ac8:	2001      	movs	r0, #1
 8001aca:	e054      	b.n	8001b76 <xQueueGenericSend+0x15a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001acc:	9d01      	ldr	r5, [sp, #4]
 8001ace:	b91d      	cbnz	r5, 8001ad8 <xQueueGenericSend+0xbc>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001ad0:	f000 fa22 	bl	8001f18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001ad4:	4628      	mov	r0, r5
 8001ad6:	e04e      	b.n	8001b76 <xQueueGenericSend+0x15a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001ad8:	b916      	cbnz	r6, 8001ae0 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001ada:	a802      	add	r0, sp, #8
 8001adc:	f7ff fdac 	bl	8001638 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001ae0:	f000 fa1a 	bl	8001f18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ae4:	f7ff fb64 	bl	80011b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ae8:	f000 f9f4 	bl	8001ed4 <vPortEnterCritical>
 8001aec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001aee:	3301      	adds	r3, #1
 8001af0:	bf08      	it	eq
 8001af2:	f8c4 8044 	streq.w	r8, [r4, #68]	; 0x44
 8001af6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001af8:	3301      	adds	r3, #1
 8001afa:	bf08      	it	eq
 8001afc:	f8c4 8048 	streq.w	r8, [r4, #72]	; 0x48
 8001b00:	f000 fa0a 	bl	8001f18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b04:	a901      	add	r1, sp, #4
 8001b06:	a802      	add	r0, sp, #8
 8001b08:	f7ff fda6 	bl	8001658 <xTaskCheckForTimeOut>
 8001b0c:	bb18      	cbnz	r0, 8001b56 <xQueueGenericSend+0x13a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001b0e:	f000 f9e1 	bl	8001ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001b12:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001b14:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001b16:	f000 f9ff 	bl	8001f18 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001b1a:	42ae      	cmp	r6, r5
 8001b1c:	d115      	bne.n	8001b4a <xQueueGenericSend+0x12e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001b1e:	9901      	ldr	r1, [sp, #4]
 8001b20:	f104 0010 	add.w	r0, r4, #16
 8001b24:	f7ff fd0e 	bl	8001544 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f7ff fed1 	bl	80018d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001b2e:	f7ff fbdf 	bl	80012f0 <xTaskResumeAll>
 8001b32:	b108      	cbz	r0, 8001b38 <xQueueGenericSend+0x11c>
 8001b34:	2601      	movs	r6, #1
 8001b36:	e7a6      	b.n	8001a86 <xQueueGenericSend+0x6a>
				{
					portYIELD_WITHIN_API();
 8001b38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b3c:	f8ca 3000 	str.w	r3, [sl]
 8001b40:	f3bf 8f4f 	dsb	sy
 8001b44:	f3bf 8f6f 	isb	sy
 8001b48:	e7f4      	b.n	8001b34 <xQueueGenericSend+0x118>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f7ff fec0 	bl	80018d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001b50:	f7ff fbce 	bl	80012f0 <xTaskResumeAll>
 8001b54:	e7ee      	b.n	8001b34 <xQueueGenericSend+0x118>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7ff feba 	bl	80018d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001b5c:	f7ff fbc8 	bl	80012f0 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001b60:	2000      	movs	r0, #0
 8001b62:	e008      	b.n	8001b76 <xQueueGenericSend+0x15a>
 8001b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b68:	f383 8811 	msr	BASEPRI, r3
 8001b6c:	f3bf 8f6f 	isb	sy
 8001b70:	f3bf 8f4f 	dsb	sy
 8001b74:	e7fe      	b.n	8001b74 <xQueueGenericSend+0x158>
		}
	}
}
 8001b76:	b004      	add	sp, #16
 8001b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b7c:	e000ed04 	.word	0xe000ed04

08001b80 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b84:	460e      	mov	r6, r1
 8001b86:	4690      	mov	r8, r2
 8001b88:	461d      	mov	r5, r3
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001b8a:	4604      	mov	r4, r0
 8001b8c:	b940      	cbnz	r0, 8001ba0 <xQueueGenericSendFromISR+0x20>
 8001b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b92:	f383 8811 	msr	BASEPRI, r3
 8001b96:	f3bf 8f6f 	isb	sy
 8001b9a:	f3bf 8f4f 	dsb	sy
 8001b9e:	e7fe      	b.n	8001b9e <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ba0:	b951      	cbnz	r1, 8001bb8 <xQueueGenericSendFromISR+0x38>
 8001ba2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001ba4:	b143      	cbz	r3, 8001bb8 <xQueueGenericSendFromISR+0x38>
 8001ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001baa:	f383 8811 	msr	BASEPRI, r3
 8001bae:	f3bf 8f6f 	isb	sy
 8001bb2:	f3bf 8f4f 	dsb	sy
 8001bb6:	e7fe      	b.n	8001bb6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001bb8:	2d02      	cmp	r5, #2
 8001bba:	d10b      	bne.n	8001bd4 <xQueueGenericSendFromISR+0x54>
 8001bbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d008      	beq.n	8001bd4 <xQueueGenericSendFromISR+0x54>
 8001bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc6:	f383 8811 	msr	BASEPRI, r3
 8001bca:	f3bf 8f6f 	isb	sy
 8001bce:	f3bf 8f4f 	dsb	sy
 8001bd2:	e7fe      	b.n	8001bd2 <xQueueGenericSendFromISR+0x52>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001bd4:	f000 fa86 	bl	80020e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001bd8:	f3ef 8711 	mrs	r7, BASEPRI
 8001bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be0:	f383 8811 	msr	BASEPRI, r3
 8001be4:	f3bf 8f6f 	isb	sy
 8001be8:	f3bf 8f4f 	dsb	sy
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001bec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001bee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d301      	bcc.n	8001bf8 <xQueueGenericSendFromISR+0x78>
 8001bf4:	2d02      	cmp	r5, #2
 8001bf6:	d11a      	bne.n	8001c2e <xQueueGenericSendFromISR+0xae>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001bf8:	462a      	mov	r2, r5
 8001bfa:	4631      	mov	r1, r6
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	f7ff fe1d 	bl	800183c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8001c02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001c04:	3301      	adds	r3, #1
 8001c06:	d10d      	bne.n	8001c24 <xQueueGenericSendFromISR+0xa4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c0a:	b173      	cbz	r3, 8001c2a <xQueueGenericSendFromISR+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001c10:	f7ff fcd0 	bl	80015b4 <xTaskRemoveFromEventList>
 8001c14:	b148      	cbz	r0, 8001c2a <xQueueGenericSendFromISR+0xaa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001c16:	f1b8 0f00 	cmp.w	r8, #0
 8001c1a:	d006      	beq.n	8001c2a <xQueueGenericSendFromISR+0xaa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f8c8 0000 	str.w	r0, [r8]
 8001c22:	e005      	b.n	8001c30 <xQueueGenericSendFromISR+0xb0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8001c24:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001c26:	3301      	adds	r3, #1
 8001c28:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	e000      	b.n	8001c30 <xQueueGenericSendFromISR+0xb0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001c2e:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001c30:	f387 8811 	msr	BASEPRI, r7
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 8001c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001c38 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8001c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c3c:	4688      	mov	r8, r1
 8001c3e:	9201      	str	r2, [sp, #4]
 8001c40:	469a      	mov	sl, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001c42:	4604      	mov	r4, r0
 8001c44:	b940      	cbnz	r0, 8001c58 <xQueueGenericReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c4a:	f383 8811 	msr	BASEPRI, r3
 8001c4e:	f3bf 8f6f 	isb	sy
 8001c52:	f3bf 8f4f 	dsb	sy
 8001c56:	e7fe      	b.n	8001c56 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c58:	b951      	cbnz	r1, 8001c70 <xQueueGenericReceive+0x38>
 8001c5a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001c5c:	b143      	cbz	r3, 8001c70 <xQueueGenericReceive+0x38>
 8001c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c62:	f383 8811 	msr	BASEPRI, r3
 8001c66:	f3bf 8f6f 	isb	sy
 8001c6a:	f3bf 8f4f 	dsb	sy
 8001c6e:	e7fe      	b.n	8001c6e <xQueueGenericReceive+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c70:	f7ff fd32 	bl	80016d8 <xTaskGetSchedulerState>
 8001c74:	b910      	cbnz	r0, 8001c7c <xQueueGenericReceive+0x44>
 8001c76:	9e01      	ldr	r6, [sp, #4]
 8001c78:	b10e      	cbz	r6, 8001c7e <xQueueGenericReceive+0x46>
 8001c7a:	e085      	b.n	8001d88 <xQueueGenericReceive+0x150>
 8001c7c:	2600      	movs	r6, #0

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 8001c7e:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8001da0 <xQueueGenericReceive+0x168>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8001c82:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001c84:	f000 f926 	bl	8001ed4 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001c88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c8a:	b363      	cbz	r3, 8001ce6 <xQueueGenericReceive+0xae>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001c8c:	4641      	mov	r1, r8
 8001c8e:	4620      	mov	r0, r4
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001c90:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001c92:	f7ff fe08 	bl	80018a6 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001c96:	f1ba 0f00 	cmp.w	sl, #0
 8001c9a:	d110      	bne.n	8001cbe <xQueueGenericReceive+0x86>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8001c9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	b913      	cbnz	r3, 8001cac <xQueueGenericReceive+0x74>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001ca6:	f7ff fdbd 	bl	8001824 <pvTaskIncrementMutexHeldCount>
 8001caa:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cac:	6923      	ldr	r3, [r4, #16]
 8001cae:	b1b3      	cbz	r3, 8001cde <xQueueGenericReceive+0xa6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001cb0:	f104 0010 	add.w	r0, r4, #16
 8001cb4:	f7ff fc7e 	bl	80015b4 <xTaskRemoveFromEventList>
 8001cb8:	2801      	cmp	r0, #1
 8001cba:	d110      	bne.n	8001cde <xQueueGenericReceive+0xa6>
 8001cbc:	e007      	b.n	8001cce <xQueueGenericReceive+0x96>
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001cc0:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001cc2:	b163      	cbz	r3, 8001cde <xQueueGenericReceive+0xa6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001cc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001cc8:	f7ff fc74 	bl	80015b4 <xTaskRemoveFromEventList>
 8001ccc:	b138      	cbz	r0, 8001cde <xQueueGenericReceive+0xa6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8001cce:	4b34      	ldr	r3, [pc, #208]	; (8001da0 <xQueueGenericReceive+0x168>)
 8001cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	f3bf 8f4f 	dsb	sy
 8001cda:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8001cde:	f000 f91b 	bl	8001f18 <vPortExitCritical>
				return pdPASS;
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	e059      	b.n	8001d9a <xQueueGenericReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ce6:	9d01      	ldr	r5, [sp, #4]
 8001ce8:	b91d      	cbnz	r5, 8001cf2 <xQueueGenericReceive+0xba>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001cea:	f000 f915 	bl	8001f18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001cee:	4628      	mov	r0, r5
 8001cf0:	e053      	b.n	8001d9a <xQueueGenericReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001cf2:	b916      	cbnz	r6, 8001cfa <xQueueGenericReceive+0xc2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001cf4:	a802      	add	r0, sp, #8
 8001cf6:	f7ff fc9f 	bl	8001638 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001cfa:	f000 f90d 	bl	8001f18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001cfe:	f7ff fa57 	bl	80011b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001d02:	f000 f8e7 	bl	8001ed4 <vPortEnterCritical>
 8001d06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d08:	3301      	adds	r3, #1
 8001d0a:	bf08      	it	eq
 8001d0c:	6467      	streq	r7, [r4, #68]	; 0x44
 8001d0e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001d10:	3301      	adds	r3, #1
 8001d12:	bf08      	it	eq
 8001d14:	64a7      	streq	r7, [r4, #72]	; 0x48
 8001d16:	f000 f8ff 	bl	8001f18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d1a:	a901      	add	r1, sp, #4
 8001d1c:	a802      	add	r0, sp, #8
 8001d1e:	f7ff fc9b 	bl	8001658 <xTaskCheckForTimeOut>
 8001d22:	bb50      	cbnz	r0, 8001d7a <xQueueGenericReceive+0x142>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001d24:	f000 f8d6 	bl	8001ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001d28:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001d2a:	f000 f8f5 	bl	8001f18 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001d2e:	b9f5      	cbnz	r5, 8001d6e <xQueueGenericReceive+0x136>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	b933      	cbnz	r3, 8001d42 <xQueueGenericReceive+0x10a>
					{
						taskENTER_CRITICAL();
 8001d34:	f000 f8ce 	bl	8001ed4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001d38:	6860      	ldr	r0, [r4, #4]
 8001d3a:	f7ff fcdd 	bl	80016f8 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8001d3e:	f000 f8eb 	bl	8001f18 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001d42:	9901      	ldr	r1, [sp, #4]
 8001d44:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001d48:	f7ff fbfc 	bl	8001544 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f7ff fdbf 	bl	80018d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001d52:	f7ff facd 	bl	80012f0 <xTaskResumeAll>
 8001d56:	b108      	cbz	r0, 8001d5c <xQueueGenericReceive+0x124>
 8001d58:	2601      	movs	r6, #1
 8001d5a:	e793      	b.n	8001c84 <xQueueGenericReceive+0x4c>
				{
					portYIELD_WITHIN_API();
 8001d5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d60:	f8c9 3000 	str.w	r3, [r9]
 8001d64:	f3bf 8f4f 	dsb	sy
 8001d68:	f3bf 8f6f 	isb	sy
 8001d6c:	e7f4      	b.n	8001d58 <xQueueGenericReceive+0x120>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f7ff fdae 	bl	80018d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001d74:	f7ff fabc 	bl	80012f0 <xTaskResumeAll>
 8001d78:	e7ee      	b.n	8001d58 <xQueueGenericReceive+0x120>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	f7ff fda8 	bl	80018d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001d80:	f7ff fab6 	bl	80012f0 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8001d84:	2000      	movs	r0, #0
 8001d86:	e008      	b.n	8001d9a <xQueueGenericReceive+0x162>
 8001d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d8c:	f383 8811 	msr	BASEPRI, r3
 8001d90:	f3bf 8f6f 	isb	sy
 8001d94:	f3bf 8f4f 	dsb	sy
 8001d98:	e7fe      	b.n	8001d98 <xQueueGenericReceive+0x160>
		}
	}
}
 8001d9a:	b004      	add	sp, #16
 8001d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001da0:	e000ed04 	.word	0xe000ed04

08001da4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001da6:	460e      	mov	r6, r1
 8001da8:	4617      	mov	r7, r2
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001daa:	4604      	mov	r4, r0
 8001dac:	b940      	cbnz	r0, 8001dc0 <xQueueReceiveFromISR+0x1c>
 8001dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db2:	f383 8811 	msr	BASEPRI, r3
 8001db6:	f3bf 8f6f 	isb	sy
 8001dba:	f3bf 8f4f 	dsb	sy
 8001dbe:	e7fe      	b.n	8001dbe <xQueueReceiveFromISR+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001dc0:	b951      	cbnz	r1, 8001dd8 <xQueueReceiveFromISR+0x34>
 8001dc2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001dc4:	b143      	cbz	r3, 8001dd8 <xQueueReceiveFromISR+0x34>
 8001dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dca:	f383 8811 	msr	BASEPRI, r3
 8001dce:	f3bf 8f6f 	isb	sy
 8001dd2:	f3bf 8f4f 	dsb	sy
 8001dd6:	e7fe      	b.n	8001dd6 <xQueueReceiveFromISR+0x32>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001dd8:	f000 f984 	bl	80020e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001ddc:	f3ef 8511 	mrs	r5, BASEPRI
 8001de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de4:	f383 8811 	msr	BASEPRI, r3
 8001de8:	f3bf 8f6f 	isb	sy
 8001dec:	f3bf 8f4f 	dsb	sy

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001df0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001df2:	b1c0      	cbz	r0, 8001e26 <xQueueReceiveFromISR+0x82>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001df4:	4631      	mov	r1, r6
 8001df6:	4620      	mov	r0, r4
 8001df8:	f7ff fd55 	bl	80018a6 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 8001dfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	63a3      	str	r3, [r4, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
 8001e02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e04:	3301      	adds	r3, #1
 8001e06:	d10a      	bne.n	8001e1e <xQueueReceiveFromISR+0x7a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e08:	6923      	ldr	r3, [r4, #16]
 8001e0a:	b15b      	cbz	r3, 8001e24 <xQueueReceiveFromISR+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e0c:	f104 0010 	add.w	r0, r4, #16
 8001e10:	f7ff fbd0 	bl	80015b4 <xTaskRemoveFromEventList>
 8001e14:	b130      	cbz	r0, 8001e24 <xQueueReceiveFromISR+0x80>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8001e16:	b12f      	cbz	r7, 8001e24 <xQueueReceiveFromISR+0x80>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8001e18:	2001      	movs	r0, #1
 8001e1a:	6038      	str	r0, [r7, #0]
 8001e1c:	e003      	b.n	8001e26 <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
 8001e1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e20:	3301      	adds	r3, #1
 8001e22:	6463      	str	r3, [r4, #68]	; 0x44
			}

			xReturn = pdPASS;
 8001e24:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001e26:	f385 8811 	msr	BASEPRI, r5
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 8001e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e2c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <prvTaskExitError+0x2c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3301      	adds	r3, #1
 8001e32:	d008      	beq.n	8001e46 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e38:	f383 8811 	msr	BASEPRI, r3
 8001e3c:	f3bf 8f6f 	isb	sy
 8001e40:	f3bf 8f4f 	dsb	sy
 8001e44:	e7fe      	b.n	8001e44 <prvTaskExitError+0x18>
 8001e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e4a:	f383 8811 	msr	BASEPRI, r3
 8001e4e:	f3bf 8f6f 	isb	sy
 8001e52:	f3bf 8f4f 	dsb	sy
 8001e56:	e7fe      	b.n	8001e56 <prvTaskExitError+0x2a>
 8001e58:	20000000 	.word	0x20000000

08001e5c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001e5c:	4806      	ldr	r0, [pc, #24]	; (8001e78 <prvPortStartFirstTask+0x1c>)
 8001e5e:	6800      	ldr	r0, [r0, #0]
 8001e60:	6800      	ldr	r0, [r0, #0]
 8001e62:	f380 8808 	msr	MSP, r0
 8001e66:	b662      	cpsie	i
 8001e68:	b661      	cpsie	f
 8001e6a:	f3bf 8f4f 	dsb	sy
 8001e6e:	f3bf 8f6f 	isb	sy
 8001e72:	df00      	svc	0
 8001e74:	bf00      	nop
 8001e76:	0000      	.short	0x0000
 8001e78:	e000ed08 	.word	0xe000ed08

08001e7c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001e7c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001e8c <vPortEnableVFP+0x10>
 8001e80:	6801      	ldr	r1, [r0, #0]
 8001e82:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001e86:	6001      	str	r1, [r0, #0]
 8001e88:	4770      	bx	lr
 8001e8a:	0000      	.short	0x0000
 8001e8c:	e000ed88 	.word	0xe000ed88

08001e90 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001e90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8001e94:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <pxPortInitialiseStack+0x20>)
 8001e9a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001e9e:	f06f 0302 	mvn.w	r3, #2
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001ea2:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001ea6:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8001eaa:	3844      	subs	r0, #68	; 0x44
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	08001e2d 	.word	0x08001e2d

08001eb4 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <pxCurrentTCBConst2>)
 8001eb6:	6819      	ldr	r1, [r3, #0]
 8001eb8:	6808      	ldr	r0, [r1, #0]
 8001eba:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ebe:	f380 8809 	msr	PSP, r0
 8001ec2:	f3bf 8f6f 	isb	sy
 8001ec6:	f04f 0000 	mov.w	r0, #0
 8001eca:	f380 8811 	msr	BASEPRI, r0
 8001ece:	4770      	bx	lr

08001ed0 <pxCurrentTCBConst2>:
 8001ed0:	20000644 	.word	0x20000644

08001ed4 <vPortEnterCritical>:
 8001ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed8:	f383 8811 	msr	BASEPRI, r3
 8001edc:	f3bf 8f6f 	isb	sy
 8001ee0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <vPortEnterCritical+0x3c>)
 8001ee6:	6813      	ldr	r3, [r2, #0]
 8001ee8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001eea:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001eec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001eee:	d10d      	bne.n	8001f0c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <vPortEnterCritical+0x40>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001ef8:	d008      	beq.n	8001f0c <vPortEnterCritical+0x38>
 8001efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001efe:	f383 8811 	msr	BASEPRI, r3
 8001f02:	f3bf 8f6f 	isb	sy
 8001f06:	f3bf 8f4f 	dsb	sy
 8001f0a:	e7fe      	b.n	8001f0a <vPortEnterCritical+0x36>
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000000 	.word	0x20000000
 8001f14:	e000ed04 	.word	0xe000ed04

08001f18 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8001f18:	4a08      	ldr	r2, [pc, #32]	; (8001f3c <vPortExitCritical+0x24>)
 8001f1a:	6813      	ldr	r3, [r2, #0]
 8001f1c:	b943      	cbnz	r3, 8001f30 <vPortExitCritical+0x18>
 8001f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f22:	f383 8811 	msr	BASEPRI, r3
 8001f26:	f3bf 8f6f 	isb	sy
 8001f2a:	f3bf 8f4f 	dsb	sy
 8001f2e:	e7fe      	b.n	8001f2e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001f30:	3b01      	subs	r3, #1
 8001f32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001f34:	b90b      	cbnz	r3, 8001f3a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001f36:	f383 8811 	msr	BASEPRI, r3
 8001f3a:	4770      	bx	lr
 8001f3c:	20000000 	.word	0x20000000

08001f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001f40:	f3ef 8009 	mrs	r0, PSP
 8001f44:	f3bf 8f6f 	isb	sy
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <pxCurrentTCBConst>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	f01e 0f10 	tst.w	lr, #16
 8001f50:	bf08      	it	eq
 8001f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f5a:	6010      	str	r0, [r2, #0]
 8001f5c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001f60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001f64:	f380 8811 	msr	BASEPRI, r0
 8001f68:	f3bf 8f4f 	dsb	sy
 8001f6c:	f3bf 8f6f 	isb	sy
 8001f70:	f7ff faae 	bl	80014d0 <vTaskSwitchContext>
 8001f74:	f04f 0000 	mov.w	r0, #0
 8001f78:	f380 8811 	msr	BASEPRI, r0
 8001f7c:	bc08      	pop	{r3}
 8001f7e:	6819      	ldr	r1, [r3, #0]
 8001f80:	6808      	ldr	r0, [r1, #0]
 8001f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f86:	f01e 0f10 	tst.w	lr, #16
 8001f8a:	bf08      	it	eq
 8001f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001f90:	f380 8809 	msr	PSP, r0
 8001f94:	f3bf 8f6f 	isb	sy
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop

08001f9c <pxCurrentTCBConst>:
 8001f9c:	20000644 	.word	0x20000644

08001fa0 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001fa0:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001fa2:	f3ef 8311 	mrs	r3, BASEPRI
 8001fa6:	f04f 0250 	mov.w	r2, #80	; 0x50
 8001faa:	f382 8811 	msr	BASEPRI, r2
 8001fae:	f3bf 8f6f 	isb	sy
 8001fb2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001fb6:	f7ff f903 	bl	80011c0 <xTaskIncrementTick>
 8001fba:	b118      	cbz	r0, 8001fc4 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <xPortSysTickHandler+0x2c>)
 8001fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fc2:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f383 8811 	msr	BASEPRI, r3
 8001fca:	bd08      	pop	{r3, pc}
 8001fcc:	e000ed04 	.word	0xe000ed04

08001fd0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <vPortSetupTimerInterrupt+0x1c>)
 8001fd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fdc:	4a04      	ldr	r2, [pc, #16]	; (8001ff0 <vPortSetupTimerInterrupt+0x20>)
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <vPortSetupTimerInterrupt+0x24>)
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000004 	.word	0x20000004
 8001ff0:	e000e014 	.word	0xe000e014
 8001ff4:	e000e010 	.word	0xe000e010

08001ff8 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001ff8:	4b31      	ldr	r3, [pc, #196]	; (80020c0 <xPortStartScheduler+0xc8>)
 8001ffa:	4a32      	ldr	r2, [pc, #200]	; (80020c4 <xPortStartScheduler+0xcc>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001ffc:	b513      	push	{r0, r1, r4, lr}
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001ffe:	6819      	ldr	r1, [r3, #0]
 8002000:	4291      	cmp	r1, r2
 8002002:	d108      	bne.n	8002016 <xPortStartScheduler+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002008:	f383 8811 	msr	BASEPRI, r3
 800200c:	f3bf 8f6f 	isb	sy
 8002010:	f3bf 8f4f 	dsb	sy
 8002014:	e7fe      	b.n	8002014 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <xPortStartScheduler+0xd0>)
 800201a:	429a      	cmp	r2, r3
 800201c:	d108      	bne.n	8002030 <xPortStartScheduler+0x38>
 800201e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002022:	f383 8811 	msr	BASEPRI, r3
 8002026:	f3bf 8f6f 	isb	sy
 800202a:	f3bf 8f4f 	dsb	sy
 800202e:	e7fe      	b.n	800202e <xPortStartScheduler+0x36>
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002030:	4b26      	ldr	r3, [pc, #152]	; (80020cc <xPortStartScheduler+0xd4>)
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002038:	22ff      	movs	r2, #255	; 0xff
 800203a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800203c:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800203e:	4a24      	ldr	r2, [pc, #144]	; (80020d0 <xPortStartScheduler+0xd8>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002040:	b2db      	uxtb	r3, r3
 8002042:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002046:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800204a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800204e:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002050:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <xPortStartScheduler+0xdc>)
 8002052:	2207      	movs	r2, #7
 8002054:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002056:	2100      	movs	r1, #0
 8002058:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800205c:	0600      	lsls	r0, r0, #24
 800205e:	f102 34ff 	add.w	r4, r2, #4294967295
 8002062:	d508      	bpl.n	8002076 <xPortStartScheduler+0x7e>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002064:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002068:	0052      	lsls	r2, r2, #1
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	f88d 2003 	strb.w	r2, [sp, #3]
 8002070:	2101      	movs	r1, #1
 8002072:	4622      	mov	r2, r4
 8002074:	e7f0      	b.n	8002058 <xPortStartScheduler+0x60>
 8002076:	b101      	cbz	r1, 800207a <xPortStartScheduler+0x82>
 8002078:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	0212      	lsls	r2, r2, #8
 800207e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002082:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002084:	9b01      	ldr	r3, [sp, #4]
 8002086:	4a11      	ldr	r2, [pc, #68]	; (80020cc <xPortStartScheduler+0xd4>)
 8002088:	b2db      	uxtb	r3, r3
 800208a:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800208c:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <xPortStartScheduler+0xe0>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800209c:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800209e:	f7ff ff97 	bl	8001fd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <xPortStartScheduler+0xe4>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80020a8:	f7ff fee8 	bl	8001e7c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80020ac:	4a0c      	ldr	r2, [pc, #48]	; (80020e0 <xPortStartScheduler+0xe8>)
 80020ae:	6813      	ldr	r3, [r2, #0]
 80020b0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80020b4:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80020b6:	f7ff fed1 	bl	8001e5c <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80020ba:	f7ff feb7 	bl	8001e2c <prvTaskExitError>
 80020be:	bf00      	nop
 80020c0:	e000ed00 	.word	0xe000ed00
 80020c4:	410fc271 	.word	0x410fc271
 80020c8:	410fc270 	.word	0x410fc270
 80020cc:	e000e400 	.word	0xe000e400
 80020d0:	200006a0 	.word	0x200006a0
 80020d4:	200006a4 	.word	0x200006a4
 80020d8:	e000ed20 	.word	0xe000ed20
 80020dc:	20000000 	.word	0x20000000
 80020e0:	e000ef34 	.word	0xe000ef34

080020e4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80020e4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80020e8:	2b0f      	cmp	r3, #15
 80020ea:	d90e      	bls.n	800210a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80020ec:	4a10      	ldr	r2, [pc, #64]	; (8002130 <vPortValidateInterruptPriority+0x4c>)
 80020ee:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80020f0:	4a10      	ldr	r2, [pc, #64]	; (8002134 <vPortValidateInterruptPriority+0x50>)
 80020f2:	7812      	ldrb	r2, [r2, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d908      	bls.n	800210a <vPortValidateInterruptPriority+0x26>
 80020f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020fc:	f383 8811 	msr	BASEPRI, r3
 8002100:	f3bf 8f6f 	isb	sy
 8002104:	f3bf 8f4f 	dsb	sy
 8002108:	e7fe      	b.n	8002108 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <vPortValidateInterruptPriority+0x54>)
 800210c:	4a0b      	ldr	r2, [pc, #44]	; (800213c <vPortValidateInterruptPriority+0x58>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002116:	4293      	cmp	r3, r2
 8002118:	d908      	bls.n	800212c <vPortValidateInterruptPriority+0x48>
 800211a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211e:	f383 8811 	msr	BASEPRI, r3
 8002122:	f3bf 8f6f 	isb	sy
 8002126:	f3bf 8f4f 	dsb	sy
 800212a:	e7fe      	b.n	800212a <vPortValidateInterruptPriority+0x46>
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000e3f0 	.word	0xe000e3f0
 8002134:	200006a0 	.word	0x200006a0
 8002138:	e000ed0c 	.word	0xe000ed0c
 800213c:	200006a4 	.word	0x200006a4

08002140 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002140:	f100 0308 	add.w	r3, r0, #8
 8002144:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002146:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800214a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800214c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800214e:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002150:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002152:	6003      	str	r3, [r0, #0]
 8002154:	4770      	bx	lr

08002156 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002156:	2300      	movs	r3, #0
 8002158:	6103      	str	r3, [r0, #16]
 800215a:	4770      	bx	lr

0800215c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800215c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800215e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002168:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800216a:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800216c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800216e:	3301      	adds	r3, #1
 8002170:	6003      	str	r3, [r0, #0]
 8002172:	4770      	bx	lr

08002174 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002174:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002176:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002178:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800217a:	d101      	bne.n	8002180 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800217c:	6903      	ldr	r3, [r0, #16]
 800217e:	e007      	b.n	8002190 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002180:	f100 0308 	add.w	r3, r0, #8
 8002184:	685c      	ldr	r4, [r3, #4]
 8002186:	6825      	ldr	r5, [r4, #0]
 8002188:	42aa      	cmp	r2, r5
 800218a:	d301      	bcc.n	8002190 <vListInsert+0x1c>
 800218c:	4623      	mov	r3, r4
 800218e:	e7f9      	b.n	8002184 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002194:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002196:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002198:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800219a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800219c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800219e:	3301      	adds	r3, #1
 80021a0:	6003      	str	r3, [r0, #0]
 80021a2:	bd30      	pop	{r4, r5, pc}

080021a4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021a4:	6841      	ldr	r1, [r0, #4]
 80021a6:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80021a8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021aa:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021ac:	6882      	ldr	r2, [r0, #8]
 80021ae:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80021b0:	6859      	ldr	r1, [r3, #4]
 80021b2:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021b4:	bf08      	it	eq
 80021b6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80021b8:	2200      	movs	r2, #0
 80021ba:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	3801      	subs	r0, #1
 80021c0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80021c2:	4770      	bx	lr

080021c4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80021c4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <prvInsertBlockIntoFreeList+0x40>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	4282      	cmp	r2, r0
 80021cc:	d201      	bcs.n	80021d2 <prvInsertBlockIntoFreeList+0xe>
 80021ce:	4613      	mov	r3, r2
 80021d0:	e7fa      	b.n	80021c8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	185c      	adds	r4, r3, r1
 80021d6:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80021d8:	bf01      	itttt	eq
 80021da:	6840      	ldreq	r0, [r0, #4]
 80021dc:	1809      	addeq	r1, r1, r0
 80021de:	4618      	moveq	r0, r3
 80021e0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80021e2:	6841      	ldr	r1, [r0, #4]
 80021e4:	1844      	adds	r4, r0, r1
 80021e6:	42a2      	cmp	r2, r4
 80021e8:	d107      	bne.n	80021fa <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80021ea:	4c07      	ldr	r4, [pc, #28]	; (8002208 <prvInsertBlockIntoFreeList+0x44>)
 80021ec:	6824      	ldr	r4, [r4, #0]
 80021ee:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80021f0:	bf1f      	itttt	ne
 80021f2:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80021f4:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80021f6:	1909      	addne	r1, r1, r4
 80021f8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80021fa:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80021fc:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80021fe:	bf18      	it	ne
 8002200:	6018      	strne	r0, [r3, #0]
 8002202:	bd10      	pop	{r4, pc}
 8002204:	200006b0 	.word	0x200006b0
 8002208:	200006ac 	.word	0x200006ac

0800220c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800220c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002210:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8002212:	f7fe ffcd 	bl	80011b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002216:	4940      	ldr	r1, [pc, #256]	; (8002318 <pvPortMalloc+0x10c>)
 8002218:	4d40      	ldr	r5, [pc, #256]	; (800231c <pvPortMalloc+0x110>)
 800221a:	680b      	ldr	r3, [r1, #0]
 800221c:	bb0b      	cbnz	r3, 8002262 <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800221e:	4a40      	ldr	r2, [pc, #256]	; (8002320 <pvPortMalloc+0x114>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002220:	0756      	lsls	r6, r2, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002222:	bf1f      	itttt	ne
 8002224:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002226:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800222a:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 800222e:	1a1b      	subne	r3, r3, r0
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002230:	bf14      	ite	ne
 8002232:	4602      	movne	r2, r0
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002234:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002238:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800223a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800223c:	f023 0307 	bic.w	r3, r3, #7

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002240:	4e38      	ldr	r6, [pc, #224]	; (8002324 <pvPortMalloc+0x118>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 8002242:	600b      	str	r3, [r1, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 8002244:	2000      	movs	r0, #0
 8002246:	6070      	str	r0, [r6, #4]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002248:	6032      	str	r2, [r6, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 800224a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800224c:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800224e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002250:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002252:	4b35      	ldr	r3, [pc, #212]	; (8002328 <pvPortMalloc+0x11c>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002254:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002256:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002258:	4b34      	ldr	r3, [pc, #208]	; (800232c <pvPortMalloc+0x120>)
 800225a:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800225c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002260:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002262:	682f      	ldr	r7, [r5, #0]
 8002264:	4227      	tst	r7, r4
 8002266:	d146      	bne.n	80022f6 <pvPortMalloc+0xea>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002268:	2c00      	cmp	r4, #0
 800226a:	d045      	beq.n	80022f8 <pvPortMalloc+0xec>
			{
				xWantedSize += xHeapStructSize;
 800226c:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002270:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002272:	bf1c      	itt	ne
 8002274:	f023 0307 	bicne.w	r3, r3, #7
 8002278:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800227a:	2b00      	cmp	r3, #0
 800227c:	d039      	beq.n	80022f2 <pvPortMalloc+0xe6>
 800227e:	4a2b      	ldr	r2, [pc, #172]	; (800232c <pvPortMalloc+0x120>)
 8002280:	6816      	ldr	r6, [r2, #0]
 8002282:	42b3      	cmp	r3, r6
 8002284:	4690      	mov	r8, r2
 8002286:	d836      	bhi.n	80022f6 <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8002288:	4a26      	ldr	r2, [pc, #152]	; (8002324 <pvPortMalloc+0x118>)
 800228a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800228c:	6868      	ldr	r0, [r5, #4]
 800228e:	4283      	cmp	r3, r0
 8002290:	d803      	bhi.n	800229a <pvPortMalloc+0x8e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002292:	6809      	ldr	r1, [r1, #0]
 8002294:	428d      	cmp	r5, r1
 8002296:	d106      	bne.n	80022a6 <pvPortMalloc+0x9a>
 8002298:	e02d      	b.n	80022f6 <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800229a:	682c      	ldr	r4, [r5, #0]
 800229c:	2c00      	cmp	r4, #0
 800229e:	d0f8      	beq.n	8002292 <pvPortMalloc+0x86>
 80022a0:	462a      	mov	r2, r5
 80022a2:	4625      	mov	r5, r4
 80022a4:	e7f2      	b.n	800228c <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80022a6:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80022a8:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80022aa:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80022ac:	1ac2      	subs	r2, r0, r3
 80022ae:	2a10      	cmp	r2, #16
 80022b0:	d90f      	bls.n	80022d2 <pvPortMalloc+0xc6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80022b2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80022b4:	0741      	lsls	r1, r0, #29
 80022b6:	d008      	beq.n	80022ca <pvPortMalloc+0xbe>
 80022b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022bc:	f383 8811 	msr	BASEPRI, r3
 80022c0:	f3bf 8f6f 	isb	sy
 80022c4:	f3bf 8f4f 	dsb	sy
 80022c8:	e7fe      	b.n	80022c8 <pvPortMalloc+0xbc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80022ca:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80022cc:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80022ce:	f7ff ff79 	bl	80021c4 <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80022d2:	4915      	ldr	r1, [pc, #84]	; (8002328 <pvPortMalloc+0x11c>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80022d4:	686b      	ldr	r3, [r5, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80022d6:	6808      	ldr	r0, [r1, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80022d8:	1af2      	subs	r2, r6, r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80022da:	431f      	orrs	r7, r3
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80022dc:	4282      	cmp	r2, r0
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 80022de:	f04f 0300 	mov.w	r3, #0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80022e2:	f8c8 2000 	str.w	r2, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80022e6:	bf38      	it	cc
 80022e8:	600a      	strcc	r2, [r1, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80022ea:	3408      	adds	r4, #8
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80022ec:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80022ee:	602b      	str	r3, [r5, #0]
 80022f0:	e002      	b.n	80022f8 <pvPortMalloc+0xec>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80022f2:	461c      	mov	r4, r3
 80022f4:	e000      	b.n	80022f8 <pvPortMalloc+0xec>
 80022f6:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80022f8:	f7fe fffa 	bl	80012f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80022fc:	0763      	lsls	r3, r4, #29
 80022fe:	d008      	beq.n	8002312 <pvPortMalloc+0x106>
 8002300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002304:	f383 8811 	msr	BASEPRI, r3
 8002308:	f3bf 8f6f 	isb	sy
 800230c:	f3bf 8f4f 	dsb	sy
 8002310:	e7fe      	b.n	8002310 <pvPortMalloc+0x104>
	return pvReturn;
}
 8002312:	4620      	mov	r0, r4
 8002314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002318:	200006ac 	.word	0x200006ac
 800231c:	200042b8 	.word	0x200042b8
 8002320:	200006b8 	.word	0x200006b8
 8002324:	200006b0 	.word	0x200006b0
 8002328:	200042bc 	.word	0x200042bc
 800232c:	200006a8 	.word	0x200006a8

08002330 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002330:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8002332:	4604      	mov	r4, r0
 8002334:	b370      	cbz	r0, 8002394 <vPortFree+0x64>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002336:	4a18      	ldr	r2, [pc, #96]	; (8002398 <vPortFree+0x68>)
 8002338:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	4213      	tst	r3, r2
 8002340:	d108      	bne.n	8002354 <vPortFree+0x24>
 8002342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002346:	f383 8811 	msr	BASEPRI, r3
 800234a:	f3bf 8f6f 	isb	sy
 800234e:	f3bf 8f4f 	dsb	sy
 8002352:	e7fe      	b.n	8002352 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002354:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002358:	b141      	cbz	r1, 800236c <vPortFree+0x3c>
 800235a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235e:	f383 8811 	msr	BASEPRI, r3
 8002362:	f3bf 8f6f 	isb	sy
 8002366:	f3bf 8f4f 	dsb	sy
 800236a:	e7fe      	b.n	800236a <vPortFree+0x3a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800236c:	ea23 0302 	bic.w	r3, r3, r2
 8002370:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 8002374:	f7fe ff1c 	bl	80011b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002378:	4a08      	ldr	r2, [pc, #32]	; (800239c <vPortFree+0x6c>)
 800237a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800237e:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002380:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002384:	440b      	add	r3, r1
 8002386:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002388:	f7ff ff1c 	bl	80021c4 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800238c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 8002390:	f7fe bfae 	b.w	80012f0 <xTaskResumeAll>
 8002394:	bd10      	pop	{r4, pc}
 8002396:	bf00      	nop
 8002398:	200042b8 	.word	0x200042b8
 800239c:	200006a8 	.word	0x200006a8

080023a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80023a0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80023a2:	f7fe fecd 	bl	8001140 <vTaskStartScheduler>
  
  return osOK;
}
 80023a6:	2000      	movs	r0, #0
 80023a8:	bd08      	pop	{r3, pc}

080023aa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80023aa:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023ac:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80023b0:	8a02      	ldrh	r2, [r0, #16]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80023b2:	460b      	mov	r3, r1
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023b4:	e890 0042 	ldmia.w	r0, {r1, r6}
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80023b8:	b086      	sub	sp, #24
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80023ba:	2c84      	cmp	r4, #132	; 0x84
 80023bc:	f04f 0500 	mov.w	r5, #0
    fpriority += (priority - osPriorityIdle);
 80023c0:	bf14      	ite	ne
 80023c2:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80023c4:	462c      	moveq	r4, r5
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023c6:	a805      	add	r0, sp, #20
 80023c8:	9001      	str	r0, [sp, #4]
 80023ca:	9503      	str	r5, [sp, #12]
 80023cc:	9502      	str	r5, [sp, #8]
 80023ce:	9400      	str	r4, [sp, #0]
 80023d0:	4630      	mov	r0, r6
 80023d2:	f7fe fe96 	bl	8001102 <xTaskGenericCreate>
 80023d6:	2801      	cmp	r0, #1
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
  }
  
  return handle;
 80023d8:	bf0c      	ite	eq
 80023da:	9805      	ldreq	r0, [sp, #20]
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
 80023dc:	2000      	movne	r0, #0
  }
  
  return handle;
}
 80023de:	b006      	add	sp, #24
 80023e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080023e4 <osThreadYield>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
  taskYIELD();
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <osThreadYield+0x14>)
 80023e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	f3bf 8f4f 	dsb	sy
 80023f0:	f3bf 8f6f 	isb	sy
  
  return osOK;
}
 80023f4:	2000      	movs	r0, #0
 80023f6:	4770      	bx	lr
 80023f8:	e000ed04 	.word	0xe000ed04

080023fc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80023fc:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80023fe:	2800      	cmp	r0, #0
 8002400:	bf08      	it	eq
 8002402:	2001      	moveq	r0, #1
 8002404:	f7fe ffea 	bl	80013dc <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002408:	2000      	movs	r0, #0
 800240a:	bd08      	pop	{r3, pc}

0800240c <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800240c:	b570      	push	{r4, r5, r6, lr}
 800240e:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002410:	f3ef 8405 	mrs	r4, IPSR
  int dummy = 0;
  void *p = NULL;
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8002414:	b154      	cbz	r4, 800242c <osPoolAlloc+0x20>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002416:	f3ef 8411 	mrs	r4, BASEPRI
 800241a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241e:	f383 8811 	msr	BASEPRI, r3
 8002422:	f3bf 8f6f 	isb	sy
 8002426:	f3bf 8f4f 	dsb	sy
 800242a:	e001      	b.n	8002430 <osPoolAlloc+0x24>
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
  }
  else {
    vPortEnterCritical();
 800242c:	f7ff fd52 	bl	8001ed4 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8002430:	68a9      	ldr	r1, [r5, #8]
 8002432:	2200      	movs	r2, #0
 8002434:	428a      	cmp	r2, r1
 8002436:	d012      	beq.n	800245e <osPoolAlloc+0x52>
    index = pool_id->currentIndex + i;
 8002438:	692b      	ldr	r3, [r5, #16]
    if (index >= pool_id->pool_sz) {
      index = 0;
    }
    
    if (pool_id->markers[index] == 0) {
 800243a:	6868      	ldr	r0, [r5, #4]
  else {
    vPortEnterCritical();
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
    index = pool_id->currentIndex + i;
 800243c:	4413      	add	r3, r2
    if (index >= pool_id->pool_sz) {
      index = 0;
 800243e:	4299      	cmp	r1, r3
 8002440:	bf98      	it	ls
 8002442:	2300      	movls	r3, #0
    }
    
    if (pool_id->markers[index] == 0) {
 8002444:	18c6      	adds	r6, r0, r3
 8002446:	5cc0      	ldrb	r0, [r0, r3]
 8002448:	b938      	cbnz	r0, 800245a <osPoolAlloc+0x4e>
      pool_id->markers[index] = 1;
 800244a:	2201      	movs	r2, #1
 800244c:	7032      	strb	r2, [r6, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800244e:	68ea      	ldr	r2, [r5, #12]
 8002450:	682e      	ldr	r6, [r5, #0]
      pool_id->currentIndex = index;
 8002452:	612b      	str	r3, [r5, #16]
      index = 0;
    }
    
    if (pool_id->markers[index] == 0) {
      pool_id->markers[index] = 1;
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8002454:	fb02 6603 	mla	r6, r2, r3, r6
      pool_id->currentIndex = index;
      break;
 8002458:	e002      	b.n	8002460 <osPoolAlloc+0x54>
  }
  else {
    vPortEnterCritical();
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800245a:	3201      	adds	r2, #1
 800245c:	e7ea      	b.n	8002434 <osPoolAlloc+0x28>
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
  int dummy = 0;
  void *p = NULL;
 800245e:	2600      	movs	r6, #0
 8002460:	f3ef 8305 	mrs	r3, IPSR
      pool_id->currentIndex = index;
      break;
    }
  }
  
  if (inHandlerMode()) {
 8002464:	b113      	cbz	r3, 800246c <osPoolAlloc+0x60>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002466:	f384 8811 	msr	BASEPRI, r4
 800246a:	e001      	b.n	8002470 <osPoolAlloc+0x64>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
  }
  else {
    vPortExitCritical();
 800246c:	f7ff fd54 	bl	8001f18 <vPortExitCritical>
  }
  
  return p;
}
 8002470:	4630      	mov	r0, r6
 8002472:	bd70      	pop	{r4, r5, r6, pc}

08002474 <osPoolFree>:
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
  uint32_t index;
  
  if (pool_id == NULL) {
 8002474:	b188      	cbz	r0, 800249a <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block == NULL) {
 8002476:	b181      	cbz	r1, 800249a <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block < pool_id->pool) {
 8002478:	6803      	ldr	r3, [r0, #0]
 800247a:	4299      	cmp	r1, r3
 800247c:	d30d      	bcc.n	800249a <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800247e:	1ac9      	subs	r1, r1, r3
  if (index % pool_id->item_sz) {
 8002480:	68c3      	ldr	r3, [r0, #12]
 8002482:	fbb1 f2f3 	udiv	r2, r1, r3
 8002486:	fb03 1112 	mls	r1, r3, r2, r1
 800248a:	b931      	cbnz	r1, 800249a <osPoolFree+0x26>
    return osErrorParameter;
  }
  index = index / pool_id->item_sz;
  if (index >= pool_id->pool_sz) {
 800248c:	6883      	ldr	r3, [r0, #8]
 800248e:	429a      	cmp	r2, r3
 8002490:	d203      	bcs.n	800249a <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  pool_id->markers[index] = 0;
 8002492:	6843      	ldr	r3, [r0, #4]
  
  return osOK;
 8002494:	4608      	mov	r0, r1
  index = index / pool_id->item_sz;
  if (index >= pool_id->pool_sz) {
    return osErrorParameter;
  }
  
  pool_id->markers[index] = 0;
 8002496:	5499      	strb	r1, [r3, r2]
 8002498:	4770      	bx	lr
osStatus osPoolFree (osPoolId pool_id, void *block)
{
  uint32_t index;
  
  if (pool_id == NULL) {
    return osErrorParameter;
 800249a:	2080      	movs	r0, #128	; 0x80
  }
  
  pool_id->markers[index] = 0;
  
  return osOK;
}
 800249c:	4770      	bx	lr

0800249e <osMessageCreate>:
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
  (void) thread_id;
  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800249e:	2200      	movs	r2, #0
 80024a0:	c803      	ldmia	r0, {r0, r1}
 80024a2:	f7ff ba89 	b.w	80019b8 <xQueueGenericCreate>
	...

080024a8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80024a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 80024aa:	2400      	movs	r4, #0
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80024ac:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80024ae:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 80024b0:	42a2      	cmp	r2, r4
 80024b2:	bf08      	it	eq
 80024b4:	2201      	moveq	r2, #1
 80024b6:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 80024ba:	b1a3      	cbz	r3, 80024e6 <osMessagePut+0x3e>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80024bc:	4623      	mov	r3, r4
 80024be:	aa03      	add	r2, sp, #12
 80024c0:	a901      	add	r1, sp, #4
 80024c2:	f7ff fb5d 	bl	8001b80 <xQueueGenericSendFromISR>
 80024c6:	2801      	cmp	r0, #1
 80024c8:	d001      	beq.n	80024ce <osMessagePut+0x26>
      return osErrorOS;
 80024ca:	20ff      	movs	r0, #255	; 0xff
 80024cc:	e011      	b.n	80024f2 <osMessagePut+0x4a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80024ce:	9b03      	ldr	r3, [sp, #12]
 80024d0:	b173      	cbz	r3, 80024f0 <osMessagePut+0x48>
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <osMessagePut+0x50>)
 80024d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	f3bf 8f4f 	dsb	sy
 80024de:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80024e2:	4620      	mov	r0, r4
 80024e4:	e005      	b.n	80024f2 <osMessagePut+0x4a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80024e6:	a901      	add	r1, sp, #4
 80024e8:	f7ff fa98 	bl	8001a1c <xQueueGenericSend>
 80024ec:	2801      	cmp	r0, #1
 80024ee:	d1ec      	bne.n	80024ca <osMessagePut+0x22>
      return osErrorOS;
    }
  }
  
  return osOK;
 80024f0:	2000      	movs	r0, #0
}
 80024f2:	b004      	add	sp, #16
 80024f4:	bd10      	pop	{r4, pc}
 80024f6:	bf00      	nop
 80024f8:	e000ed04 	.word	0xe000ed04

080024fc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80024fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024fe:	b085      	sub	sp, #20
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8002500:	2600      	movs	r6, #0
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002502:	4604      	mov	r4, r0
 8002504:	4617      	mov	r7, r2
 8002506:	4608      	mov	r0, r1
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002508:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 800250a:	9602      	str	r6, [sp, #8]
 800250c:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 800250e:	b909      	cbnz	r1, 8002514 <osMessageGet+0x18>
    event.status = osErrorParameter;
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	e023      	b.n	800255c <osMessageGet+0x60>
    return event;
  }
  
  taskWoken = pdFALSE;
 8002514:	9600      	str	r6, [sp, #0]
 8002516:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800251a:	b1a3      	cbz	r3, 8002546 <osMessageGet+0x4a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800251c:	466a      	mov	r2, sp
 800251e:	a902      	add	r1, sp, #8
 8002520:	f7ff fc40 	bl	8001da4 <xQueueReceiveFromISR>
 8002524:	2801      	cmp	r0, #1
      /* We have mail */
      event.status = osEventMessage;
 8002526:	bf04      	itt	eq
 8002528:	2310      	moveq	r3, #16
 800252a:	9301      	streq	r3, [sp, #4]
    }
    else {
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800252c:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 800252e:	bf18      	it	ne
 8002530:	9601      	strne	r6, [sp, #4]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002532:	b1a3      	cbz	r3, 800255e <osMessageGet+0x62>
 8002534:	4b0d      	ldr	r3, [pc, #52]	; (800256c <osMessageGet+0x70>)
 8002536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	f3bf 8f4f 	dsb	sy
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	e00b      	b.n	800255e <osMessageGet+0x62>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002546:	a902      	add	r1, sp, #8
 8002548:	f7ff fb76 	bl	8001c38 <xQueueGenericReceive>
 800254c:	2801      	cmp	r0, #1
 800254e:	d101      	bne.n	8002554 <osMessageGet+0x58>
      /* We have mail */
      event.status = osEventMessage;
 8002550:	2310      	movs	r3, #16
 8002552:	e003      	b.n	800255c <osMessageGet+0x60>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002554:	2f00      	cmp	r7, #0
 8002556:	bf0c      	ite	eq
 8002558:	2300      	moveq	r3, #0
 800255a:	2340      	movne	r3, #64	; 0x40
 800255c:	9301      	str	r3, [sp, #4]
    }
  }
  
  return event;
 800255e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002566:	4620      	mov	r0, r4
 8002568:	b005      	add	sp, #20
 800256a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800256c:	e000ed04 	.word	0xe000ed04

08002570 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8002570:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002572:	f7ff f8b1 	bl	80016d8 <xTaskGetSchedulerState>
 8002576:	2801      	cmp	r0, #1
 8002578:	d003      	beq.n	8002582 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800257a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800257e:	f7ff bd0f 	b.w	8001fa0 <xPortSysTickHandler>
 8002582:	bd08      	pop	{r3, pc}

08002584 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002584:	6803      	ldr	r3, [r0, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800258c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800258e:	695a      	ldr	r2, [r3, #20]
 8002590:	f022 0201 	bic.w	r2, r2, #1
 8002594:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002596:	2320      	movs	r3, #32
 8002598:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800259c:	4770      	bx	lr
	...

080025a0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80025a4:	6807      	ldr	r7, [r0, #0]
 80025a6:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a8:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80025aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80025ae:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025b0:	68a1      	ldr	r1, [r4, #8]
 80025b2:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80025b4:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025b6:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80025b8:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80025ba:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025bc:	4311      	orrs	r1, r2
 80025be:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80025c0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025c4:	430a      	orrs	r2, r1
 80025c6:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80025c8:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025cc:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80025ce:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80025d0:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80025d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80025d6:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025d8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80025dc:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	4b7c      	ldr	r3, [pc, #496]	; (80027d4 <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025e4:	d17c      	bne.n	80026e0 <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80025e6:	429f      	cmp	r7, r3
 80025e8:	d003      	beq.n	80025f2 <UART_SetConfig+0x52>
 80025ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025ee:	429f      	cmp	r7, r3
 80025f0:	d131      	bne.n	8002656 <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80025f2:	f000 fdcf 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 80025f6:	6863      	ldr	r3, [r4, #4]
 80025f8:	2519      	movs	r5, #25
 80025fa:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80025fe:	4368      	muls	r0, r5
 8002600:	fbb0 f8f8 	udiv	r8, r0, r8
 8002604:	f000 fdc6 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 8002608:	6866      	ldr	r6, [r4, #4]
 800260a:	4368      	muls	r0, r5
 800260c:	0076      	lsls	r6, r6, #1
 800260e:	fbb0 f6f6 	udiv	r6, r0, r6
 8002612:	f000 fdbf 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 8002616:	6863      	ldr	r3, [r4, #4]
 8002618:	f04f 0964 	mov.w	r9, #100	; 0x64
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4368      	muls	r0, r5
 8002620:	fbb0 f0f3 	udiv	r0, r0, r3
 8002624:	fbb0 f0f9 	udiv	r0, r0, r9
 8002628:	fb09 6610 	mls	r6, r9, r0, r6
 800262c:	f000 fdb2 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 8002630:	fbb8 f8f9 	udiv	r8, r8, r9
 8002634:	6861      	ldr	r1, [r4, #4]
 8002636:	00f6      	lsls	r6, r6, #3
 8002638:	3632      	adds	r6, #50	; 0x32
 800263a:	fbb6 f6f9 	udiv	r6, r6, r9
 800263e:	0076      	lsls	r6, r6, #1
 8002640:	4368      	muls	r0, r5
 8002642:	0049      	lsls	r1, r1, #1
 8002644:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8002648:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 800264c:	fbb0 faf1 	udiv	sl, r0, r1
 8002650:	f000 fda0 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 8002654:	e030      	b.n	80026b8 <UART_SetConfig+0x118>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002656:	f000 fd85 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 800265a:	6863      	ldr	r3, [r4, #4]
 800265c:	2519      	movs	r5, #25
 800265e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8002662:	4368      	muls	r0, r5
 8002664:	fbb0 f8f8 	udiv	r8, r0, r8
 8002668:	f000 fd7c 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 800266c:	6866      	ldr	r6, [r4, #4]
 800266e:	4368      	muls	r0, r5
 8002670:	0076      	lsls	r6, r6, #1
 8002672:	fbb0 f6f6 	udiv	r6, r0, r6
 8002676:	f000 fd75 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 800267a:	6863      	ldr	r3, [r4, #4]
 800267c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4368      	muls	r0, r5
 8002684:	fbb0 f0f3 	udiv	r0, r0, r3
 8002688:	fbb0 f0f9 	udiv	r0, r0, r9
 800268c:	fb09 6610 	mls	r6, r9, r0, r6
 8002690:	f000 fd68 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 8002694:	fbb8 f8f9 	udiv	r8, r8, r9
 8002698:	00f6      	lsls	r6, r6, #3
 800269a:	6861      	ldr	r1, [r4, #4]
 800269c:	3632      	adds	r6, #50	; 0x32
 800269e:	fbb6 f6f9 	udiv	r6, r6, r9
 80026a2:	0076      	lsls	r6, r6, #1
 80026a4:	4368      	muls	r0, r5
 80026a6:	0049      	lsls	r1, r1, #1
 80026a8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80026ac:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 80026b0:	fbb0 faf1 	udiv	sl, r0, r1
 80026b4:	f000 fd56 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 80026b8:	4345      	muls	r5, r0
 80026ba:	6860      	ldr	r0, [r4, #4]
 80026bc:	0040      	lsls	r0, r0, #1
 80026be:	fbb5 f0f0 	udiv	r0, r5, r0
 80026c2:	fbb0 f0f9 	udiv	r0, r0, r9
 80026c6:	fb09 a210 	mls	r2, r9, r0, sl
 80026ca:	00d2      	lsls	r2, r2, #3
 80026cc:	3232      	adds	r2, #50	; 0x32
 80026ce:	fbb2 f3f9 	udiv	r3, r2, r9
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	4443      	add	r3, r8
 80026d8:	441e      	add	r6, r3
 80026da:	60be      	str	r6, [r7, #8]
 80026dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80026e0:	429f      	cmp	r7, r3
 80026e2:	d002      	beq.n	80026ea <UART_SetConfig+0x14a>
 80026e4:	4b3c      	ldr	r3, [pc, #240]	; (80027d8 <UART_SetConfig+0x238>)
 80026e6:	429f      	cmp	r7, r3
 80026e8:	d130      	bne.n	800274c <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80026ea:	f000 fd53 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 80026ee:	6863      	ldr	r3, [r4, #4]
 80026f0:	2519      	movs	r5, #25
 80026f2:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80026f6:	4368      	muls	r0, r5
 80026f8:	fbb0 f8f8 	udiv	r8, r0, r8
 80026fc:	f000 fd4a 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 8002700:	6866      	ldr	r6, [r4, #4]
 8002702:	4368      	muls	r0, r5
 8002704:	00b6      	lsls	r6, r6, #2
 8002706:	fbb0 f6f6 	udiv	r6, r0, r6
 800270a:	f000 fd43 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 800270e:	6863      	ldr	r3, [r4, #4]
 8002710:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4368      	muls	r0, r5
 8002718:	fbb0 f0f3 	udiv	r0, r0, r3
 800271c:	fbb0 f0f9 	udiv	r0, r0, r9
 8002720:	fb09 6610 	mls	r6, r9, r0, r6
 8002724:	f000 fd36 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 8002728:	fbb8 f8f9 	udiv	r8, r8, r9
 800272c:	6861      	ldr	r1, [r4, #4]
 800272e:	0136      	lsls	r6, r6, #4
 8002730:	4368      	muls	r0, r5
 8002732:	0089      	lsls	r1, r1, #2
 8002734:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8002738:	3632      	adds	r6, #50	; 0x32
 800273a:	fbb0 faf1 	udiv	sl, r0, r1
 800273e:	fbb6 f6f9 	udiv	r6, r6, r9
 8002742:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8002746:	f000 fd25 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 800274a:	e02f      	b.n	80027ac <UART_SetConfig+0x20c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800274c:	f000 fd0a 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 8002750:	6863      	ldr	r3, [r4, #4]
 8002752:	2519      	movs	r5, #25
 8002754:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8002758:	4368      	muls	r0, r5
 800275a:	fbb0 f8f8 	udiv	r8, r0, r8
 800275e:	f000 fd01 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 8002762:	6866      	ldr	r6, [r4, #4]
 8002764:	4368      	muls	r0, r5
 8002766:	00b6      	lsls	r6, r6, #2
 8002768:	fbb0 f6f6 	udiv	r6, r0, r6
 800276c:	f000 fcfa 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 8002770:	6863      	ldr	r3, [r4, #4]
 8002772:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4368      	muls	r0, r5
 800277a:	fbb0 f0f3 	udiv	r0, r0, r3
 800277e:	fbb0 f0f9 	udiv	r0, r0, r9
 8002782:	fb09 6610 	mls	r6, r9, r0, r6
 8002786:	f000 fced 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 800278a:	fbb8 f8f9 	udiv	r8, r8, r9
 800278e:	6861      	ldr	r1, [r4, #4]
 8002790:	0136      	lsls	r6, r6, #4
 8002792:	3632      	adds	r6, #50	; 0x32
 8002794:	4368      	muls	r0, r5
 8002796:	fbb6 f6f9 	udiv	r6, r6, r9
 800279a:	0089      	lsls	r1, r1, #2
 800279c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80027a0:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 80027a4:	fbb0 faf1 	udiv	sl, r0, r1
 80027a8:	f000 fcdc 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 80027ac:	4345      	muls	r5, r0
 80027ae:	6860      	ldr	r0, [r4, #4]
 80027b0:	0080      	lsls	r0, r0, #2
 80027b2:	fbb5 f0f0 	udiv	r0, r5, r0
 80027b6:	fbb0 f0f9 	udiv	r0, r0, r9
 80027ba:	fb09 a210 	mls	r2, r9, r0, sl
 80027be:	0112      	lsls	r2, r2, #4
 80027c0:	3232      	adds	r2, #50	; 0x32
 80027c2:	fbb2 f3f9 	udiv	r3, r2, r9
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	4433      	add	r3, r6
 80027cc:	4443      	add	r3, r8
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027d4:	40011000 	.word	0x40011000
 80027d8:	40011400 	.word	0x40011400

080027dc <UART_WaitOnFlagUntilTimeout.constprop.3>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80027dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027de:	4604      	mov	r4, r0
 80027e0:	460e      	mov	r6, r1
 80027e2:	4617      	mov	r7, r2
 80027e4:	461d      	mov	r5, r3
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80027e6:	6821      	ldr	r1, [r4, #0]
 80027e8:	680b      	ldr	r3, [r1, #0]
 80027ea:	ea36 0303 	bics.w	r3, r6, r3
 80027ee:	d01b      	beq.n	8002828 <UART_WaitOnFlagUntilTimeout.constprop.3+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80027f0:	1c6b      	adds	r3, r5, #1
 80027f2:	d0f9      	beq.n	80027e8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80027f4:	b995      	cbnz	r5, 800281c <UART_WaitOnFlagUntilTimeout.constprop.3+0x40>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027f6:	6823      	ldr	r3, [r4, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8002808:	2320      	movs	r3, #32
 800280a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800280e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002812:	2300      	movs	r3, #0
 8002814:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002818:	2003      	movs	r0, #3
 800281a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800281c:	f000 fff0 	bl	8003800 <HAL_GetTick>
 8002820:	1bc0      	subs	r0, r0, r7
 8002822:	4285      	cmp	r5, r0
 8002824:	d2df      	bcs.n	80027e6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002826:	e7e6      	b.n	80027f6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;
 8002828:	2000      	movs	r0, #0
}
 800282a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800282c <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800282c:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 800282e:	4604      	mov	r4, r0
 8002830:	b340      	cbz	r0, 8002884 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002832:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002836:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800283a:	b91b      	cbnz	r3, 8002844 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800283c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002840:	f001 f8a8 	bl	8003994 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002844:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002846:	2324      	movs	r3, #36	; 0x24
 8002848:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800284c:	68d3      	ldr	r3, [r2, #12]
 800284e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002852:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002854:	4620      	mov	r0, r4
 8002856:	f7ff fea3 	bl	80025a0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800285a:	6823      	ldr	r3, [r4, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002862:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800286a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002872:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002874:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002876:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002878:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800287a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800287e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8002882:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8002884:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8002886:	bd10      	pop	{r4, pc}

08002888 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800288c:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 800288e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002892:	2b20      	cmp	r3, #32
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002894:	4604      	mov	r4, r0
 8002896:	460d      	mov	r5, r1
 8002898:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0U;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 800289a:	d14d      	bne.n	8002938 <HAL_UART_Transmit+0xb0>
  {
    if((pData == NULL ) || (Size == 0U)) 
 800289c:	2900      	cmp	r1, #0
 800289e:	d048      	beq.n	8002932 <HAL_UART_Transmit+0xaa>
 80028a0:	2a00      	cmp	r2, #0
 80028a2:	d046      	beq.n	8002932 <HAL_UART_Transmit+0xaa>
    {
      return  HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80028a4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d045      	beq.n	8002938 <HAL_UART_Transmit+0xb0>
 80028ac:	2301      	movs	r3, #1
 80028ae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028b6:	2321      	movs	r3, #33	; 0x21
 80028b8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028bc:	f000 ffa0 	bl	8003800 <HAL_GetTick>

    huart->TxXferSize = Size;
 80028c0:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028c4:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 80028c6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80028ca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80028cc:	b313      	cbz	r3, 8002914 <HAL_UART_Transmit+0x8c>
    {
      huart->TxXferCount--;
 80028ce:	3b01      	subs	r3, #1
 80028d0:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028d2:	68a3      	ldr	r3, [r4, #8]
 80028d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028d8:	4632      	mov	r2, r6
 80028da:	463b      	mov	r3, r7
 80028dc:	f04f 0180 	mov.w	r1, #128	; 0x80
 80028e0:	4620      	mov	r0, r4
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028e2:	d10e      	bne.n	8002902 <HAL_UART_Transmit+0x7a>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028e4:	f7ff ff7a 	bl	80027dc <UART_WaitOnFlagUntilTimeout.constprop.3>
 80028e8:	b110      	cbz	r0, 80028f0 <HAL_UART_Transmit+0x68>
        { 
          return HAL_TIMEOUT;
 80028ea:	2003      	movs	r0, #3
 80028ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
        tmp = (uint16_t*) pData;
        huart->Instance->DR = (*tmp & (uint16_t)0x01FFU);
 80028f0:	882b      	ldrh	r3, [r5, #0]
 80028f2:	6822      	ldr	r2, [r4, #0]
 80028f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f8:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80028fa:	6923      	ldr	r3, [r4, #16]
 80028fc:	b943      	cbnz	r3, 8002910 <HAL_UART_Transmit+0x88>
        {
          pData +=2U;
 80028fe:	3502      	adds	r5, #2
 8002900:	e7e3      	b.n	80028ca <HAL_UART_Transmit+0x42>
          pData +=1U;
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002902:	f7ff ff6b 	bl	80027dc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002906:	2800      	cmp	r0, #0
 8002908:	d1ef      	bne.n	80028ea <HAL_UART_Transmit+0x62>
        {
          return HAL_TIMEOUT;
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFFU);
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	782a      	ldrb	r2, [r5, #0]
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	3501      	adds	r5, #1
 8002912:	e7da      	b.n	80028ca <HAL_UART_Transmit+0x42>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002914:	463b      	mov	r3, r7
 8002916:	4632      	mov	r2, r6
 8002918:	2140      	movs	r1, #64	; 0x40
 800291a:	4620      	mov	r0, r4
 800291c:	f7ff ff5e 	bl	80027dc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002920:	2800      	cmp	r0, #0
 8002922:	d1e2      	bne.n	80028ea <HAL_UART_Transmit+0x62>
    { 
      return HAL_TIMEOUT;
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8002924:	2320      	movs	r3, #32
 8002926:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800292a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    
    return HAL_OK;
 800292e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return  HAL_ERROR;
 8002932:	2001      	movs	r0, #1
 8002934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002938:	2002      	movs	r0, #2
  }
}
 800293a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002940 <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002940:	b538      	push	{r3, r4, r5, lr}
 8002942:	4604      	mov	r4, r0
 8002944:	4613      	mov	r3, r2
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002946:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800294a:	2a20      	cmp	r2, #32
 800294c:	d12a      	bne.n	80029a4 <HAL_UART_Transmit_DMA+0x64>
  {
    if((pData == NULL ) || (Size == 0U))
 800294e:	b339      	cbz	r1, 80029a0 <HAL_UART_Transmit_DMA+0x60>
 8002950:	b333      	cbz	r3, 80029a0 <HAL_UART_Transmit_DMA+0x60>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002952:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8002956:	2a01      	cmp	r2, #1
 8002958:	d024      	beq.n	80029a4 <HAL_UART_Transmit_DMA+0x64>
 800295a:	2201      	movs	r2, #1
 800295c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002960:	6b20      	ldr	r0, [r4, #48]	; 0x30

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
 8002962:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002964:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002966:	2221      	movs	r2, #33	; 0x21

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002968:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800296a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800296e:	4a0e      	ldr	r2, [pc, #56]	; (80029a8 <HAL_UART_Transmit_DMA+0x68>)
    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 8002970:	84e3      	strh	r3, [r4, #38]	; 0x26
    }

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pTxBuffPtr = pData;
 8002972:	6221      	str	r1, [r4, #32]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002974:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002976:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <HAL_UART_Transmit_DMA+0x6c>)
 8002978:	6402      	str	r2, [r0, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800297a:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <HAL_UART_Transmit_DMA+0x70>)
 800297c:	64c2      	str	r2, [r0, #76]	; 0x4c
    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800297e:	6822      	ldr	r2, [r4, #0]

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002980:	6505      	str	r5, [r0, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002982:	3204      	adds	r2, #4
 8002984:	f000 fda8 	bl	80034d8 <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800298e:	601a      	str	r2, [r3, #0]
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002990:	695a      	ldr	r2, [r3, #20]
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002992:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002996:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800299a:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 800299c:	4628      	mov	r0, r5
 800299e:	bd38      	pop	{r3, r4, r5, pc}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
    {
      return HAL_ERROR;
 80029a0:	2001      	movs	r0, #1
 80029a2:	bd38      	pop	{r3, r4, r5, pc}
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80029a4:	2002      	movs	r0, #2
  }
}
 80029a6:	bd38      	pop	{r3, r4, r5, pc}
 80029a8:	080029b7 	.word	0x080029b7
 80029ac:	080029e5 	.word	0x080029e5
 80029b0:	080029f1 	.word	0x080029f1

080029b4 <HAL_UART_TxCpltCallback>:
 80029b4:	4770      	bx	lr

080029b6 <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80029b6:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80029b8:	6803      	ldr	r3, [r0, #0]
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029ba:	6b82      	ldr	r2, [r0, #56]	; 0x38
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80029c2:	d10a      	bne.n	80029da <UART_DMATransmitCplt+0x24>
  {
    huart->TxXferCount = 0U;
 80029c4:	84d3      	strh	r3, [r2, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80029c6:	6813      	ldr	r3, [r2, #0]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029ce:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029d6:	60da      	str	r2, [r3, #12]
 80029d8:	bd08      	pop	{r3, pc}

  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 80029da:	4610      	mov	r0, r2
 80029dc:	f7ff ffea 	bl	80029b4 <HAL_UART_TxCpltCallback>
 80029e0:	bd08      	pop	{r3, pc}

080029e2 <HAL_UART_TxHalfCpltCallback>:
 80029e2:	4770      	bx	lr

080029e4 <UART_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80029e4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 80029e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80029e8:	f7ff fffb 	bl	80029e2 <HAL_UART_TxHalfCpltCallback>
 80029ec:	bd08      	pop	{r3, pc}

080029ee <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029ee:	4770      	bx	lr

080029f0 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029f0:	6b81      	ldr	r1, [r0, #56]	; 0x38
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80029f2:	b508      	push	{r3, lr}
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80029f4:	680b      	ldr	r3, [r1, #0]
 80029f6:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80029f8:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 80029fc:	2821      	cmp	r0, #33	; 0x21
 80029fe:	d10a      	bne.n	8002a16 <UART_DMAError+0x26>
 8002a00:	0612      	lsls	r2, r2, #24
 8002a02:	d508      	bpl.n	8002a16 <UART_DMAError+0x26>
  {
    huart->TxXferCount = 0U;
 8002a04:	2200      	movs	r2, #0
 8002a06:	84ca      	strh	r2, [r1, #38]	; 0x26
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002a0e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a10:	2220      	movs	r2, #32
 8002a12:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8002a16:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002a18:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8002a1c:	2a22      	cmp	r2, #34	; 0x22
 8002a1e:	d106      	bne.n	8002a2e <UART_DMAError+0x3e>
 8002a20:	065b      	lsls	r3, r3, #25
 8002a22:	d504      	bpl.n	8002a2e <UART_DMAError+0x3e>
  {
    huart->RxXferCount = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002a28:	4608      	mov	r0, r1
 8002a2a:	f7ff fdab 	bl	8002584 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002a2e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8002a30:	f043 0310 	orr.w	r3, r3, #16
 8002a34:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002a36:	4608      	mov	r0, r1
 8002a38:	f7ff ffd9 	bl	80029ee <HAL_UART_ErrorCallback>
 8002a3c:	bd08      	pop	{r3, pc}

08002a3e <HAL_TIMEx_CommutationCallback>:
 8002a3e:	4770      	bx	lr

08002a40 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a40:	4770      	bx	lr

08002a42 <HAL_TIM_Base_MspInit>:
 8002a42:	4770      	bx	lr

08002a44 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a44:	6803      	ldr	r3, [r0, #0]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	f042 0201 	orr.w	r2, r2, #1
 8002a4c:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	f042 0201 	orr.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8002a56:	2000      	movs	r0, #0
 8002a58:	4770      	bx	lr

08002a5a <HAL_TIM_OC_DelayElapsedCallback>:
 8002a5a:	4770      	bx	lr

08002a5c <HAL_TIM_IC_CaptureCallback>:
 8002a5c:	4770      	bx	lr

08002a5e <HAL_TIM_PWM_PulseFinishedCallback>:
 8002a5e:	4770      	bx	lr

08002a60 <HAL_TIM_TriggerCallback>:
 8002a60:	4770      	bx	lr

08002a62 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a62:	6803      	ldr	r3, [r0, #0]
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a68:	b510      	push	{r4, lr}
 8002a6a:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a6c:	d514      	bpl.n	8002a98 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	0792      	lsls	r2, r2, #30
 8002a72:	d511      	bpl.n	8002a98 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a74:	f06f 0202 	mvn.w	r2, #2
 8002a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a7a:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a7c:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a7e:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a80:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a82:	d002      	beq.n	8002a8a <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002a84:	f7ff ffea 	bl	8002a5c <HAL_TIM_IC_CaptureCallback>
 8002a88:	e004      	b.n	8002a94 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8a:	f7ff ffe6 	bl	8002a5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f7ff ffe5 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a94:	2300      	movs	r3, #0
 8002a96:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	0750      	lsls	r0, r2, #29
 8002a9e:	d516      	bpl.n	8002ace <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	0751      	lsls	r1, r2, #29
 8002aa4:	d513      	bpl.n	8002ace <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aa6:	f06f 0204 	mvn.w	r2, #4
 8002aaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aac:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aae:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ab0:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ab4:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab6:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ab8:	d002      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002aba:	f7ff ffcf 	bl	8002a5c <HAL_TIM_IC_CaptureCallback>
 8002abe:	e004      	b.n	8002aca <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac0:	f7ff ffcb 	bl	8002a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	f7ff ffca 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aca:	2300      	movs	r3, #0
 8002acc:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ace:	6823      	ldr	r3, [r4, #0]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	0712      	lsls	r2, r2, #28
 8002ad4:	d515      	bpl.n	8002b02 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	0710      	lsls	r0, r2, #28
 8002ada:	d512      	bpl.n	8002b02 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002adc:	f06f 0208 	mvn.w	r2, #8
 8002ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ae2:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ae4:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ae6:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ae8:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002aea:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aec:	d002      	beq.n	8002af4 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	f7ff ffb5 	bl	8002a5c <HAL_TIM_IC_CaptureCallback>
 8002af2:	e004      	b.n	8002afe <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af4:	f7ff ffb1 	bl	8002a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002af8:	4620      	mov	r0, r4
 8002afa:	f7ff ffb0 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afe:	2300      	movs	r3, #0
 8002b00:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	06d2      	lsls	r2, r2, #27
 8002b08:	d516      	bpl.n	8002b38 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	06d0      	lsls	r0, r2, #27
 8002b0e:	d513      	bpl.n	8002b38 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b10:	f06f 0210 	mvn.w	r2, #16
 8002b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b16:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b18:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b1a:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b1e:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002b20:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b22:	d002      	beq.n	8002b2a <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002b24:	f7ff ff9a 	bl	8002a5c <HAL_TIM_IC_CaptureCallback>
 8002b28:	e004      	b.n	8002b34 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	f7ff ff96 	bl	8002a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f7ff ff95 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b34:	2300      	movs	r3, #0
 8002b36:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	07d1      	lsls	r1, r2, #31
 8002b3e:	d508      	bpl.n	8002b52 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	07d2      	lsls	r2, r2, #31
 8002b44:	d505      	bpl.n	8002b52 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b46:	f06f 0201 	mvn.w	r2, #1
 8002b4a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f001 fb9d 	bl	800428c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b52:	6823      	ldr	r3, [r4, #0]
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	0610      	lsls	r0, r2, #24
 8002b58:	d508      	bpl.n	8002b6c <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	0611      	lsls	r1, r2, #24
 8002b5e:	d505      	bpl.n	8002b6c <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b64:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002b66:	4620      	mov	r0, r4
 8002b68:	f7ff ff6a 	bl	8002a40 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	0652      	lsls	r2, r2, #25
 8002b72:	d508      	bpl.n	8002b86 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	0650      	lsls	r0, r2, #25
 8002b78:	d505      	bpl.n	8002b86 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b7e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002b80:	4620      	mov	r0, r4
 8002b82:	f7ff ff6d 	bl	8002a60 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b86:	6823      	ldr	r3, [r4, #0]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	0691      	lsls	r1, r2, #26
 8002b8c:	d50a      	bpl.n	8002ba4 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	0692      	lsls	r2, r2, #26
 8002b92:	d507      	bpl.n	8002ba4 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b94:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002b98:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b9a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8002b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8002ba0:	f7ff bf4d 	b.w	8002a3e <HAL_TIMEx_CommutationCallback>
 8002ba4:	bd10      	pop	{r4, pc}
	...

08002ba8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002ba8:	4a2e      	ldr	r2, [pc, #184]	; (8002c64 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8002baa:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002bac:	4290      	cmp	r0, r2
 8002bae:	d012      	beq.n	8002bd6 <TIM_Base_SetConfig+0x2e>
 8002bb0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002bb4:	d00f      	beq.n	8002bd6 <TIM_Base_SetConfig+0x2e>
 8002bb6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002bba:	4290      	cmp	r0, r2
 8002bbc:	d00b      	beq.n	8002bd6 <TIM_Base_SetConfig+0x2e>
 8002bbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bc2:	4290      	cmp	r0, r2
 8002bc4:	d007      	beq.n	8002bd6 <TIM_Base_SetConfig+0x2e>
 8002bc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bca:	4290      	cmp	r0, r2
 8002bcc:	d003      	beq.n	8002bd6 <TIM_Base_SetConfig+0x2e>
 8002bce:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002bd2:	4290      	cmp	r0, r2
 8002bd4:	d118      	bne.n	8002c08 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002bd6:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002bdc:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002bde:	4a21      	ldr	r2, [pc, #132]	; (8002c64 <TIM_Base_SetConfig+0xbc>)
 8002be0:	4290      	cmp	r0, r2
 8002be2:	d037      	beq.n	8002c54 <TIM_Base_SetConfig+0xac>
 8002be4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002be8:	d034      	beq.n	8002c54 <TIM_Base_SetConfig+0xac>
 8002bea:	4a1f      	ldr	r2, [pc, #124]	; (8002c68 <TIM_Base_SetConfig+0xc0>)
 8002bec:	4290      	cmp	r0, r2
 8002bee:	d031      	beq.n	8002c54 <TIM_Base_SetConfig+0xac>
 8002bf0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bf4:	4290      	cmp	r0, r2
 8002bf6:	d02d      	beq.n	8002c54 <TIM_Base_SetConfig+0xac>
 8002bf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bfc:	4290      	cmp	r0, r2
 8002bfe:	d029      	beq.n	8002c54 <TIM_Base_SetConfig+0xac>
 8002c00:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002c04:	4290      	cmp	r0, r2
 8002c06:	d025      	beq.n	8002c54 <TIM_Base_SetConfig+0xac>
 8002c08:	4a18      	ldr	r2, [pc, #96]	; (8002c6c <TIM_Base_SetConfig+0xc4>)
 8002c0a:	4290      	cmp	r0, r2
 8002c0c:	d022      	beq.n	8002c54 <TIM_Base_SetConfig+0xac>
 8002c0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c12:	4290      	cmp	r0, r2
 8002c14:	d01e      	beq.n	8002c54 <TIM_Base_SetConfig+0xac>
 8002c16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c1a:	4290      	cmp	r0, r2
 8002c1c:	d01a      	beq.n	8002c54 <TIM_Base_SetConfig+0xac>
 8002c1e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002c22:	4290      	cmp	r0, r2
 8002c24:	d016      	beq.n	8002c54 <TIM_Base_SetConfig+0xac>
 8002c26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c2a:	4290      	cmp	r0, r2
 8002c2c:	d012      	beq.n	8002c54 <TIM_Base_SetConfig+0xac>
 8002c2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c32:	4290      	cmp	r0, r2
 8002c34:	d00e      	beq.n	8002c54 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8002c36:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c38:	688b      	ldr	r3, [r1, #8]
 8002c3a:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002c3c:	680b      	ldr	r3, [r1, #0]
 8002c3e:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <TIM_Base_SetConfig+0xbc>)
 8002c42:	4298      	cmp	r0, r3
 8002c44:	d00b      	beq.n	8002c5e <TIM_Base_SetConfig+0xb6>
 8002c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c4a:	4298      	cmp	r0, r3
 8002c4c:	d007      	beq.n	8002c5e <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	6143      	str	r3, [r0, #20]
}
 8002c52:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c54:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	e7eb      	b.n	8002c36 <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c5e:	690b      	ldr	r3, [r1, #16]
 8002c60:	6303      	str	r3, [r0, #48]	; 0x30
 8002c62:	e7f4      	b.n	8002c4e <TIM_Base_SetConfig+0xa6>
 8002c64:	40010000 	.word	0x40010000
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40014000 	.word	0x40014000

08002c70 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002c70:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002c72:	4604      	mov	r4, r0
 8002c74:	b1a0      	cbz	r0, 8002ca0 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002c76:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002c7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c7e:	b91b      	cbnz	r3, 8002c88 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c80:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c84:	f7ff fedd 	bl	8002a42 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002c8e:	6820      	ldr	r0, [r4, #0]
 8002c90:	1d21      	adds	r1, r4, #4
 8002c92:	f7ff ff89 	bl	8002ba8 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002ca0:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8002ca2:	bd10      	pop	{r4, pc}

08002ca4 <HAL_RCC_OscConfig>:
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ca4:	6803      	ldr	r3, [r0, #0]
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002caa:	4604      	mov	r4, r0
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cac:	07d8      	lsls	r0, r3, #31
 8002cae:	d403      	bmi.n	8002cb8 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb0:	6823      	ldr	r3, [r4, #0]
 8002cb2:	0799      	lsls	r1, r3, #30
 8002cb4:	d437      	bmi.n	8002d26 <HAL_RCC_OscConfig+0x82>
 8002cb6:	e087      	b.n	8002dc8 <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cb8:	4ba7      	ldr	r3, [pc, #668]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	f002 020c 	and.w	r2, r2, #12
 8002cc0:	2a04      	cmp	r2, #4
 8002cc2:	d007      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc4:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cc6:	f002 020c 	and.w	r2, r2, #12
 8002cca:	2a08      	cmp	r2, #8
 8002ccc:	d10b      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	025a      	lsls	r2, r3, #9
 8002cd2:	d508      	bpl.n	8002ce6 <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd4:	4ba0      	ldr	r3, [pc, #640]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	039b      	lsls	r3, r3, #14
 8002cda:	d5e9      	bpl.n	8002cb0 <HAL_RCC_OscConfig+0xc>
 8002cdc:	6863      	ldr	r3, [r4, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1e6      	bne.n	8002cb0 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	e134      	b.n	8002f50 <HAL_RCC_OscConfig+0x2ac>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce6:	4b9d      	ldr	r3, [pc, #628]	; (8002f5c <HAL_RCC_OscConfig+0x2b8>)
 8002ce8:	7922      	ldrb	r2, [r4, #4]
 8002cea:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cec:	6863      	ldr	r3, [r4, #4]
 8002cee:	b16b      	cbz	r3, 8002d0c <HAL_RCC_OscConfig+0x68>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f000 fd86 	bl	8003800 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf4:	4d98      	ldr	r5, [pc, #608]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf8:	682b      	ldr	r3, [r5, #0]
 8002cfa:	039f      	lsls	r7, r3, #14
 8002cfc:	d4d8      	bmi.n	8002cb0 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cfe:	f000 fd7f 	bl	8003800 <HAL_GetTick>
 8002d02:	1b80      	subs	r0, r0, r6
 8002d04:	2864      	cmp	r0, #100	; 0x64
 8002d06:	d9f7      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x54>
          {
            return HAL_TIMEOUT;
 8002d08:	2003      	movs	r0, #3
 8002d0a:	e121      	b.n	8002f50 <HAL_RCC_OscConfig+0x2ac>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f000 fd78 	bl	8003800 <HAL_GetTick>

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d10:	4d91      	ldr	r5, [pc, #580]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d12:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d14:	682b      	ldr	r3, [r5, #0]
 8002d16:	0398      	lsls	r0, r3, #14
 8002d18:	d5ca      	bpl.n	8002cb0 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d1a:	f000 fd71 	bl	8003800 <HAL_GetTick>
 8002d1e:	1b80      	subs	r0, r0, r6
 8002d20:	2864      	cmp	r0, #100	; 0x64
 8002d22:	d9f7      	bls.n	8002d14 <HAL_RCC_OscConfig+0x70>
 8002d24:	e7f0      	b.n	8002d08 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d26:	4b8c      	ldr	r3, [pc, #560]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	f012 0f0c 	tst.w	r2, #12
 8002d2e:	d007      	beq.n	8002d40 <HAL_RCC_OscConfig+0x9c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d30:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d32:	f002 020c 	and.w	r2, r2, #12
 8002d36:	2a08      	cmp	r2, #8
 8002d38:	d117      	bne.n	8002d6a <HAL_RCC_OscConfig+0xc6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	0259      	lsls	r1, r3, #9
 8002d3e:	d414      	bmi.n	8002d6a <HAL_RCC_OscConfig+0xc6>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d40:	4b85      	ldr	r3, [pc, #532]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	0792      	lsls	r2, r2, #30
 8002d46:	d502      	bpl.n	8002d4e <HAL_RCC_OscConfig+0xaa>
 8002d48:	68e2      	ldr	r2, [r4, #12]
 8002d4a:	2a01      	cmp	r2, #1
 8002d4c:	d1c9      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4e:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	21f8      	movs	r1, #248	; 0xf8
 8002d52:	fa91 f1a1 	rbit	r1, r1
 8002d56:	6920      	ldr	r0, [r4, #16]
 8002d58:	fab1 f181 	clz	r1, r1
 8002d5c:	fa00 f101 	lsl.w	r1, r0, r1
 8002d60:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002d64:	430a      	orrs	r2, r1
 8002d66:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d68:	e02e      	b.n	8002dc8 <HAL_RCC_OscConfig+0x124>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d6a:	68e2      	ldr	r2, [r4, #12]
 8002d6c:	4b7c      	ldr	r3, [pc, #496]	; (8002f60 <HAL_RCC_OscConfig+0x2bc>)
 8002d6e:	b1ea      	cbz	r2, 8002dac <HAL_RCC_OscConfig+0x108>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d70:	2201      	movs	r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f000 fd44 	bl	8003800 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d78:	4d77      	ldr	r5, [pc, #476]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7a:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7c:	682b      	ldr	r3, [r5, #0]
 8002d7e:	4876      	ldr	r0, [pc, #472]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
 8002d80:	079b      	lsls	r3, r3, #30
 8002d82:	d405      	bmi.n	8002d90 <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d84:	f000 fd3c 	bl	8003800 <HAL_GetTick>
 8002d88:	1b80      	subs	r0, r0, r6
 8002d8a:	2802      	cmp	r0, #2
 8002d8c:	d9f6      	bls.n	8002d7c <HAL_RCC_OscConfig+0xd8>
 8002d8e:	e7bb      	b.n	8002d08 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d90:	6803      	ldr	r3, [r0, #0]
 8002d92:	22f8      	movs	r2, #248	; 0xf8
 8002d94:	fa92 f2a2 	rbit	r2, r2
 8002d98:	6921      	ldr	r1, [r4, #16]
 8002d9a:	fab2 f282 	clz	r2, r2
 8002d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002da2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002da6:	4313      	orrs	r3, r2
 8002da8:	6003      	str	r3, [r0, #0]
 8002daa:	e00d      	b.n	8002dc8 <HAL_RCC_OscConfig+0x124>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dae:	f000 fd27 	bl	8003800 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db2:	4d69      	ldr	r5, [pc, #420]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db6:	682b      	ldr	r3, [r5, #0]
 8002db8:	079f      	lsls	r7, r3, #30
 8002dba:	d505      	bpl.n	8002dc8 <HAL_RCC_OscConfig+0x124>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dbc:	f000 fd20 	bl	8003800 <HAL_GetTick>
 8002dc0:	1b80      	subs	r0, r0, r6
 8002dc2:	2802      	cmp	r0, #2
 8002dc4:	d9f7      	bls.n	8002db6 <HAL_RCC_OscConfig+0x112>
 8002dc6:	e79f      	b.n	8002d08 <HAL_RCC_OscConfig+0x64>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	071e      	lsls	r6, r3, #28
 8002dcc:	d403      	bmi.n	8002dd6 <HAL_RCC_OscConfig+0x132>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dce:	6823      	ldr	r3, [r4, #0]
 8002dd0:	075d      	lsls	r5, r3, #29
 8002dd2:	d545      	bpl.n	8002e60 <HAL_RCC_OscConfig+0x1bc>
 8002dd4:	e01f      	b.n	8002e16 <HAL_RCC_OscConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dd6:	6962      	ldr	r2, [r4, #20]
 8002dd8:	4b62      	ldr	r3, [pc, #392]	; (8002f64 <HAL_RCC_OscConfig+0x2c0>)
 8002dda:	b172      	cbz	r2, 8002dfa <HAL_RCC_OscConfig+0x156>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f000 fd0e 	bl	8003800 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de4:	4d5c      	ldr	r5, [pc, #368]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de6:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002dea:	0798      	lsls	r0, r3, #30
 8002dec:	d4ef      	bmi.n	8002dce <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dee:	f000 fd07 	bl	8003800 <HAL_GetTick>
 8002df2:	1b80      	subs	r0, r0, r6
 8002df4:	2802      	cmp	r0, #2
 8002df6:	d9f7      	bls.n	8002de8 <HAL_RCC_OscConfig+0x144>
 8002df8:	e786      	b.n	8002d08 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dfa:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f000 fd00 	bl	8003800 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e00:	4d55      	ldr	r5, [pc, #340]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e02:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e04:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002e06:	0799      	lsls	r1, r3, #30
 8002e08:	d5e1      	bpl.n	8002dce <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e0a:	f000 fcf9 	bl	8003800 <HAL_GetTick>
 8002e0e:	1b80      	subs	r0, r0, r6
 8002e10:	2802      	cmp	r0, #2
 8002e12:	d9f7      	bls.n	8002e04 <HAL_RCC_OscConfig+0x160>
 8002e14:	e778      	b.n	8002d08 <HAL_RCC_OscConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	9301      	str	r3, [sp, #4]
 8002e1a:	4b4f      	ldr	r3, [pc, #316]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e1c:	4d52      	ldr	r5, [pc, #328]	; (8002f68 <HAL_RCC_OscConfig+0x2c4>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e30:	682b      	ldr	r3, [r5, #0]
 8002e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e36:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8002e38:	f000 fce2 	bl	8003800 <HAL_GetTick>
 8002e3c:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e3e:	682b      	ldr	r3, [r5, #0]
 8002e40:	05da      	lsls	r2, r3, #23
 8002e42:	d510      	bpl.n	8002e66 <HAL_RCC_OscConfig+0x1c2>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e44:	4b49      	ldr	r3, [pc, #292]	; (8002f6c <HAL_RCC_OscConfig+0x2c8>)
 8002e46:	7a22      	ldrb	r2, [r4, #8]
 8002e48:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e4a:	68a3      	ldr	r3, [r4, #8]
 8002e4c:	b1bb      	cbz	r3, 8002e7e <HAL_RCC_OscConfig+0x1da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4e:	f000 fcd7 	bl	8003800 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e52:	4d41      	ldr	r5, [pc, #260]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e56:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002e5c:	079b      	lsls	r3, r3, #30
 8002e5e:	d508      	bpl.n	8002e72 <HAL_RCC_OscConfig+0x1ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e60:	69a2      	ldr	r2, [r4, #24]
 8002e62:	b9da      	cbnz	r2, 8002e9c <HAL_RCC_OscConfig+0x1f8>
 8002e64:	e059      	b.n	8002f1a <HAL_RCC_OscConfig+0x276>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e66:	f000 fccb 	bl	8003800 <HAL_GetTick>
 8002e6a:	1b80      	subs	r0, r0, r6
 8002e6c:	2802      	cmp	r0, #2
 8002e6e:	d9e6      	bls.n	8002e3e <HAL_RCC_OscConfig+0x19a>
 8002e70:	e74a      	b.n	8002d08 <HAL_RCC_OscConfig+0x64>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f000 fcc5 	bl	8003800 <HAL_GetTick>
 8002e76:	1b80      	subs	r0, r0, r6
 8002e78:	42b8      	cmp	r0, r7
 8002e7a:	d9ee      	bls.n	8002e5a <HAL_RCC_OscConfig+0x1b6>
 8002e7c:	e744      	b.n	8002d08 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7e:	f000 fcbf 	bl	8003800 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e82:	4d35      	ldr	r5, [pc, #212]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e86:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002e8c:	0798      	lsls	r0, r3, #30
 8002e8e:	d5e7      	bpl.n	8002e60 <HAL_RCC_OscConfig+0x1bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f000 fcb6 	bl	8003800 <HAL_GetTick>
 8002e94:	1b80      	subs	r0, r0, r6
 8002e96:	42b8      	cmp	r0, r7
 8002e98:	d9f7      	bls.n	8002e8a <HAL_RCC_OscConfig+0x1e6>
 8002e9a:	e735      	b.n	8002d08 <HAL_RCC_OscConfig+0x64>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e9c:	4d2e      	ldr	r5, [pc, #184]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
 8002e9e:	68ab      	ldr	r3, [r5, #8]
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	f43f af1c 	beq.w	8002ce2 <HAL_RCC_OscConfig+0x3e>
 8002eaa:	4e31      	ldr	r6, [pc, #196]	; (8002f70 <HAL_RCC_OscConfig+0x2cc>)
 8002eac:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eae:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb0:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eb2:	d141      	bne.n	8002f38 <HAL_RCC_OscConfig+0x294>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f000 fca4 	bl	8003800 <HAL_GetTick>
 8002eb8:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eba:	682b      	ldr	r3, [r5, #0]
 8002ebc:	4f26      	ldr	r7, [pc, #152]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
 8002ebe:	0199      	lsls	r1, r3, #6
 8002ec0:	d42d      	bmi.n	8002f1e <HAL_RCC_OscConfig+0x27a>
 8002ec2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002ec6:	fa92 f2a2 	rbit	r2, r2
 8002eca:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ece:	fab2 fe82 	clz	lr, r2
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8002eda:	fab3 f583 	clz	r5, r3
 8002ede:	fa92 f2a2 	rbit	r2, r2
 8002ee2:	69e0      	ldr	r0, [r4, #28]
 8002ee4:	6a23      	ldr	r3, [r4, #32]
 8002ee6:	fab2 f182 	clz	r1, r2
 8002eea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002eec:	4303      	orrs	r3, r0
 8002eee:	fa02 f20e 	lsl.w	r2, r2, lr
 8002ef2:	ea43 0002 	orr.w	r0, r3, r2
 8002ef6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ef8:	085a      	lsrs	r2, r3, #1
 8002efa:	3a01      	subs	r2, #1
 8002efc:	fa02 f305 	lsl.w	r3, r2, r5
 8002f00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f02:	4303      	orrs	r3, r0
 8002f04:	408a      	lsls	r2, r1
 8002f06:	4313      	orrs	r3, r2
 8002f08:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0e:	f000 fc77 	bl	8003800 <HAL_GetTick>
 8002f12:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	019a      	lsls	r2, r3, #6
 8002f18:	d508      	bpl.n	8002f2c <HAL_RCC_OscConfig+0x288>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	e018      	b.n	8002f50 <HAL_RCC_OscConfig+0x2ac>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1e:	f000 fc6f 	bl	8003800 <HAL_GetTick>
 8002f22:	ebc8 0000 	rsb	r0, r8, r0
 8002f26:	2802      	cmp	r0, #2
 8002f28:	d9c7      	bls.n	8002eba <HAL_RCC_OscConfig+0x216>
 8002f2a:	e6ed      	b.n	8002d08 <HAL_RCC_OscConfig+0x64>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f2c:	f000 fc68 	bl	8003800 <HAL_GetTick>
 8002f30:	1b00      	subs	r0, r0, r4
 8002f32:	2802      	cmp	r0, #2
 8002f34:	d9ee      	bls.n	8002f14 <HAL_RCC_OscConfig+0x270>
 8002f36:	e6e7      	b.n	8002d08 <HAL_RCC_OscConfig+0x64>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f000 fc62 	bl	8003800 <HAL_GetTick>
 8002f3c:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3e:	682b      	ldr	r3, [r5, #0]
 8002f40:	019b      	lsls	r3, r3, #6
 8002f42:	d5ea      	bpl.n	8002f1a <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f44:	f000 fc5c 	bl	8003800 <HAL_GetTick>
 8002f48:	1b00      	subs	r0, r0, r4
 8002f4a:	2802      	cmp	r0, #2
 8002f4c:	d9f7      	bls.n	8002f3e <HAL_RCC_OscConfig+0x29a>
 8002f4e:	e6db      	b.n	8002d08 <HAL_RCC_OscConfig+0x64>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002f50:	b002      	add	sp, #8
 8002f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40023802 	.word	0x40023802
 8002f60:	42470000 	.word	0x42470000
 8002f64:	42470e80 	.word	0x42470e80
 8002f68:	40007000 	.word	0x40007000
 8002f6c:	40023870 	.word	0x40023870
 8002f70:	42470060 	.word	0x42470060

08002f74 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f74:	491b      	ldr	r1, [pc, #108]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x70>)
 8002f76:	688b      	ldr	r3, [r1, #8]
 8002f78:	f003 030c 	and.w	r3, r3, #12
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d02c      	beq.n	8002fda <HAL_RCC_GetSysClockFreq+0x66>
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d12c      	bne.n	8002fde <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f84:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f86:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f88:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f8c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002f90:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8002f94:	684b      	ldr	r3, [r1, #4]
 8002f96:	fa92 f2a2 	rbit	r2, r2
 8002f9a:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8002f9e:	fab2 f282 	clz	r2, r2
 8002fa2:	ea01 0103 	and.w	r1, r1, r3
 8002fa6:	fa21 f102 	lsr.w	r1, r1, r2
 8002faa:	bf14      	ite	ne
 8002fac:	4a0e      	ldrne	r2, [pc, #56]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8002fae:	4a0f      	ldreq	r2, [pc, #60]	; (8002fec <HAL_RCC_GetSysClockFreq+0x78>)
 8002fb0:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8002fb4:	4a0b      	ldr	r2, [pc, #44]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8002fb6:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8002fba:	6852      	ldr	r2, [r2, #4]
 8002fbc:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8002fc0:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8002fc4:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8002fc8:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8002fcc:	fa22 f000 	lsr.w	r0, r2, r0
 8002fd0:	3001      	adds	r0, #1
 8002fd2:	0040      	lsls	r0, r0, #1
 8002fd4:	fbb3 f0f0 	udiv	r0, r3, r0
 8002fd8:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fda:	4803      	ldr	r0, [pc, #12]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x74>)
 8002fdc:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fde:	4803      	ldr	r0, [pc, #12]	; (8002fec <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	017d7840 	.word	0x017d7840
 8002fec:	00f42400 	.word	0x00f42400

08002ff0 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ff0:	4b55      	ldr	r3, [pc, #340]	; (8003148 <HAL_RCC_ClockConfig+0x158>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	f002 020f 	and.w	r2, r2, #15
 8002ff8:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ffe:	4605      	mov	r5, r0
 8003000:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003002:	d30a      	bcc.n	800301a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003004:	6829      	ldr	r1, [r5, #0]
 8003006:	0788      	lsls	r0, r1, #30
 8003008:	d511      	bpl.n	800302e <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800300a:	4850      	ldr	r0, [pc, #320]	; (800314c <HAL_RCC_ClockConfig+0x15c>)
 800300c:	6883      	ldr	r3, [r0, #8]
 800300e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003012:	68ab      	ldr	r3, [r5, #8]
 8003014:	4313      	orrs	r3, r2
 8003016:	6083      	str	r3, [r0, #8]
 8003018:	e009      	b.n	800302e <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	b2ca      	uxtb	r2, r1
 800301c:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	4299      	cmp	r1, r3
 8003026:	d0ed      	beq.n	8003004 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8003028:	2001      	movs	r0, #1
 800302a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302e:	07c9      	lsls	r1, r1, #31
 8003030:	d406      	bmi.n	8003040 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003032:	4b45      	ldr	r3, [pc, #276]	; (8003148 <HAL_RCC_ClockConfig+0x158>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	f002 020f 	and.w	r2, r2, #15
 800303a:	4296      	cmp	r6, r2
 800303c:	d351      	bcc.n	80030e2 <HAL_RCC_ClockConfig+0xf2>
 800303e:	e057      	b.n	80030f0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003040:	686b      	ldr	r3, [r5, #4]
 8003042:	4a42      	ldr	r2, [pc, #264]	; (800314c <HAL_RCC_ClockConfig+0x15c>)
 8003044:	2b01      	cmp	r3, #1
 8003046:	d103      	bne.n	8003050 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800304e:	e008      	b.n	8003062 <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8003050:	1e99      	subs	r1, r3, #2
 8003052:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003054:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8003056:	d802      	bhi.n	800305e <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003058:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800305c:	e001      	b.n	8003062 <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305e:	f012 0f02 	tst.w	r2, #2
 8003062:	d0e1      	beq.n	8003028 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003064:	4c39      	ldr	r4, [pc, #228]	; (800314c <HAL_RCC_ClockConfig+0x15c>)
 8003066:	68a2      	ldr	r2, [r4, #8]
 8003068:	f022 0203 	bic.w	r2, r2, #3
 800306c:	4313      	orrs	r3, r2
 800306e:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003070:	f000 fbc6 	bl	8003800 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003074:	686b      	ldr	r3, [r5, #4]
 8003076:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003078:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800307a:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307e:	d10c      	bne.n	800309a <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003080:	68a3      	ldr	r3, [r4, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b04      	cmp	r3, #4
 8003088:	d0d3      	beq.n	8003032 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800308a:	f000 fbb9 	bl	8003800 <HAL_GetTick>
 800308e:	1bc0      	subs	r0, r0, r7
 8003090:	4540      	cmp	r0, r8
 8003092:	d9f5      	bls.n	8003080 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8003094:	2003      	movs	r0, #3
 8003096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800309a:	2b02      	cmp	r3, #2
 800309c:	d10a      	bne.n	80030b4 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800309e:	68a3      	ldr	r3, [r4, #8]
 80030a0:	f003 030c 	and.w	r3, r3, #12
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d0c4      	beq.n	8003032 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a8:	f000 fbaa 	bl	8003800 <HAL_GetTick>
 80030ac:	1bc0      	subs	r0, r0, r7
 80030ae:	4540      	cmp	r0, r8
 80030b0:	d9f5      	bls.n	800309e <HAL_RCC_ClockConfig+0xae>
 80030b2:	e7ef      	b.n	8003094 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d10f      	bne.n	80030d8 <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80030b8:	68a3      	ldr	r3, [r4, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b0c      	cmp	r3, #12
 80030c0:	d0b7      	beq.n	8003032 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c2:	f000 fb9d 	bl	8003800 <HAL_GetTick>
 80030c6:	1bc0      	subs	r0, r0, r7
 80030c8:	4540      	cmp	r0, r8
 80030ca:	d9f5      	bls.n	80030b8 <HAL_RCC_ClockConfig+0xc8>
 80030cc:	e7e2      	b.n	8003094 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ce:	f000 fb97 	bl	8003800 <HAL_GetTick>
 80030d2:	1bc0      	subs	r0, r0, r7
 80030d4:	4540      	cmp	r0, r8
 80030d6:	d8dd      	bhi.n	8003094 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030d8:	68a3      	ldr	r3, [r4, #8]
 80030da:	f013 0f0c 	tst.w	r3, #12
 80030de:	d1f6      	bne.n	80030ce <HAL_RCC_ClockConfig+0xde>
 80030e0:	e7a7      	b.n	8003032 <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	b2f2      	uxtb	r2, r6
 80030e4:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	429e      	cmp	r6, r3
 80030ee:	d19b      	bne.n	8003028 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f0:	6829      	ldr	r1, [r5, #0]
 80030f2:	074a      	lsls	r2, r1, #29
 80030f4:	d506      	bpl.n	8003104 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f6:	4815      	ldr	r0, [pc, #84]	; (800314c <HAL_RCC_ClockConfig+0x15c>)
 80030f8:	6883      	ldr	r3, [r0, #8]
 80030fa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030fe:	68eb      	ldr	r3, [r5, #12]
 8003100:	4313      	orrs	r3, r2
 8003102:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003104:	070b      	lsls	r3, r1, #28
 8003106:	d507      	bpl.n	8003118 <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003108:	4a10      	ldr	r2, [pc, #64]	; (800314c <HAL_RCC_ClockConfig+0x15c>)
 800310a:	6929      	ldr	r1, [r5, #16]
 800310c:	6893      	ldr	r3, [r2, #8]
 800310e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003112:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003116:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003118:	f7ff ff2c 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_RCC_ClockConfig+0x15c>)
 800311e:	22f0      	movs	r2, #240	; 0xf0
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	fa92 f2a2 	rbit	r2, r2
 8003126:	fab2 f282 	clz	r2, r2
 800312a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800312e:	40d3      	lsrs	r3, r2
 8003130:	4a07      	ldr	r2, [pc, #28]	; (8003150 <HAL_RCC_ClockConfig+0x160>)
 8003132:	5cd3      	ldrb	r3, [r2, r3]
 8003134:	40d8      	lsrs	r0, r3
 8003136:	4b07      	ldr	r3, [pc, #28]	; (8003154 <HAL_RCC_ClockConfig+0x164>)
 8003138:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800313a:	2000      	movs	r0, #0
 800313c:	f000 fbbe 	bl	80038bc <HAL_InitTick>
  
  return HAL_OK;
 8003140:	2000      	movs	r0, #0
}
 8003142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003146:	bf00      	nop
 8003148:	40023c00 	.word	0x40023c00
 800314c:	40023800 	.word	0x40023800
 8003150:	080071f9 	.word	0x080071f9
 8003154:	20000004 	.word	0x20000004

08003158 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003158:	4b01      	ldr	r3, [pc, #4]	; (8003160 <HAL_RCC_GetHCLKFreq+0x8>)
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	20000004 	.word	0x20000004

08003164 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8003164:	4b08      	ldr	r3, [pc, #32]	; (8003188 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003166:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	fa92 f2a2 	rbit	r2, r2
 8003170:	fab2 f282 	clz	r2, r2
 8003174:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003178:	40d3      	lsrs	r3, r2
 800317a:	4a04      	ldr	r2, [pc, #16]	; (800318c <HAL_RCC_GetPCLK1Freq+0x28>)
 800317c:	5cd3      	ldrb	r3, [r2, r3]
 800317e:	4a04      	ldr	r2, [pc, #16]	; (8003190 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8003180:	6810      	ldr	r0, [r2, #0]
}
 8003182:	40d8      	lsrs	r0, r3
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800
 800318c:	080071f9 	.word	0x080071f9
 8003190:	20000004 	.word	0x20000004

08003194 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003196:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	fa92 f2a2 	rbit	r2, r2
 80031a0:	fab2 f282 	clz	r2, r2
 80031a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80031a8:	40d3      	lsrs	r3, r2
 80031aa:	4a04      	ldr	r2, [pc, #16]	; (80031bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80031ac:	5cd3      	ldrb	r3, [r2, r3]
 80031ae:	4a04      	ldr	r2, [pc, #16]	; (80031c0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80031b0:	6810      	ldr	r0, [r2, #0]
} 
 80031b2:	40d8      	lsrs	r0, r3
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40023800 	.word	0x40023800
 80031bc:	080071f9 	.word	0x080071f9
 80031c0:	20000004 	.word	0x20000004

080031c4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031c4:	230f      	movs	r3, #15
 80031c6:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_RCC_GetClockConfig+0x34>)
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	f002 0203 	and.w	r2, r2, #3
 80031d0:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80031d8:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80031e0:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	08db      	lsrs	r3, r3, #3
 80031e6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80031ea:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <HAL_RCC_GetClockConfig+0x38>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	600b      	str	r3, [r1, #0]
 80031f6:	4770      	bx	lr
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40023c00 	.word	0x40023c00

08003200 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003204:	4f6a      	ldr	r7, [pc, #424]	; (80033b0 <HAL_GPIO_Init+0x1b0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003206:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003208:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 80033b8 <HAL_GPIO_Init+0x1b8>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800320c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80033bc <HAL_GPIO_Init+0x1bc>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003210:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003212:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003214:	9301      	str	r3, [sp, #4]
 8003216:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8003218:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800321a:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 800321c:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800321e:	ea34 0303 	bics.w	r3, r4, r3
 8003222:	f040 80bd 	bne.w	80033a0 <HAL_GPIO_Init+0x1a0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003226:	684d      	ldr	r5, [r1, #4]
 8003228:	f025 0a10 	bic.w	sl, r5, #16
 800322c:	f1ba 0f02 	cmp.w	sl, #2
 8003230:	d114      	bne.n	800325c <HAL_GPIO_Init+0x5c>
 8003232:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8003236:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800323a:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800323e:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8003242:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003246:	230f      	movs	r3, #15
 8003248:	fa03 f30b 	lsl.w	r3, r3, fp
 800324c:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003250:	690b      	ldr	r3, [r1, #16]
 8003252:	fa03 f30b 	lsl.w	r3, r3, fp
 8003256:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 8003258:	f8c9 3020 	str.w	r3, [r9, #32]
 800325c:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003260:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003264:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003266:	fa09 f90b 	lsl.w	r9, r9, fp
 800326a:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800326e:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003272:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003276:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800327a:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800327e:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003280:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8003284:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003286:	d80f      	bhi.n	80032a8 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003288:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 800328a:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800328c:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003290:	fa06 f60b 	lsl.w	r6, r6, fp
 8003294:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8003296:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003298:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800329a:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800329e:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032a2:	4096      	lsls	r6, r2
 80032a4:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 80032a6:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032a8:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032aa:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ae:	688b      	ldr	r3, [r1, #8]
 80032b0:	fa03 f30b 	lsl.w	r3, r3, fp
 80032b4:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 80032b8:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032ba:	00eb      	lsls	r3, r5, #3
 80032bc:	d570      	bpl.n	80033a0 <HAL_GPIO_Init+0x1a0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	9303      	str	r3, [sp, #12]
 80032c2:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032c6:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <HAL_GPIO_Init+0x1b4>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c8:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80032cc:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 80032d0:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 80032d4:	f022 0903 	bic.w	r9, r2, #3
 80032d8:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 80032dc:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80032e0:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 80032e4:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80032e6:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ea:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ec:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80032f0:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80032f4:	260f      	movs	r6, #15
 80032f6:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032fa:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80032fc:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003300:	d01c      	beq.n	800333c <HAL_GPIO_Init+0x13c>
 8003302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003306:	4298      	cmp	r0, r3
 8003308:	d01a      	beq.n	8003340 <HAL_GPIO_Init+0x140>
 800330a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800330e:	4298      	cmp	r0, r3
 8003310:	d018      	beq.n	8003344 <HAL_GPIO_Init+0x144>
 8003312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003316:	4298      	cmp	r0, r3
 8003318:	d016      	beq.n	8003348 <HAL_GPIO_Init+0x148>
 800331a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800331e:	4298      	cmp	r0, r3
 8003320:	d014      	beq.n	800334c <HAL_GPIO_Init+0x14c>
 8003322:	4540      	cmp	r0, r8
 8003324:	d014      	beq.n	8003350 <HAL_GPIO_Init+0x150>
 8003326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800332a:	4298      	cmp	r0, r3
 800332c:	d012      	beq.n	8003354 <HAL_GPIO_Init+0x154>
 800332e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003332:	4298      	cmp	r0, r3
 8003334:	bf14      	ite	ne
 8003336:	2308      	movne	r3, #8
 8003338:	2307      	moveq	r3, #7
 800333a:	e00c      	b.n	8003356 <HAL_GPIO_Init+0x156>
 800333c:	2300      	movs	r3, #0
 800333e:	e00a      	b.n	8003356 <HAL_GPIO_Init+0x156>
 8003340:	2301      	movs	r3, #1
 8003342:	e008      	b.n	8003356 <HAL_GPIO_Init+0x156>
 8003344:	2302      	movs	r3, #2
 8003346:	e006      	b.n	8003356 <HAL_GPIO_Init+0x156>
 8003348:	2303      	movs	r3, #3
 800334a:	e004      	b.n	8003356 <HAL_GPIO_Init+0x156>
 800334c:	2304      	movs	r3, #4
 800334e:	e002      	b.n	8003356 <HAL_GPIO_Init+0x156>
 8003350:	2305      	movs	r3, #5
 8003352:	e000      	b.n	8003356 <HAL_GPIO_Init+0x156>
 8003354:	2306      	movs	r3, #6
 8003356:	fa03 f30a 	lsl.w	r3, r3, sl
 800335a:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 800335c:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003360:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8003362:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003364:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8003368:	bf0c      	ite	eq
 800336a:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 800336c:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 800336e:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8003372:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003376:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 800337a:	bf0c      	ite	eq
 800337c:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 800337e:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8003380:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003382:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003384:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8003388:	bf0c      	ite	eq
 800338a:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 800338c:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 800338e:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8003392:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003396:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8003398:	bf54      	ite	pl
 800339a:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 800339c:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 800339e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a0:	3201      	adds	r2, #1
 80033a2:	2a10      	cmp	r2, #16
 80033a4:	f47f af38 	bne.w	8003218 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80033a8:	b005      	add	sp, #20
 80033aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033ae:	bf00      	nop
 80033b0:	40013c00 	.word	0x40013c00
 80033b4:	40020000 	.word	0x40020000
 80033b8:	40023800 	.word	0x40023800
 80033bc:	40021400 	.word	0x40021400

080033c0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033c0:	6803      	ldr	r3, [r0, #0]
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033c8:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033cc:	2118      	movs	r1, #24
 80033ce:	3a10      	subs	r2, #16
 80033d0:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033d4:	4904      	ldr	r1, [pc, #16]	; (80033e8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80033d6:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033d8:	bf88      	it	hi
 80033da:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033dc:	5c89      	ldrb	r1, [r1, r2]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033de:	6583      	str	r3, [r0, #88]	; 0x58
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033e0:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80033e2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	08007209 	.word	0x08007209

080033ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033ec:	b570      	push	{r4, r5, r6, lr}
 80033ee:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80033f0:	f000 fa06 	bl	8003800 <HAL_GetTick>
 80033f4:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033f6:	2c00      	cmp	r4, #0
 80033f8:	d064      	beq.n	80034c4 <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033fa:	2300      	movs	r3, #0
 80033fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003400:	6822      	ldr	r2, [r4, #0]
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003402:	2302      	movs	r3, #2
 8003404:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003408:	6813      	ldr	r3, [r2, #0]
 800340a:	f023 0301 	bic.w	r3, r3, #1
 800340e:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003410:	6821      	ldr	r1, [r4, #0]
 8003412:	680b      	ldr	r3, [r1, #0]
 8003414:	07d8      	lsls	r0, r3, #31
 8003416:	d508      	bpl.n	800342a <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003418:	f000 f9f2 	bl	8003800 <HAL_GetTick>
 800341c:	1b40      	subs	r0, r0, r5
 800341e:	2805      	cmp	r0, #5
 8003420:	d9f6      	bls.n	8003410 <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003422:	2320      	movs	r3, #32
 8003424:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003426:	2003      	movs	r0, #3
 8003428:	e051      	b.n	80034ce <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800342a:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800342c:	4a29      	ldr	r2, [pc, #164]	; (80034d4 <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800342e:	6865      	ldr	r5, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003430:	69a0      	ldr	r0, [r4, #24]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003432:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003434:	68a3      	ldr	r3, [r4, #8]
 8003436:	431d      	orrs	r5, r3
 8003438:	68e3      	ldr	r3, [r4, #12]
 800343a:	431d      	orrs	r5, r3
 800343c:	6923      	ldr	r3, [r4, #16]
 800343e:	431d      	orrs	r5, r3
 8003440:	6963      	ldr	r3, [r4, #20]
 8003442:	432b      	orrs	r3, r5
 8003444:	69e5      	ldr	r5, [r4, #28]
 8003446:	4303      	orrs	r3, r0
 8003448:	432b      	orrs	r3, r5
 800344a:	6a25      	ldr	r5, [r4, #32]
 800344c:	432b      	orrs	r3, r5
 800344e:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003450:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003452:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003454:	bf01      	itttt	eq
 8003456:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 8003458:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 800345a:	4335      	orreq	r5, r6
 800345c:	432b      	orreq	r3, r5
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800345e:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003460:	694b      	ldr	r3, [r1, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003462:	2a04      	cmp	r2, #4

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003464:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003468:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800346c:	d11c      	bne.n	80034a8 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800346e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003470:	4313      	orrs	r3, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003472:	b920      	cbnz	r0, 800347e <HAL_DMA_Init+0x92>
  {
    switch (tmp)
 8003474:	2a01      	cmp	r2, #1
 8003476:	d00b      	beq.n	8003490 <HAL_DMA_Init+0xa4>
 8003478:	d313      	bcc.n	80034a2 <HAL_DMA_Init+0xb6>
 800347a:	2a02      	cmp	r2, #2
 800347c:	e010      	b.n	80034a0 <HAL_DMA_Init+0xb4>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800347e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003482:	d10a      	bne.n	800349a <HAL_DMA_Init+0xae>
  {
    switch (tmp)
 8003484:	2a03      	cmp	r2, #3
 8003486:	d80f      	bhi.n	80034a8 <HAL_DMA_Init+0xbc>
 8003488:	e8df f002 	tbb	[pc, r2]
 800348c:	021e0b1e 	.word	0x021e0b1e
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003490:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003492:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 8003496:	d107      	bne.n	80034a8 <HAL_DMA_Init+0xbc>
 8003498:	e016      	b.n	80034c8 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800349a:	2a02      	cmp	r2, #2
 800349c:	d914      	bls.n	80034c8 <HAL_DMA_Init+0xdc>
 800349e:	2a03      	cmp	r2, #3
 80034a0:	d102      	bne.n	80034a8 <HAL_DMA_Init+0xbc>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80034a4:	01d2      	lsls	r2, r2, #7
 80034a6:	d40f      	bmi.n	80034c8 <HAL_DMA_Init+0xdc>
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034a8:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034aa:	4620      	mov	r0, r4
 80034ac:	f7ff ff88 	bl	80033c0 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034b0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80034b2:	233f      	movs	r3, #63	; 0x3f
 80034b4:	4093      	lsls	r3, r2
 80034b6:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034b8:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034ba:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034bc:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80034c4:	2001      	movs	r0, #1
 80034c6:	bd70      	pop	{r4, r5, r6, pc}
    tmp |= hdma->Init.FIFOThreshold;
    
    if(DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034c8:	2340      	movs	r3, #64	; 0x40
 80034ca:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034cc:	2001      	movs	r0, #1
 80034ce:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 80034d2:	bd70      	pop	{r4, r5, r6, pc}
 80034d4:	f010803f 	.word	0xf010803f

080034d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034d8:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034da:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80034de:	2c01      	cmp	r4, #1
 80034e0:	d038      	beq.n	8003554 <HAL_DMA_Start_IT+0x7c>
 80034e2:	2401      	movs	r4, #1
 80034e4:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034e8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ec:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034ee:	2c01      	cmp	r4, #1
 80034f0:	f04f 0500 	mov.w	r5, #0
 80034f4:	f04f 0402 	mov.w	r4, #2
 80034f8:	d128      	bne.n	800354c <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034fa:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034fe:	6804      	ldr	r4, [r0, #0]
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003500:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003502:	6825      	ldr	r5, [r4, #0]
 8003504:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8003508:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800350a:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800350c:	6883      	ldr	r3, [r0, #8]
 800350e:	2b40      	cmp	r3, #64	; 0x40
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003510:	bf0e      	itee	eq
 8003512:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8003514:	60a1      	strne	r1, [r4, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8003516:	60e2      	strne	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003518:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800351a:	bf08      	it	eq
 800351c:	60e1      	streq	r1, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800351e:	233f      	movs	r3, #63	; 0x3f
 8003520:	4093      	lsls	r3, r2
 8003522:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	f043 0316 	orr.w	r3, r3, #22
 800352a:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800352c:	6963      	ldr	r3, [r4, #20]
 800352e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003532:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003534:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003536:	b11b      	cbz	r3, 8003540 <HAL_DMA_Start_IT+0x68>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	f043 0308 	orr.w	r3, r3, #8
 800353e:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003540:	6823      	ldr	r3, [r4, #0]
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	6023      	str	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 8003548:	2000      	movs	r0, #0
 800354a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800354c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003550:	4620      	mov	r0, r4
 8003552:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003554:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 8003556:	bd70      	pop	{r4, r5, r6, pc}

08003558 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800355e:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8003560:	4b59      	ldr	r3, [pc, #356]	; (80036c8 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003562:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8003564:	681f      	ldr	r7, [r3, #0]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8003566:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003568:	2308      	movs	r3, #8
 800356a:	4093      	lsls	r3, r2
 800356c:	421e      	tst	r6, r3
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800356e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003570:	d00c      	beq.n	800358c <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003572:	6801      	ldr	r1, [r0, #0]
 8003574:	6808      	ldr	r0, [r1, #0]
 8003576:	0740      	lsls	r0, r0, #29
 8003578:	d508      	bpl.n	800358c <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800357a:	6808      	ldr	r0, [r1, #0]
 800357c:	f020 0004 	bic.w	r0, r0, #4
 8003580:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003582:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003584:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800358c:	4b4f      	ldr	r3, [pc, #316]	; (80036cc <HAL_DMA_IRQHandler+0x174>)
 800358e:	4093      	lsls	r3, r2
 8003590:	421e      	tst	r6, r3
 8003592:	d008      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003594:	6821      	ldr	r1, [r4, #0]
 8003596:	6949      	ldr	r1, [r1, #20]
 8003598:	0609      	lsls	r1, r1, #24
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800359a:	bf41      	itttt	mi
 800359c:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800359e:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 80035a0:	f043 0302 	orrmi.w	r3, r3, #2
 80035a4:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035a6:	4b4a      	ldr	r3, [pc, #296]	; (80036d0 <HAL_DMA_IRQHandler+0x178>)
 80035a8:	4093      	lsls	r3, r2
 80035aa:	421e      	tst	r6, r3
 80035ac:	d008      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035ae:	6821      	ldr	r1, [r4, #0]
 80035b0:	6809      	ldr	r1, [r1, #0]
 80035b2:	0788      	lsls	r0, r1, #30
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035b4:	bf41      	itttt	mi
 80035b6:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035b8:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 80035ba:	f043 0304 	orrmi.w	r3, r3, #4
 80035be:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035c0:	2310      	movs	r3, #16
 80035c2:	fa03 f202 	lsl.w	r2, r3, r2
 80035c6:	4216      	tst	r6, r2
 80035c8:	d017      	beq.n	80035fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	6819      	ldr	r1, [r3, #0]
 80035ce:	0709      	lsls	r1, r1, #28
 80035d0:	d513      	bpl.n	80035fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035d2:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	0350      	lsls	r0, r2, #13
 80035d8:	d504      	bpl.n	80035e4 <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	0319      	lsls	r1, r3, #12
 80035de:	d508      	bpl.n	80035f2 <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80035e2:	e007      	b.n	80035f4 <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	05d2      	lsls	r2, r2, #23
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035e8:	bf5e      	ittt	pl
 80035ea:	681a      	ldrpl	r2, [r3, #0]
 80035ec:	f022 0208 	bicpl.w	r2, r2, #8
 80035f0:	601a      	strpl	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035f4:	b10b      	cbz	r3, 80035fa <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035f6:	4620      	mov	r0, r4
 80035f8:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035fa:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80035fc:	2220      	movs	r2, #32
 80035fe:	408a      	lsls	r2, r1
 8003600:	4216      	tst	r6, r2
 8003602:	d03b      	beq.n	800367c <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	06c6      	lsls	r6, r0, #27
 800360a:	d537      	bpl.n	800367c <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800360c:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800360e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003612:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003614:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003616:	d119      	bne.n	800364c <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003618:	f022 0216 	bic.w	r2, r2, #22
 800361c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003624:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003626:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003628:	b90a      	cbnz	r2, 800362e <HAL_DMA_IRQHandler+0xd6>
 800362a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800362c:	b11a      	cbz	r2, 8003636 <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	f022 0208 	bic.w	r2, r2, #8
 8003634:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003636:	233f      	movs	r3, #63	; 0x3f
 8003638:	408b      	lsls	r3, r1
 800363a:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800363c:	2300      	movs	r3, #0
 800363e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003642:	2301      	movs	r3, #1
 8003644:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003648:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800364a:	e037      	b.n	80036bc <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800364c:	0350      	lsls	r0, r2, #13
 800364e:	d504      	bpl.n	800365a <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	0319      	lsls	r1, r3, #12
 8003654:	d40e      	bmi.n	8003674 <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003656:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003658:	e00d      	b.n	8003676 <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8003660:	d108      	bne.n	8003674 <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003662:	6819      	ldr	r1, [r3, #0]
 8003664:	f021 0110 	bic.w	r1, r1, #16
 8003668:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800366a:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800366c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003670:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003674:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003676:	b10b      	cbz	r3, 800367c <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003678:	4620      	mov	r0, r4
 800367a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800367c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800367e:	b303      	cbz	r3, 80036c2 <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003680:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003682:	07da      	lsls	r2, r3, #31
 8003684:	d519      	bpl.n	80036ba <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003686:	2305      	movs	r3, #5

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003688:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800368a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800368e:	6813      	ldr	r3, [r2, #0]
 8003690:	f023 0301 	bic.w	r3, r3, #1
 8003694:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8003696:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800369a:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);

      do
      {
        if (++count > timeout)
 800369e:	9b01      	ldr	r3, [sp, #4]
 80036a0:	3301      	adds	r3, #1
 80036a2:	429f      	cmp	r7, r3
 80036a4:	9301      	str	r3, [sp, #4]
 80036a6:	d302      	bcc.n	80036ae <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036a8:	6813      	ldr	r3, [r2, #0]
 80036aa:	07db      	lsls	r3, r3, #31
 80036ac:	d4f7      	bmi.n	800369e <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036ae:	2300      	movs	r3, #0
 80036b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036b4:	2301      	movs	r3, #1
 80036b6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80036ba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80036bc:	b10b      	cbz	r3, 80036c2 <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036be:	4620      	mov	r0, r4
 80036c0:	4798      	blx	r3
    }
  }
}
 80036c2:	b003      	add	sp, #12
 80036c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000004 	.word	0x20000004
 80036cc:	00800001 	.word	0x00800001
 80036d0:	00800004 	.word	0x00800004

080036d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036d4:	4a07      	ldr	r2, [pc, #28]	; (80036f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80036d6:	68d3      	ldr	r3, [r2, #12]
 80036d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80036dc:	041b      	lsls	r3, r3, #16
 80036de:	0c1b      	lsrs	r3, r3, #16
 80036e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80036e4:	0200      	lsls	r0, r0, #8
 80036e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80036ee:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80036f0:	60d3      	str	r3, [r2, #12]
 80036f2:	4770      	bx	lr
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036f8:	4b17      	ldr	r3, [pc, #92]	; (8003758 <HAL_NVIC_SetPriority+0x60>)
 80036fa:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036fc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003700:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003702:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003706:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003708:	2c04      	cmp	r4, #4
 800370a:	bf28      	it	cs
 800370c:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800370e:	2d06      	cmp	r5, #6

  return (
 8003710:	f04f 0501 	mov.w	r5, #1
 8003714:	fa05 f404 	lsl.w	r4, r5, r4
 8003718:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800371c:	bf8c      	ite	hi
 800371e:	3b03      	subhi	r3, #3
 8003720:	2300      	movls	r3, #0

  return (
 8003722:	400c      	ands	r4, r1
 8003724:	409c      	lsls	r4, r3
 8003726:	fa05 f303 	lsl.w	r3, r5, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800372e:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8003730:	ea42 0204 	orr.w	r2, r2, r4
 8003734:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003738:	bfaf      	iteee	ge
 800373a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373e:	f000 000f 	andlt.w	r0, r0, #15
 8003742:	4b06      	ldrlt	r3, [pc, #24]	; (800375c <HAL_NVIC_SetPriority+0x64>)
 8003744:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003746:	bfa5      	ittet	ge
 8003748:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800374c:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800374e:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003750:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8003754:	bd30      	pop	{r4, r5, pc}
 8003756:	bf00      	nop
 8003758:	e000ed00 	.word	0xe000ed00
 800375c:	e000ed14 	.word	0xe000ed14

08003760 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003760:	0942      	lsrs	r2, r0, #5
 8003762:	2301      	movs	r3, #1
 8003764:	f000 001f 	and.w	r0, r0, #31
 8003768:	fa03 f000 	lsl.w	r0, r3, r0
 800376c:	4b01      	ldr	r3, [pc, #4]	; (8003774 <HAL_NVIC_EnableIRQ+0x14>)
 800376e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003772:	4770      	bx	lr
 8003774:	e000e100 	.word	0xe000e100

08003778 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003778:	3801      	subs	r0, #1
 800377a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800377e:	d20a      	bcs.n	8003796 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003782:	4a07      	ldr	r2, [pc, #28]	; (80037a0 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003784:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003786:	21f0      	movs	r1, #240	; 0xf0
 8003788:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800378c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800378e:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003790:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8003796:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	e000e010 	.word	0xe000e010
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80037a4:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80037a6:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80037a8:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80037aa:	bf0c      	ite	eq
 80037ac:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80037b0:	f022 0204 	bicne.w	r2, r2, #4
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	4770      	bx	lr
 80037b8:	e000e010 	.word	0xe000e010

080037bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037bc:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037be:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <HAL_Init+0x30>)
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c6:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037ce:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037d8:	2003      	movs	r0, #3
 80037da:	f7ff ff7b 	bl	80036d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037de:	2000      	movs	r0, #0
 80037e0:	f000 f86c 	bl	80038bc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80037e4:	f000 f8a6 	bl	8003934 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80037e8:	2000      	movs	r0, #0
 80037ea:	bd08      	pop	{r3, pc}
 80037ec:	40023c00 	.word	0x40023c00

080037f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80037f0:	4a02      	ldr	r2, [pc, #8]	; (80037fc <HAL_IncTick+0xc>)
 80037f2:	6813      	ldr	r3, [r2, #0]
 80037f4:	3301      	adds	r3, #1
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	200042f8 	.word	0x200042f8

08003800 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003800:	4b01      	ldr	r3, [pc, #4]	; (8003808 <HAL_GetTick+0x8>)
 8003802:	6818      	ldr	r0, [r3, #0]
}
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	200042f8 	.word	0x200042f8

0800380c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800380c:	490f      	ldr	r1, [pc, #60]	; (800384c <SystemInit+0x40>)
 800380e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003812:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800381a:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <SystemInit+0x44>)
 800381c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800381e:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003820:	f042 0201 	orr.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003826:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800382e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003832:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003834:	4a07      	ldr	r2, [pc, #28]	; (8003854 <SystemInit+0x48>)
 8003836:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800383e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003840:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003842:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003846:	608b      	str	r3, [r1, #8]
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	e000ed00 	.word	0xe000ed00
 8003850:	40023800 	.word	0x40023800
 8003854:	24003010 	.word	0x24003010

08003858 <NMI_Handler>:
 8003858:	4770      	bx	lr

0800385a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800385a:	e7fe      	b.n	800385a <HardFault_Handler>

0800385c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800385c:	e7fe      	b.n	800385c <MemManage_Handler>

0800385e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800385e:	e7fe      	b.n	800385e <BusFault_Handler>

08003860 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003860:	e7fe      	b.n	8003860 <UsageFault_Handler>

08003862 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8003862:	4770      	bx	lr

08003864 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8003864:	f7fe be84 	b.w	8002570 <osSystickHandler>

08003868 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003868:	4801      	ldr	r0, [pc, #4]	; (8003870 <DMA1_Stream1_IRQHandler+0x8>)
 800386a:	f7ff be75 	b.w	8003558 <HAL_DMA_IRQHandler>
 800386e:	bf00      	nop
 8003870:	20004418 	.word	0x20004418

08003874 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003874:	4801      	ldr	r0, [pc, #4]	; (800387c <DMA1_Stream3_IRQHandler+0x8>)
 8003876:	f7ff be6f 	b.w	8003558 <HAL_DMA_IRQHandler>
 800387a:	bf00      	nop
 800387c:	200044d4 	.word	0x200044d4

08003880 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003880:	4801      	ldr	r0, [pc, #4]	; (8003888 <DMA1_Stream5_IRQHandler+0x8>)
 8003882:	f7ff be69 	b.w	8003558 <HAL_DMA_IRQHandler>
 8003886:	bf00      	nop
 8003888:	2000433c 	.word	0x2000433c

0800388c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800388c:	4801      	ldr	r0, [pc, #4]	; (8003894 <DMA1_Stream6_IRQHandler+0x8>)
 800388e:	f7ff be63 	b.w	8003558 <HAL_DMA_IRQHandler>
 8003892:	bf00      	nop
 8003894:	2000459c 	.word	0x2000459c

08003898 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003898:	4801      	ldr	r0, [pc, #4]	; (80038a0 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800389a:	f7ff b8e2 	b.w	8002a62 <HAL_TIM_IRQHandler>
 800389e:	bf00      	nop
 80038a0:	200042fc 	.word	0x200042fc

080038a4 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80038a4:	4801      	ldr	r0, [pc, #4]	; (80038ac <DMA2_Stream1_IRQHandler+0x8>)
 80038a6:	f7ff be57 	b.w	8003558 <HAL_DMA_IRQHandler>
 80038aa:	bf00      	nop
 80038ac:	200043a0 	.word	0x200043a0

080038b0 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80038b0:	4801      	ldr	r0, [pc, #4]	; (80038b8 <DMA2_Stream6_IRQHandler+0x8>)
 80038b2:	f7ff be51 	b.w	8003558 <HAL_DMA_IRQHandler>
 80038b6:	bf00      	nop
 80038b8:	2000453c 	.word	0x2000453c

080038bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038bc:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80038be:	4601      	mov	r1, r0
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038c0:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80038c2:	2200      	movs	r2, #0
 80038c4:	2019      	movs	r0, #25
 80038c6:	f7ff ff17 	bl	80036f8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80038ca:	2019      	movs	r0, #25
 80038cc:	f7ff ff48 	bl	8003760 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80038d0:	2500      	movs	r5, #0
 80038d2:	4b14      	ldr	r3, [pc, #80]	; (8003924 <HAL_InitTick+0x68>)
 80038d4:	9502      	str	r5, [sp, #8]
 80038d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80038d8:	4c13      	ldr	r4, [pc, #76]	; (8003928 <HAL_InitTick+0x6c>)
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	645a      	str	r2, [r3, #68]	; 0x44
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	9302      	str	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038e8:	a901      	add	r1, sp, #4
 80038ea:	a803      	add	r0, sp, #12
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80038ec:	9b02      	ldr	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038ee:	f7ff fc69 	bl	80031c4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80038f2:	f7ff fc4f 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80038f6:	4b0d      	ldr	r3, [pc, #52]	; (800392c <HAL_InitTick+0x70>)
 80038f8:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80038fa:	f240 33e7 	movw	r3, #999	; 0x3e7
 80038fe:	60e3      	str	r3, [r4, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_InitTick+0x74>)
 8003902:	fbb0 f0f3 	udiv	r0, r0, r3
 8003906:	3801      	subs	r0, #1
 8003908:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800390a:	4620      	mov	r0, r4
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800390c:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800390e:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003910:	f7ff f9ae 	bl	8002c70 <HAL_TIM_Base_Init>
 8003914:	b918      	cbnz	r0, 800391e <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003916:	4620      	mov	r0, r4
 8003918:	f7ff f894 	bl	8002a44 <HAL_TIM_Base_Start_IT>
 800391c:	e000      	b.n	8003920 <HAL_InitTick+0x64>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800391e:	2001      	movs	r0, #1
}
 8003920:	b009      	add	sp, #36	; 0x24
 8003922:	bd30      	pop	{r4, r5, pc}
 8003924:	40023800 	.word	0x40023800
 8003928:	200042fc 	.word	0x200042fc
 800392c:	40010000 	.word	0x40010000
 8003930:	000f4240 	.word	0x000f4240

08003934 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003934:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003936:	2003      	movs	r0, #3
 8003938:	f7ff fecc 	bl	80036d4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800393c:	2200      	movs	r2, #0
 800393e:	4611      	mov	r1, r2
 8003940:	f06f 000b 	mvn.w	r0, #11
 8003944:	f7ff fed8 	bl	80036f8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003948:	2200      	movs	r2, #0
 800394a:	4611      	mov	r1, r2
 800394c:	f06f 000a 	mvn.w	r0, #10
 8003950:	f7ff fed2 	bl	80036f8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003954:	2200      	movs	r2, #0
 8003956:	4611      	mov	r1, r2
 8003958:	f06f 0009 	mvn.w	r0, #9
 800395c:	f7ff fecc 	bl	80036f8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003960:	2200      	movs	r2, #0
 8003962:	4611      	mov	r1, r2
 8003964:	f06f 0004 	mvn.w	r0, #4
 8003968:	f7ff fec6 	bl	80036f8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800396c:	2200      	movs	r2, #0
 800396e:	4611      	mov	r1, r2
 8003970:	f06f 0003 	mvn.w	r0, #3
 8003974:	f7ff fec0 	bl	80036f8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003978:	2200      	movs	r2, #0
 800397a:	210f      	movs	r1, #15
 800397c:	f06f 0001 	mvn.w	r0, #1
 8003980:	f7ff feba 	bl	80036f8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003984:	2200      	movs	r2, #0
 8003986:	210f      	movs	r1, #15
 8003988:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800398c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003990:	f7ff beb2 	b.w	80036f8 <HAL_NVIC_SetPriority>

08003994 <HAL_UART_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003994:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003996:	6803      	ldr	r3, [r0, #0]
 8003998:	4a80      	ldr	r2, [pc, #512]	; (8003b9c <HAL_UART_MspInit+0x208>)
 800399a:	4293      	cmp	r3, r2

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800399c:	b08a      	sub	sp, #40	; 0x28
 800399e:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80039a0:	d11b      	bne.n	80039da <HAL_UART_MspInit+0x46>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	4b7e      	ldr	r3, [pc, #504]	; (8003ba0 <HAL_UART_MspInit+0x20c>)
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a8:	487e      	ldr	r0, [pc, #504]	; (8003ba4 <HAL_UART_MspInit+0x210>)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ac:	f042 0210 	orr.w	r2, r2, #16
 80039b0:	645a      	str	r2, [r3, #68]	; 0x44
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 80039bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039c0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c2:	2302      	movs	r3, #2
 80039c4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039c6:	2301      	movs	r3, #1
 80039c8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ca:	2303      	movs	r3, #3
 80039cc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ce:	a905      	add	r1, sp, #20
    */
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039d0:	2307      	movs	r3, #7
 80039d2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d4:	f7ff fc14 	bl	8003200 <HAL_GPIO_Init>
 80039d8:	e0de      	b.n	8003b98 <HAL_UART_MspInit+0x204>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80039da:	4a73      	ldr	r2, [pc, #460]	; (8003ba8 <HAL_UART_MspInit+0x214>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d138      	bne.n	8003a52 <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80039e0:	2600      	movs	r6, #0
 80039e2:	4b6f      	ldr	r3, [pc, #444]	; (8003ba0 <HAL_UART_MspInit+0x20c>)
 80039e4:	9602      	str	r6, [sp, #8]
 80039e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = Motor1_TX_Pin|Motor1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e8:	486e      	ldr	r0, [pc, #440]	; (8003ba4 <HAL_UART_MspInit+0x210>)

    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80039ea:	4c70      	ldr	r4, [pc, #448]	; (8003bac <HAL_UART_MspInit+0x218>)
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80039ec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80039f0:	641a      	str	r2, [r3, #64]	; 0x40
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f8:	9302      	str	r3, [sp, #8]
 80039fa:	9b02      	ldr	r3, [sp, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = Motor1_TX_Pin|Motor1_RX_Pin;
 80039fc:	230c      	movs	r3, #12
 80039fe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a00:	2302      	movs	r3, #2
 8003a02:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a04:	2301      	movs	r3, #1
 8003a06:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a0c:	a905      	add	r1, sp, #20
    */
    GPIO_InitStruct.Pin = Motor1_TX_Pin|Motor1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a0e:	2307      	movs	r3, #7
 8003a10:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a12:	f7ff fbf5 	bl	8003200 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003a16:	4966      	ldr	r1, [pc, #408]	; (8003bb0 <HAL_UART_MspInit+0x21c>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a18:	60a6      	str	r6, [r4, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003a1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a1e:	e884 000a 	stmia.w	r4, {r1, r3}
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a26:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a2c:	61e3      	str	r3, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003a2e:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003a30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a34:	60e6      	str	r6, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a36:	6166      	str	r6, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a38:	61a6      	str	r6, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003a3a:	6223      	str	r3, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a3c:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003a3e:	f7ff fcd5 	bl	80033ec <HAL_DMA_Init>
 8003a42:	b108      	cbz	r0, 8003a48 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8003a44:	f000 fc2c 	bl	80042a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003a48:	636c      	str	r4, [r5, #52]	; 0x34

    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003a4a:	4b5a      	ldr	r3, [pc, #360]	; (8003bb4 <HAL_UART_MspInit+0x220>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003a4c:	63a5      	str	r5, [r4, #56]	; 0x38

    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003a4e:	4c5a      	ldr	r4, [pc, #360]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 8003a50:	e03b      	b.n	8003aca <HAL_UART_MspInit+0x136>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8003a52:	4a5a      	ldr	r2, [pc, #360]	; (8003bbc <HAL_UART_MspInit+0x228>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d14c      	bne.n	8003af2 <HAL_UART_MspInit+0x15e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a58:	2600      	movs	r6, #0
 8003a5a:	4b51      	ldr	r3, [pc, #324]	; (8003ba0 <HAL_UART_MspInit+0x20c>)
 8003a5c:	9603      	str	r6, [sp, #12]
 8003a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = Motor2_TX_Pin|Motor2_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a60:	4857      	ldr	r0, [pc, #348]	; (8003bc0 <HAL_UART_MspInit+0x22c>)

    /* Peripheral DMA init*/
  
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003a62:	4c58      	ldr	r4, [pc, #352]	; (8003bc4 <HAL_UART_MspInit+0x230>)
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a64:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a70:	9303      	str	r3, [sp, #12]
 8003a72:	9b03      	ldr	r3, [sp, #12]
  
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = Motor2_TX_Pin|Motor2_RX_Pin;
 8003a74:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a78:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a82:	2303      	movs	r3, #3
 8003a84:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a86:	a905      	add	r1, sp, #20
    */
    GPIO_InitStruct.Pin = Motor2_TX_Pin|Motor2_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a88:	2307      	movs	r3, #7
 8003a8a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a8c:	f7ff fbb8 	bl	8003200 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart3_rx.Instance = DMA1_Stream1;
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003a90:	4a4d      	ldr	r2, [pc, #308]	; (8003bc8 <HAL_UART_MspInit+0x234>)
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a92:	60a6      	str	r6, [r4, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_usart3_rx.Instance = DMA1_Stream1;
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003a94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a98:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aa0:	6123      	str	r3, [r4, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003aa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003aa6:	61e3      	str	r3, [r4, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003aa8:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003aaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    /* Peripheral DMA init*/
  
    hdma_usart3_rx.Instance = DMA1_Stream1;
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aae:	60e6      	str	r6, [r4, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ab0:	6166      	str	r6, [r4, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ab2:	61a6      	str	r6, [r4, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003ab4:	6223      	str	r3, [r4, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ab6:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003ab8:	f7ff fc98 	bl	80033ec <HAL_DMA_Init>
 8003abc:	b108      	cbz	r0, 8003ac2 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8003abe:	f000 fbef 	bl	80042a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003ac2:	636c      	str	r4, [r5, #52]	; 0x34

    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003ac4:	4b41      	ldr	r3, [pc, #260]	; (8003bcc <HAL_UART_MspInit+0x238>)
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003ac6:	63a5      	str	r5, [r4, #56]	; 0x38

    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003ac8:	4c41      	ldr	r4, [pc, #260]	; (8003bd0 <HAL_UART_MspInit+0x23c>)
 8003aca:	6023      	str	r3, [r4, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003acc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);

    hdma_usart3_tx.Instance = DMA1_Stream3;
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003ad0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ad4:	6063      	str	r3, [r4, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ad6:	6122      	str	r2, [r4, #16]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);

    hdma_usart3_tx.Instance = DMA1_Stream3;
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ad8:	2340      	movs	r3, #64	; 0x40
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 8003ada:	f44f 7280 	mov.w	r2, #256	; 0x100

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);

    hdma_usart3_tx.Instance = DMA1_Stream3;
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ade:	60a3      	str	r3, [r4, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 8003ae0:	61e2      	str	r2, [r4, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);

    hdma_usart3_tx.Instance = DMA1_Stream3;
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ae2:	2300      	movs	r3, #0
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003ae4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);

    hdma_usart3_tx.Instance = DMA1_Stream3;
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ae8:	60e3      	str	r3, [r4, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003aea:	6163      	str	r3, [r4, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003aec:	61a3      	str	r3, [r4, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003aee:	6222      	str	r2, [r4, #32]
 8003af0:	e049      	b.n	8003b86 <HAL_UART_MspInit+0x1f2>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8003af2:	4a38      	ldr	r2, [pc, #224]	; (8003bd4 <HAL_UART_MspInit+0x240>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d14f      	bne.n	8003b98 <HAL_UART_MspInit+0x204>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003af8:	2600      	movs	r6, #0
 8003afa:	4b29      	ldr	r3, [pc, #164]	; (8003ba0 <HAL_UART_MspInit+0x20c>)
 8003afc:	9604      	str	r6, [sp, #16]
 8003afe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = iNemo_TX_Pin|iNemo_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b00:	4835      	ldr	r0, [pc, #212]	; (8003bd8 <HAL_UART_MspInit+0x244>)

    /* Peripheral DMA init*/
  
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003b02:	4c36      	ldr	r4, [pc, #216]	; (8003bdc <HAL_UART_MspInit+0x248>)
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003b04:	f042 0220 	orr.w	r2, r2, #32
 8003b08:	645a      	str	r2, [r3, #68]	; 0x44
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	9304      	str	r3, [sp, #16]
 8003b12:	9b04      	ldr	r3, [sp, #16]
  
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = iNemo_TX_Pin|iNemo_RX_Pin;
 8003b14:	23c0      	movs	r3, #192	; 0xc0
 8003b16:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b20:	2303      	movs	r3, #3
 8003b22:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b24:	a905      	add	r1, sp, #20
    */
    GPIO_InitStruct.Pin = iNemo_TX_Pin|iNemo_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003b26:	2308      	movs	r3, #8
 8003b28:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b2a:	f7ff fb69 	bl	8003200 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart6_rx.Instance = DMA2_Stream1;
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003b2e:	4b2c      	ldr	r3, [pc, #176]	; (8003be0 <HAL_UART_MspInit+0x24c>)
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b30:	60a6      	str	r6, [r4, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_usart6_rx.Instance = DMA2_Stream1;
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003b32:	f04f 6c20 	mov.w	ip, #167772160	; 0xa000000
 8003b36:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b3e:	6123      	str	r3, [r4, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003b40:	4620      	mov	r0, r4
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003b42:	f44f 7380 	mov.w	r3, #256	; 0x100
    /* Peripheral DMA init*/
  
    hdma_usart6_rx.Instance = DMA2_Stream1;
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b46:	60e6      	str	r6, [r4, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b48:	6166      	str	r6, [r4, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b4a:	61a6      	str	r6, [r4, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003b4c:	61e3      	str	r3, [r4, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b4e:	6226      	str	r6, [r4, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b50:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003b52:	f7ff fc4b 	bl	80033ec <HAL_DMA_Init>
 8003b56:	b108      	cbz	r0, 8003b5c <HAL_UART_MspInit+0x1c8>
    {
      Error_Handler();
 8003b58:	f000 fba2 	bl	80042a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003b5c:	636c      	str	r4, [r5, #52]	; 0x34

    hdma_usart6_tx.Instance = DMA2_Stream6;
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b5e:	4b21      	ldr	r3, [pc, #132]	; (8003be4 <HAL_UART_MspInit+0x250>)
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003b60:	63a5      	str	r5, [r4, #56]	; 0x38

    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003b62:	4c21      	ldr	r4, [pc, #132]	; (8003be8 <HAL_UART_MspInit+0x254>)
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b64:	f44f 6280 	mov.w	r2, #1024	; 0x400

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);

    hdma_usart6_tx.Instance = DMA2_Stream6;
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b68:	f04f 6620 	mov.w	r6, #167772160	; 0xa000000
 8003b6c:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8003b70:	e884 4048 	stmia.w	r4, {r3, r6, lr}
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b74:	6122      	str	r2, [r4, #16]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);

    hdma_usart6_tx.Instance = DMA2_Stream6;
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b76:	2300      	movs	r3, #0
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 8003b78:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);

    hdma_usart6_tx.Instance = DMA2_Stream6;
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b7c:	60e3      	str	r3, [r4, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b7e:	6163      	str	r3, [r4, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b80:	61a3      	str	r3, [r4, #24]
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 8003b82:	61e2      	str	r2, [r4, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b84:	6223      	str	r3, [r4, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b86:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003b88:	4620      	mov	r0, r4
 8003b8a:	f7ff fc2f 	bl	80033ec <HAL_DMA_Init>
 8003b8e:	b108      	cbz	r0, 8003b94 <HAL_UART_MspInit+0x200>
    {
      Error_Handler();
 8003b90:	f000 fb86 	bl	80042a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8003b94:	632c      	str	r4, [r5, #48]	; 0x30
 8003b96:	63a5      	str	r5, [r4, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003b98:	b00a      	add	sp, #40	; 0x28
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}
 8003b9c:	40011000 	.word	0x40011000
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	40020000 	.word	0x40020000
 8003ba8:	40004400 	.word	0x40004400
 8003bac:	2000433c 	.word	0x2000433c
 8003bb0:	40026088 	.word	0x40026088
 8003bb4:	400260a0 	.word	0x400260a0
 8003bb8:	2000459c 	.word	0x2000459c
 8003bbc:	40004800 	.word	0x40004800
 8003bc0:	40020400 	.word	0x40020400
 8003bc4:	20004418 	.word	0x20004418
 8003bc8:	40026028 	.word	0x40026028
 8003bcc:	40026058 	.word	0x40026058
 8003bd0:	200044d4 	.word	0x200044d4
 8003bd4:	40011400 	.word	0x40011400
 8003bd8:	40020800 	.word	0x40020800
 8003bdc:	200043a0 	.word	0x200043a0
 8003be0:	40026428 	.word	0x40026428
 8003be4:	400264a0 	.word	0x400264a0
 8003be8:	2000453c 	.word	0x2000453c

08003bec <StartTXMotor2>:
  /* USER CODE END StartTXMotor1 */
}

/* StartTXMotor2 function */
void StartTXMotor2(void const * argument)
{
 8003bec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTXMotor2 */
        /* Infinite loop */
        for(;; )
        {
                osDelay(Ts);
 8003bee:	4c02      	ldr	r4, [pc, #8]	; (8003bf8 <StartTXMotor2+0xc>)
 8003bf0:	7820      	ldrb	r0, [r4, #0]
 8003bf2:	f7fe fc03 	bl	80023fc <osDelay>
 8003bf6:	e7fb      	b.n	8003bf0 <StartTXMotor2+0x4>
 8003bf8:	20000008 	.word	0x20000008

08003bfc <StartTXMotor1>:
 8003bfc:	b508      	push	{r3, lr}
 8003bfe:	f7ff fff5 	bl	8003bec <StartTXMotor2>

08003c02 <StartRXPC>:
 8003c02:	b508      	push	{r3, lr}
 8003c04:	f7ff fff2 	bl	8003bec <StartTXMotor2>

08003c08 <StartTXPC>:
 8003c08:	b508      	push	{r3, lr}
 8003c0a:	f7ff ffef 	bl	8003bec <StartTXMotor2>
	...

08003c10 <StartDefaultTask>:
}
/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8003c10:	b500      	push	{lr}
 8003c12:	b089      	sub	sp, #36	; 0x24
//        Motor_Init();
//        osDelay(10000);
//        Motor_Kill();
			char str[32];
			uint8_t tt = 0xAA;
			sprintf(str, "%d", tt);
 8003c14:	22aa      	movs	r2, #170	; 0xaa
 8003c16:	490d      	ldr	r1, [pc, #52]	; (8003c4c <StartDefaultTask+0x3c>)
 8003c18:	4668      	mov	r0, sp
 8003c1a:	f000 fba7 	bl	800436c <sprintf>
			HAL_UART_Transmit(&huart1,(uint8_t *)str, 100,500);
 8003c1e:	2264      	movs	r2, #100	; 0x64
 8003c20:	4669      	mov	r1, sp
 8003c22:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003c26:	480a      	ldr	r0, [pc, #40]	; (8003c50 <StartDefaultTask+0x40>)
 8003c28:	f7fe fe2e 	bl	8002888 <HAL_UART_Transmit>
	        osDelay(100);
 8003c2c:	2064      	movs	r0, #100	; 0x64
 8003c2e:	f7fe fbe5 	bl	80023fc <osDelay>
	        HAL_UART_Transmit_DMA(&huart1,(uint8_t *)test, strlen(test));
 8003c32:	4808      	ldr	r0, [pc, #32]	; (8003c54 <StartDefaultTask+0x44>)
 8003c34:	f7fc facc 	bl	80001d0 <strlen>
 8003c38:	4906      	ldr	r1, [pc, #24]	; (8003c54 <StartDefaultTask+0x44>)
 8003c3a:	b282      	uxth	r2, r0
 8003c3c:	4804      	ldr	r0, [pc, #16]	; (8003c50 <StartDefaultTask+0x40>)
 8003c3e:	f7fe fe7f 	bl	8002940 <HAL_UART_Transmit_DMA>
        for(;; )
        {

                osDelay(500); //TODO Remove
 8003c42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c46:	f7fe fbd9 	bl	80023fc <osDelay>
 8003c4a:	e7fa      	b.n	8003c42 <StartDefaultTask+0x32>
 8003c4c:	08007211 	.word	0x08007211
 8003c50:	2000460c 	.word	0x2000460c
 8003c54:	20000009 	.word	0x20000009

08003c58 <StartRXiNemo>:
  /* USER CODE END StartRXPC */
}

/* StartRXiNemo function */
void StartRXiNemo(void const * argument)
{
 8003c58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartRXiNemo */
        /* Infinite loop */
        for(;; )
        {
                mptr = osPoolAlloc(mpool);         // Allocate memory for the message
 8003c5a:	4e0f      	ldr	r6, [pc, #60]	; (8003c98 <StartRXiNemo+0x40>)
 8003c5c:	4d0f      	ldr	r5, [pc, #60]	; (8003c9c <StartRXiNemo+0x44>)
                mptr->acc[2] = 1;
                mptr->gyr[0] = 2;
                mptr->gyr[1] = 1;
                mptr->gyr[2] = 2;
                mptr->dist = 1;
                osMessagePut(RXBoxiNemoHandle, (uint32_t)mptr, osWaitForever); // Send Message
 8003c5e:	4c10      	ldr	r4, [pc, #64]	; (8003ca0 <StartRXiNemo+0x48>)
{
  /* USER CODE BEGIN StartRXiNemo */
        /* Infinite loop */
        for(;; )
        {
                mptr = osPoolAlloc(mpool);         // Allocate memory for the message
 8003c60:	6830      	ldr	r0, [r6, #0]
 8003c62:	f7fe fbd3 	bl	800240c <osPoolAlloc>
                mptr->acc[0] = 1;                                   //TODO Put code here: mptr->voltage = 223.72;
 8003c66:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
                mptr->acc[1] = 2;
 8003c6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
  /* USER CODE BEGIN StartRXiNemo */
        /* Infinite loop */
        for(;; )
        {
                mptr = osPoolAlloc(mpool);         // Allocate memory for the message
 8003c6e:	4601      	mov	r1, r0
                mptr->acc[0] = 1;                                   //TODO Put code here: mptr->voltage = 223.72;
 8003c70:	61c3      	str	r3, [r0, #28]
                mptr->acc[1] = 2;
                mptr->acc[2] = 1;
 8003c72:	6243      	str	r3, [r0, #36]	; 0x24
                mptr->gyr[0] = 2;
                mptr->gyr[1] = 1;
 8003c74:	62c3      	str	r3, [r0, #44]	; 0x2c
                mptr->gyr[2] = 2;
                mptr->dist = 1;
 8003c76:	6183      	str	r3, [r0, #24]
{
  /* USER CODE BEGIN StartRXiNemo */
        /* Infinite loop */
        for(;; )
        {
                mptr = osPoolAlloc(mpool);         // Allocate memory for the message
 8003c78:	6028      	str	r0, [r5, #0]
                mptr->acc[0] = 1;                                   //TODO Put code here: mptr->voltage = 223.72;
                mptr->acc[1] = 2;
 8003c7a:	6202      	str	r2, [r0, #32]
                mptr->acc[2] = 1;
                mptr->gyr[0] = 2;
 8003c7c:	6282      	str	r2, [r0, #40]	; 0x28
                mptr->gyr[1] = 1;
                mptr->gyr[2] = 2;
 8003c7e:	6302      	str	r2, [r0, #48]	; 0x30
                mptr->dist = 1;
                osMessagePut(RXBoxiNemoHandle, (uint32_t)mptr, osWaitForever); // Send Message
 8003c80:	f04f 32ff 	mov.w	r2, #4294967295
 8003c84:	6820      	ldr	r0, [r4, #0]
 8003c86:	f7fe fc0f 	bl	80024a8 <osMessagePut>
                osThreadYield(); // Cooperative multitasking
 8003c8a:	f7fe fbab 	bl	80023e4 <osThreadYield>
                // We are done here, exit this thread
                osDelay(Ts);
 8003c8e:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <StartRXiNemo+0x4c>)
 8003c90:	7818      	ldrb	r0, [r3, #0]
 8003c92:	f7fe fbb3 	bl	80023fc <osDelay>
 8003c96:	e7e3      	b.n	8003c60 <StartRXiNemo+0x8>
 8003c98:	20004608 	.word	0x20004608
 8003c9c:	2000466c 	.word	0x2000466c
 8003ca0:	200044bc 	.word	0x200044bc
 8003ca4:	20000008 	.word	0x20000008

08003ca8 <StartRXMotor1>:
  /* USER CODE END StartTXMotor2 */
}

/* StartRXMotor1 function */
void StartRXMotor1(void const * argument)
{
 8003ca8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartRXMotor1 */
        /* Infinite loop */
        for(;; )
        {
                mptr = osPoolAlloc(mpool);         // Allocate memory for the message
 8003caa:	4e0c      	ldr	r6, [pc, #48]	; (8003cdc <StartRXMotor1+0x34>)
 8003cac:	4d0c      	ldr	r5, [pc, #48]	; (8003ce0 <StartRXMotor1+0x38>)
                mptr->current[0] = 5.5;
                mptr->velocity[0] = 5.5;
                mptr->position[0] = 5.5;                                   //TODO Put code here: mptr->voltage = 223.72;
                osMessagePut(RXBoxM1Handle, (uint32_t)mptr, osWaitForever); // Send Message
 8003cae:	4c0d      	ldr	r4, [pc, #52]	; (8003ce4 <StartRXMotor1+0x3c>)
{
  /* USER CODE BEGIN StartRXMotor1 */
        /* Infinite loop */
        for(;; )
        {
                mptr = osPoolAlloc(mpool);         // Allocate memory for the message
 8003cb0:	6830      	ldr	r0, [r6, #0]
 8003cb2:	f7fe fbab 	bl	800240c <osPoolAlloc>
                mptr->current[0] = 5.5;
 8003cb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <StartRXMotor1+0x40>)
{
  /* USER CODE BEGIN StartRXMotor1 */
        /* Infinite loop */
        for(;; )
        {
                mptr = osPoolAlloc(mpool);         // Allocate memory for the message
 8003cb8:	6028      	str	r0, [r5, #0]
 8003cba:	4601      	mov	r1, r0
                mptr->current[0] = 5.5;
 8003cbc:	6003      	str	r3, [r0, #0]
                mptr->velocity[0] = 5.5;
 8003cbe:	6083      	str	r3, [r0, #8]
                mptr->position[0] = 5.5;                                   //TODO Put code here: mptr->voltage = 223.72;
 8003cc0:	6103      	str	r3, [r0, #16]
                osMessagePut(RXBoxM1Handle, (uint32_t)mptr, osWaitForever); // Send Message
 8003cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc6:	6820      	ldr	r0, [r4, #0]
 8003cc8:	f7fe fbee 	bl	80024a8 <osMessagePut>
                osThreadYield(); // Cooperative multitasking
 8003ccc:	f7fe fb8a 	bl	80023e4 <osThreadYield>
                // We are done here, exit this thread
                osDelay(Ts);
 8003cd0:	4b06      	ldr	r3, [pc, #24]	; (8003cec <StartRXMotor1+0x44>)
 8003cd2:	7818      	ldrb	r0, [r3, #0]
 8003cd4:	f7fe fb92 	bl	80023fc <osDelay>
 8003cd8:	e7ea      	b.n	8003cb0 <StartRXMotor1+0x8>
 8003cda:	bf00      	nop
 8003cdc:	20004608 	.word	0x20004608
 8003ce0:	2000466c 	.word	0x2000466c
 8003ce4:	200044b8 	.word	0x200044b8
 8003ce8:	40b00000 	.word	0x40b00000
 8003cec:	20000008 	.word	0x20000008

08003cf0 <StartRXMotor2>:
  /* USER CODE END StartRXMotor1 */
}

/* StartRXMotor2 function */
void StartRXMotor2(void const * argument)
{
 8003cf0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartRXMotor2 */
        /* Infinite loop */
        for(;; )
        {
                mptr = osPoolAlloc(mpool);   // Allocate memory for the message
 8003cf2:	4e0c      	ldr	r6, [pc, #48]	; (8003d24 <StartRXMotor2+0x34>)
 8003cf4:	4d0c      	ldr	r5, [pc, #48]	; (8003d28 <StartRXMotor2+0x38>)
                mptr->current[0] = 7.7;
 8003cf6:	4c0d      	ldr	r4, [pc, #52]	; (8003d2c <StartRXMotor2+0x3c>)
{
  /* USER CODE BEGIN StartRXMotor2 */
        /* Infinite loop */
        for(;; )
        {
                mptr = osPoolAlloc(mpool);   // Allocate memory for the message
 8003cf8:	6830      	ldr	r0, [r6, #0]
 8003cfa:	f7fe fb87 	bl	800240c <osPoolAlloc>
                mptr->current[0] = 7.7;
                mptr->velocity[0] = 7.7;
                mptr->position[0] = 7.7;                             //TODO Put code here: mptr->voltage = 223.72;
                osMessagePut(RXBoxM2Handle, (uint32_t)mptr, osWaitForever); // Send Message
 8003cfe:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <StartRXMotor2+0x40>)
{
  /* USER CODE BEGIN StartRXMotor2 */
        /* Infinite loop */
        for(;; )
        {
                mptr = osPoolAlloc(mpool);   // Allocate memory for the message
 8003d00:	6028      	str	r0, [r5, #0]
 8003d02:	4601      	mov	r1, r0
                mptr->current[0] = 7.7;
 8003d04:	6004      	str	r4, [r0, #0]
                mptr->velocity[0] = 7.7;
 8003d06:	6084      	str	r4, [r0, #8]
                mptr->position[0] = 7.7;                             //TODO Put code here: mptr->voltage = 223.72;
 8003d08:	6104      	str	r4, [r0, #16]
                osMessagePut(RXBoxM2Handle, (uint32_t)mptr, osWaitForever); // Send Message
 8003d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0e:	6818      	ldr	r0, [r3, #0]
 8003d10:	f7fe fbca 	bl	80024a8 <osMessagePut>
                osThreadYield(); // Cooperative multitasking
 8003d14:	f7fe fb66 	bl	80023e4 <osThreadYield>
                // We are done here, exit this thread
                osDelay(Ts);
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <StartRXMotor2+0x44>)
 8003d1a:	7818      	ldrb	r0, [r3, #0]
 8003d1c:	f7fe fb6e 	bl	80023fc <osDelay>
 8003d20:	e7ea      	b.n	8003cf8 <StartRXMotor2+0x8>
 8003d22:	bf00      	nop
 8003d24:	20004608 	.word	0x20004608
 8003d28:	2000466c 	.word	0x2000466c
 8003d2c:	40f66666 	.word	0x40f66666
 8003d30:	2000467c 	.word	0x2000467c
 8003d34:	20000008 	.word	0x20000008

08003d38 <StartCombineiNemo>:
  /* USER CODE END StartRXMotor2 */
}

/* StartCombineiNemo function */
void StartCombineiNemo(void const * argument)
{
 8003d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN StartCombineiNemo */
        /* Infinite loop */
        osEvent evt;
        for(;; )
        {
                evt = osMessageGet(RXBoxiNemoHandle, osWaitForever); // wait for message
 8003d3a:	4c10      	ldr	r4, [pc, #64]	; (8003d7c <StartCombineiNemo+0x44>)
 8003d3c:	6821      	ldr	r1, [r4, #0]
 8003d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d42:	a801      	add	r0, sp, #4
 8003d44:	f7fe fbda 	bl	80024fc <osMessageGet>
                if (evt.status == osEventMessage) {
 8003d48:	9b01      	ldr	r3, [sp, #4]
 8003d4a:	2b10      	cmp	r3, #16
 8003d4c:	d1f6      	bne.n	8003d3c <StartCombineiNemo+0x4>
                        rptr = evt.value.p;
 8003d4e:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <StartCombineiNemo+0x48>)
 8003d50:	9902      	ldr	r1, [sp, #8]
 8003d52:	6019      	str	r1, [r3, #0]

                        TXBuf[7] = rptr->dist;
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <StartCombineiNemo+0x4c>)
 8003d56:	698a      	ldr	r2, [r1, #24]
 8003d58:	61da      	str	r2, [r3, #28]
                        TXBuf[8] = rptr->acc[0];
 8003d5a:	69ca      	ldr	r2, [r1, #28]
 8003d5c:	621a      	str	r2, [r3, #32]
                        TXBuf[9] = rptr->acc[1];
 8003d5e:	6a0a      	ldr	r2, [r1, #32]
 8003d60:	625a      	str	r2, [r3, #36]	; 0x24
                        TXBuf[10] = rptr->acc[2];
 8003d62:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8003d64:	629a      	str	r2, [r3, #40]	; 0x28
                        TXBuf[11] = rptr->gyr[0];
 8003d66:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003d68:	62da      	str	r2, [r3, #44]	; 0x2c
                        TXBuf[12] = rptr->gyr[1];
 8003d6a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003d6c:	631a      	str	r2, [r3, #48]	; 0x30
                        TXBuf[13] = rptr->gyr[2];
 8003d6e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003d70:	635a      	str	r2, [r3, #52]	; 0x34

                        osPoolFree(mpool, rptr); // free memory allocated for message
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <StartCombineiNemo+0x50>)
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	f7fe fb7d 	bl	8002474 <osPoolFree>
 8003d7a:	e7df      	b.n	8003d3c <StartCombineiNemo+0x4>
 8003d7c:	200044bc 	.word	0x200044bc
 8003d80:	20004404 	.word	0x20004404
 8003d84:	20004724 	.word	0x20004724
 8003d88:	20004608 	.word	0x20004608

08003d8c <StartCombineM1>:
  /* USER CODE END StartCombineiNemo */
}

/* StartCombineM1 function */
void StartCombineM1(void const * argument)
{
 8003d8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN StartCombineM1 */
        /* Infinite loop */
        osEvent evt;
        for(;; )
        {
                evt = osMessageGet(RXBoxM1Handle, osWaitForever); // wait for message
 8003d8e:	4c0c      	ldr	r4, [pc, #48]	; (8003dc0 <StartCombineM1+0x34>)
 8003d90:	6821      	ldr	r1, [r4, #0]
 8003d92:	f04f 32ff 	mov.w	r2, #4294967295
 8003d96:	a801      	add	r0, sp, #4
 8003d98:	f7fe fbb0 	bl	80024fc <osMessageGet>
                if (evt.status == osEventMessage) {
 8003d9c:	9b01      	ldr	r3, [sp, #4]
 8003d9e:	2b10      	cmp	r3, #16
 8003da0:	d1f6      	bne.n	8003d90 <StartCombineM1+0x4>
                        rptr = evt.value.p;
 8003da2:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <StartCombineM1+0x38>)
 8003da4:	9902      	ldr	r1, [sp, #8]
 8003da6:	6019      	str	r1, [r3, #0]

                        TXBuf[1] = rptr->current[0];
 8003da8:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <StartCombineM1+0x3c>)
 8003daa:	680a      	ldr	r2, [r1, #0]
 8003dac:	605a      	str	r2, [r3, #4]
                        TXBuf[3] = rptr->velocity[0];
 8003dae:	688a      	ldr	r2, [r1, #8]
 8003db0:	60da      	str	r2, [r3, #12]
                        TXBuf[5] = rptr->position[0];
 8003db2:	690a      	ldr	r2, [r1, #16]
 8003db4:	615a      	str	r2, [r3, #20]

                        osPoolFree(mpool, rptr); // free memory allocated for message
 8003db6:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <StartCombineM1+0x40>)
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	f7fe fb5b 	bl	8002474 <osPoolFree>
 8003dbe:	e7e7      	b.n	8003d90 <StartCombineM1+0x4>
 8003dc0:	200044b8 	.word	0x200044b8
 8003dc4:	20004404 	.word	0x20004404
 8003dc8:	20004724 	.word	0x20004724
 8003dcc:	20004608 	.word	0x20004608

08003dd0 <StartCombineM2>:
  /* USER CODE END StartCombineM1 */
}

/* StartCombineM2 function */
void StartCombineM2(void const * argument)
{
 8003dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN StartCombineM2 */
        /* Infinite loop */
        osEvent evt;
        for(;; )
        {
                evt = osMessageGet(RXBoxM2Handle, osWaitForever); // wait for message
 8003dd2:	4c0c      	ldr	r4, [pc, #48]	; (8003e04 <StartCombineM2+0x34>)
 8003dd4:	6821      	ldr	r1, [r4, #0]
 8003dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dda:	a801      	add	r0, sp, #4
 8003ddc:	f7fe fb8e 	bl	80024fc <osMessageGet>
                if (evt.status == osEventMessage) {
 8003de0:	9b01      	ldr	r3, [sp, #4]
 8003de2:	2b10      	cmp	r3, #16
 8003de4:	d1f6      	bne.n	8003dd4 <StartCombineM2+0x4>
                        rptr = evt.value.p;
 8003de6:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <StartCombineM2+0x38>)
 8003de8:	9902      	ldr	r1, [sp, #8]
 8003dea:	6019      	str	r1, [r3, #0]

                        TXBuf[2] = rptr->current[1];
 8003dec:	4b07      	ldr	r3, [pc, #28]	; (8003e0c <StartCombineM2+0x3c>)
 8003dee:	684a      	ldr	r2, [r1, #4]
 8003df0:	609a      	str	r2, [r3, #8]
                        TXBuf[4] = rptr->velocity[1];
 8003df2:	68ca      	ldr	r2, [r1, #12]
 8003df4:	611a      	str	r2, [r3, #16]
                        TXBuf[6] = rptr->position[1];
 8003df6:	694a      	ldr	r2, [r1, #20]
 8003df8:	619a      	str	r2, [r3, #24]

                        osPoolFree(mpool, rptr); // free memory allocated for message
 8003dfa:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <StartCombineM2+0x40>)
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	f7fe fb39 	bl	8002474 <osPoolFree>
 8003e02:	e7e7      	b.n	8003dd4 <StartCombineM2+0x4>
 8003e04:	2000467c 	.word	0x2000467c
 8003e08:	20004404 	.word	0x20004404
 8003e0c:	20004724 	.word	0x20004724
 8003e10:	20004608 	.word	0x20004608

08003e14 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8003e14:	b530      	push	{r4, r5, lr}
 8003e16:	b095      	sub	sp, #84	; 0x54

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e18:	2300      	movs	r3, #0
 8003e1a:	4a21      	ldr	r2, [pc, #132]	; (8003ea0 <SystemClock_Config+0x8c>)
 8003e1c:	9301      	str	r3, [sp, #4]
 8003e1e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003e20:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003e24:	6411      	str	r1, [r2, #64]	; 0x40
 8003e26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e28:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003e2c:	9201      	str	r2, [sp, #4]
 8003e2e:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e30:	4a1c      	ldr	r2, [pc, #112]	; (8003ea4 <SystemClock_Config+0x90>)
 8003e32:	9302      	str	r3, [sp, #8]
 8003e34:	6811      	ldr	r1, [r2, #0]
 8003e36:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003e3a:	6011      	str	r1, [r2, #0]
 8003e3c:	6812      	ldr	r2, [r2, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003e3e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e40:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003e44:	9202      	str	r2, [sp, #8]
 8003e46:	9a02      	ldr	r2, [sp, #8]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e48:	2202      	movs	r2, #2
 8003e4a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e50:	a808      	add	r0, sp, #32

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003e52:	2210      	movs	r2, #16
 8003e54:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e56:	f7fe ff25 	bl	8002ca4 <HAL_RCC_OscConfig>
 8003e5a:	4601      	mov	r1, r0
 8003e5c:	b100      	cbz	r0, 8003e60 <SystemClock_Config+0x4c>
 8003e5e:	e7fe      	b.n	8003e5e <SystemClock_Config+0x4a>
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003e60:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e62:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e64:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e66:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e68:	240f      	movs	r4, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003e6a:	a803      	add	r0, sp, #12
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e6c:	9403      	str	r4, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003e6e:	f7ff f8bf 	bl	8002ff0 <HAL_RCC_ClockConfig>
 8003e72:	4605      	mov	r5, r0
 8003e74:	b100      	cbz	r0, 8003e78 <SystemClock_Config+0x64>
 8003e76:	e7fe      	b.n	8003e76 <SystemClock_Config+0x62>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003e78:	f7ff f96e 	bl	8003158 <HAL_RCC_GetHCLKFreq>
 8003e7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e80:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e84:	f7ff fc78 	bl	8003778 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003e88:	2004      	movs	r0, #4
 8003e8a:	f7ff fc8b 	bl	80037a4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003e8e:	462a      	mov	r2, r5
 8003e90:	4621      	mov	r1, r4
 8003e92:	f04f 30ff 	mov.w	r0, #4294967295
 8003e96:	f7ff fc2f 	bl	80036f8 <HAL_NVIC_SetPriority>
}
 8003e9a:	b015      	add	sp, #84	; 0x54
 8003e9c:	bd30      	pop	{r4, r5, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40007000 	.word	0x40007000

08003ea8 <Motor_Init>:
//
// uint8_t Read_Current[7];
// uint8_t Read_Velocity[7];
// uint8_t Read_Position[7];

void Motor_Init(void){
 8003ea8:	b538      	push	{r3, r4, r5, lr}
        //Gain write access and check granted
        HAL_UART_Transmit(&huart1,(uint8_t *)test, strlen(test),500);
 8003eaa:	4c19      	ldr	r4, [pc, #100]	; (8003f10 <Motor_Init+0x68>)
 8003eac:	4d19      	ldr	r5, [pc, #100]	; (8003f14 <Motor_Init+0x6c>)
 8003eae:	4620      	mov	r0, r4
 8003eb0:	f7fc f98e 	bl	80001d0 <strlen>
 8003eb4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003eb8:	b282      	uxth	r2, r0
 8003eba:	4621      	mov	r1, r4
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	f7fe fce3 	bl	8002888 <HAL_UART_Transmit>
        osDelay(100);
 8003ec2:	2064      	movs	r0, #100	; 0x64
 8003ec4:	f7fe fa9a 	bl	80023fc <osDelay>
        // }
        // else{
        //         MW[0] = 0;
        // }

        HAL_UART_Transmit_DMA(&huart1,(uint8_t *)test, strlen(test));
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f7fc f981 	bl	80001d0 <strlen>
 8003ece:	4621      	mov	r1, r4
 8003ed0:	b282      	uxth	r2, r0
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	f7fe fd34 	bl	8002940 <HAL_UART_Transmit_DMA>
        osDelay(100);
 8003ed8:	2064      	movs	r0, #100	; 0x64
 8003eda:	f7fe fa8f 	bl	80023fc <osDelay>
        // else{
        //         MW[1] = 0;
        // }

        //Enable bridge and check granted
        HAL_UART_Transmit_DMA(&huart1, (uint8_t *)test, strlen(test));
 8003ede:	4620      	mov	r0, r4
 8003ee0:	f7fc f976 	bl	80001d0 <strlen>
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	b282      	uxth	r2, r0
 8003ee8:	4628      	mov	r0, r5
 8003eea:	f7fe fd29 	bl	8002940 <HAL_UART_Transmit_DMA>
        osDelay(100);
 8003eee:	2064      	movs	r0, #100	; 0x64
 8003ef0:	f7fe fa84 	bl	80023fc <osDelay>
        // }
        // else{
        //         MB[0] = 0;
        // }

        HAL_UART_Transmit_DMA(&huart1, (uint8_t *)test, strlen(test));
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f7fc f96b 	bl	80001d0 <strlen>
 8003efa:	4621      	mov	r1, r4
 8003efc:	b282      	uxth	r2, r0
 8003efe:	4628      	mov	r0, r5
 8003f00:	f7fe fd1e 	bl	8002940 <HAL_UART_Transmit_DMA>
        osDelay(100);
 8003f04:	2064      	movs	r0, #100	; 0x64
        //         MB[1] = 1;
        // }
        // else{
        //         MB[1] = 0;
        // }
}
 8003f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        // else{
        //         MB[0] = 0;
        // }

        HAL_UART_Transmit_DMA(&huart1, (uint8_t *)test, strlen(test));
        osDelay(100);
 8003f0a:	f7fe ba77 	b.w	80023fc <osDelay>
 8003f0e:	bf00      	nop
 8003f10:	20000009 	.word	0x20000009
 8003f14:	2000460c 	.word	0x2000460c

08003f18 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8003f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f1a:	b0c9      	sub	sp, #292	; 0x124
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f1c:	2400      	movs	r4, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f1e:	f7ff fc4d 	bl	80037bc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8003f22:	f7ff ff77 	bl	8003e14 <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f26:	4b52      	ldr	r3, [pc, #328]	; (8004070 <main+0x158>)
 8003f28:	9402      	str	r4, [sp, #8]
 8003f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f2c:	f042 0201 	orr.w	r2, r2, #1
 8003f30:	631a      	str	r2, [r3, #48]	; 0x30
 8003f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f34:	f002 0201 	and.w	r2, r2, #1
 8003f38:	9202      	str	r2, [sp, #8]
 8003f3a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f3c:	9403      	str	r4, [sp, #12]
 8003f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f40:	f042 0202 	orr.w	r2, r2, #2
 8003f44:	631a      	str	r2, [r3, #48]	; 0x30
 8003f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f48:	f002 0202 	and.w	r2, r2, #2
 8003f4c:	9203      	str	r2, [sp, #12]
 8003f4e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f50:	9404      	str	r4, [sp, #16]
 8003f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f54:	f042 0204 	orr.w	r2, r2, #4
 8003f58:	631a      	str	r2, [r3, #48]	; 0x30
 8003f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f5c:	f002 0204 	and.w	r2, r2, #4
 8003f60:	9204      	str	r2, [sp, #16]
 8003f62:	9a04      	ldr	r2, [sp, #16]
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f64:	9400      	str	r4, [sp, #0]
 8003f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f68:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30
 8003f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f70:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f74:	9200      	str	r2, [sp, #0]
 8003f76:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003f78:	9401      	str	r4, [sp, #4]
 8003f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f7c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003f80:	631a      	str	r2, [r3, #48]	; 0x30
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8003f88:	4622      	mov	r2, r4
 8003f8a:	2105      	movs	r1, #5
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003f8c:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8003f8e:	200c      	movs	r0, #12
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003f90:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8003f92:	f7ff fbb1 	bl	80036f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003f96:	200c      	movs	r0, #12
 8003f98:	f7ff fbe2 	bl	8003760 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8003f9c:	4622      	mov	r2, r4
 8003f9e:	2105      	movs	r1, #5
 8003fa0:	200e      	movs	r0, #14
 8003fa2:	f7ff fba9 	bl	80036f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003fa6:	200e      	movs	r0, #14
 8003fa8:	f7ff fbda 	bl	8003760 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8003fac:	4622      	mov	r2, r4
 8003fae:	2105      	movs	r1, #5
 8003fb0:	2010      	movs	r0, #16
 8003fb2:	f7ff fba1 	bl	80036f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003fb6:	2010      	movs	r0, #16
 8003fb8:	f7ff fbd2 	bl	8003760 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8003fbc:	4622      	mov	r2, r4
 8003fbe:	2105      	movs	r1, #5
 8003fc0:	2011      	movs	r0, #17
 8003fc2:	f7ff fb99 	bl	80036f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003fc6:	2011      	movs	r0, #17
 8003fc8:	f7ff fbca 	bl	8003760 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003fcc:	4622      	mov	r2, r4
 8003fce:	2105      	movs	r1, #5
 8003fd0:	2039      	movs	r0, #57	; 0x39
 8003fd2:	f7ff fb91 	bl	80036f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003fd6:	2039      	movs	r0, #57	; 0x39
 8003fd8:	f7ff fbc2 	bl	8003760 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8003fdc:	4622      	mov	r2, r4
 8003fde:	2105      	movs	r1, #5
 8003fe0:	2045      	movs	r0, #69	; 0x45
 8003fe2:	f7ff fb89 	bl	80036f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003fe6:	2045      	movs	r0, #69	; 0x45
 8003fe8:	f7ff fbba 	bl	8003760 <HAL_NVIC_EnableIRQ>

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8003fec:	4821      	ldr	r0, [pc, #132]	; (8004074 <main+0x15c>)
  huart1.Init.BaudRate = 9600;
 8003fee:	4a22      	ldr	r2, [pc, #136]	; (8004078 <main+0x160>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ff0:	6084      	str	r4, [r0, #8]
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 8003ff2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ff6:	250c      	movs	r5, #12
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 8003ff8:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ffc:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ffe:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004000:	6145      	str	r5, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004002:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004004:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004006:	f7fe fc11 	bl	800282c <HAL_UART_Init>
 800400a:	b100      	cbz	r0, 800400e <main+0xf6>
 800400c:	e7fe      	b.n	800400c <main+0xf4>

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 800400e:	4b1b      	ldr	r3, [pc, #108]	; (800407c <main+0x164>)
  huart2.Init.BaudRate = 115200;
 8004010:	4a1b      	ldr	r2, [pc, #108]	; (8004080 <main+0x168>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004012:	6098      	str	r0, [r3, #8]
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8004014:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004018:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800401a:	6118      	str	r0, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800401c:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800401e:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004020:	4618      	mov	r0, r3
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8004022:	e883 0014 	stmia.w	r3, {r2, r4}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004026:	615d      	str	r5, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004028:	f7fe fc00 	bl	800282c <HAL_UART_Init>
 800402c:	b100      	cbz	r0, 8004030 <main+0x118>
 800402e:	e7fe      	b.n	800402e <main+0x116>

/* USART3 init function */
static void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 8004030:	4b14      	ldr	r3, [pc, #80]	; (8004084 <main+0x16c>)
 8004032:	4a15      	ldr	r2, [pc, #84]	; (8004088 <main+0x170>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004034:	6098      	str	r0, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004036:	60d8      	str	r0, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004038:	6118      	str	r0, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800403a:	6198      	str	r0, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800403c:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800403e:	4618      	mov	r0, r3
/* USART3 init function */
static void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 8004040:	e883 0014 	stmia.w	r3, {r2, r4}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004044:	615d      	str	r5, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004046:	f7fe fbf1 	bl	800282c <HAL_UART_Init>
 800404a:	b100      	cbz	r0, 800404e <main+0x136>
 800404c:	e7fe      	b.n	800404c <main+0x134>

/* USART6 init function */
static void MX_USART6_UART_Init(void)
{

  huart6.Instance = USART6;
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <main+0x174>)
 8004050:	4a0f      	ldr	r2, [pc, #60]	; (8004090 <main+0x178>)
  huart6.Init.BaudRate = 115200;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004052:	6098      	str	r0, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004054:	60d8      	str	r0, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004056:	6118      	str	r0, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004058:	6198      	str	r0, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800405a:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800405c:	4618      	mov	r0, r3
  huart6.Instance = USART6;
  huart6.Init.BaudRate = 115200;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 800405e:	615d      	str	r5, [r3, #20]
/* USART6 init function */
static void MX_USART6_UART_Init(void)
{

  huart6.Instance = USART6;
  huart6.Init.BaudRate = 115200;
 8004060:	e883 0014 	stmia.w	r3, {r2, r4}
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004064:	f7fe fbe2 	bl	800282c <HAL_UART_Init>
 8004068:	4605      	mov	r5, r0
 800406a:	b198      	cbz	r0, 8004094 <main+0x17c>
 800406c:	e7fe      	b.n	800406c <main+0x154>
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800
 8004074:	2000460c 	.word	0x2000460c
 8004078:	40011000 	.word	0x40011000
 800407c:	200046e4 	.word	0x200046e4
 8004080:	40004400 	.word	0x40004400
 8004084:	20004478 	.word	0x20004478
 8004088:	40004800 	.word	0x40004800
 800408c:	20004698 	.word	0x20004698
 8004090:	40011400 	.word	0x40011400
        /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 8004094:	4c6b      	ldr	r4, [pc, #428]	; (8004244 <main+0x32c>)
  MX_USART2_UART_Init();
  MX_USART3_UART_Init();
  MX_USART6_UART_Init();

  /* USER CODE BEGIN 2 */
        Motor_Init();
 8004096:	f7ff ff07 	bl	8003ea8 <Motor_Init>
        /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 800409a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800409c:	af11      	add	r7, sp, #68	; 0x44
 800409e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80040a0:	4626      	mov	r6, r4
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80040a2:	4629      	mov	r1, r5
        /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 80040a4:	f856 3b04 	ldr.w	r3, [r6], #4
 80040a8:	603b      	str	r3, [r7, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80040aa:	a811      	add	r0, sp, #68	; 0x44
 80040ac:	f7fe f97d 	bl	80023aa <osThreadCreate>
 80040b0:	4b65      	ldr	r3, [pc, #404]	; (8004248 <main+0x330>)
 80040b2:	6018      	str	r0, [r3, #0]

  /* definition and creation of TXPC */
  osThreadDef(TXPC, StartTXPC, osPriorityRealtime, 0, 128);
 80040b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80040b6:	af16      	add	r7, sp, #88	; 0x58
 80040b8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80040ba:	6833      	ldr	r3, [r6, #0]
 80040bc:	603b      	str	r3, [r7, #0]
  TXPCHandle = osThreadCreate(osThread(TXPC), NULL);
 80040be:	4629      	mov	r1, r5
 80040c0:	a816      	add	r0, sp, #88	; 0x58
 80040c2:	f7fe f972 	bl	80023aa <osThreadCreate>
 80040c6:	4b61      	ldr	r3, [pc, #388]	; (800424c <main+0x334>)

  /* definition and creation of RXPC */
  osThreadDef(RXPC, StartRXPC, osPriorityRealtime, 0, 128);
 80040c8:	f104 0718 	add.w	r7, r4, #24
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* definition and creation of TXPC */
  osThreadDef(TXPC, StartTXPC, osPriorityRealtime, 0, 128);
  TXPCHandle = osThreadCreate(osThread(TXPC), NULL);
 80040cc:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXPC */
  osThreadDef(RXPC, StartRXPC, osPriorityRealtime, 0, 128);
 80040ce:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80040d0:	ae1b      	add	r6, sp, #108	; 0x6c
 80040d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	6033      	str	r3, [r6, #0]
  RXPCHandle = osThreadCreate(osThread(RXPC), NULL);
 80040d8:	4629      	mov	r1, r5
 80040da:	a81b      	add	r0, sp, #108	; 0x6c
 80040dc:	f7fe f965 	bl	80023aa <osThreadCreate>
 80040e0:	4b5b      	ldr	r3, [pc, #364]	; (8004250 <main+0x338>)

  /* definition and creation of RXiNemo */
  osThreadDef(RXiNemo, StartRXiNemo, osPriorityNormal, 0, 128);
 80040e2:	f104 072c 	add.w	r7, r4, #44	; 0x2c
  osThreadDef(TXPC, StartTXPC, osPriorityRealtime, 0, 128);
  TXPCHandle = osThreadCreate(osThread(TXPC), NULL);

  /* definition and creation of RXPC */
  osThreadDef(RXPC, StartRXPC, osPriorityRealtime, 0, 128);
  RXPCHandle = osThreadCreate(osThread(RXPC), NULL);
 80040e6:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXiNemo */
  osThreadDef(RXiNemo, StartRXiNemo, osPriorityNormal, 0, 128);
 80040e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80040ea:	ae20      	add	r6, sp, #128	; 0x80
 80040ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6033      	str	r3, [r6, #0]
  RXiNemoHandle = osThreadCreate(osThread(RXiNemo), NULL);
 80040f2:	4629      	mov	r1, r5
 80040f4:	a820      	add	r0, sp, #128	; 0x80
 80040f6:	f7fe f958 	bl	80023aa <osThreadCreate>
 80040fa:	4b56      	ldr	r3, [pc, #344]	; (8004254 <main+0x33c>)

  /* definition and creation of TXMotor1 */
  osThreadDef(TXMotor1, StartTXMotor1, osPriorityHigh, 0, 128);
 80040fc:	f104 0740 	add.w	r7, r4, #64	; 0x40
  osThreadDef(RXPC, StartRXPC, osPriorityRealtime, 0, 128);
  RXPCHandle = osThreadCreate(osThread(RXPC), NULL);

  /* definition and creation of RXiNemo */
  osThreadDef(RXiNemo, StartRXiNemo, osPriorityNormal, 0, 128);
  RXiNemoHandle = osThreadCreate(osThread(RXiNemo), NULL);
 8004100:	6018      	str	r0, [r3, #0]

  /* definition and creation of TXMotor1 */
  osThreadDef(TXMotor1, StartTXMotor1, osPriorityHigh, 0, 128);
 8004102:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004104:	ae25      	add	r6, sp, #148	; 0x94
 8004106:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	6033      	str	r3, [r6, #0]
  TXMotor1Handle = osThreadCreate(osThread(TXMotor1), NULL);
 800410c:	4629      	mov	r1, r5
 800410e:	a825      	add	r0, sp, #148	; 0x94
 8004110:	f7fe f94b 	bl	80023aa <osThreadCreate>
 8004114:	4b50      	ldr	r3, [pc, #320]	; (8004258 <main+0x340>)

  /* definition and creation of TXMotor2 */
  osThreadDef(TXMotor2, StartTXMotor2, osPriorityHigh, 0, 128);
 8004116:	f104 0754 	add.w	r7, r4, #84	; 0x54
  osThreadDef(RXiNemo, StartRXiNemo, osPriorityNormal, 0, 128);
  RXiNemoHandle = osThreadCreate(osThread(RXiNemo), NULL);

  /* definition and creation of TXMotor1 */
  osThreadDef(TXMotor1, StartTXMotor1, osPriorityHigh, 0, 128);
  TXMotor1Handle = osThreadCreate(osThread(TXMotor1), NULL);
 800411a:	6018      	str	r0, [r3, #0]

  /* definition and creation of TXMotor2 */
  osThreadDef(TXMotor2, StartTXMotor2, osPriorityHigh, 0, 128);
 800411c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800411e:	ae2a      	add	r6, sp, #168	; 0xa8
 8004120:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6033      	str	r3, [r6, #0]
  TXMotor2Handle = osThreadCreate(osThread(TXMotor2), NULL);
 8004126:	4629      	mov	r1, r5
 8004128:	a82a      	add	r0, sp, #168	; 0xa8
 800412a:	f7fe f93e 	bl	80023aa <osThreadCreate>
 800412e:	4b4b      	ldr	r3, [pc, #300]	; (800425c <main+0x344>)

  /* definition and creation of RXMotor1 */
  osThreadDef(RXMotor1, StartRXMotor1, osPriorityAboveNormal, 0, 128);
 8004130:	f104 0768 	add.w	r7, r4, #104	; 0x68
  osThreadDef(TXMotor1, StartTXMotor1, osPriorityHigh, 0, 128);
  TXMotor1Handle = osThreadCreate(osThread(TXMotor1), NULL);

  /* definition and creation of TXMotor2 */
  osThreadDef(TXMotor2, StartTXMotor2, osPriorityHigh, 0, 128);
  TXMotor2Handle = osThreadCreate(osThread(TXMotor2), NULL);
 8004134:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXMotor1 */
  osThreadDef(RXMotor1, StartRXMotor1, osPriorityAboveNormal, 0, 128);
 8004136:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004138:	ae2f      	add	r6, sp, #188	; 0xbc
 800413a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	6033      	str	r3, [r6, #0]
  RXMotor1Handle = osThreadCreate(osThread(RXMotor1), NULL);
 8004140:	4629      	mov	r1, r5
 8004142:	a82f      	add	r0, sp, #188	; 0xbc
 8004144:	f7fe f931 	bl	80023aa <osThreadCreate>
 8004148:	4b45      	ldr	r3, [pc, #276]	; (8004260 <main+0x348>)

  /* definition and creation of RXMotor2 */
  osThreadDef(RXMotor2, StartRXMotor2, osPriorityAboveNormal, 0, 128);
 800414a:	f104 077c 	add.w	r7, r4, #124	; 0x7c
  osThreadDef(TXMotor2, StartTXMotor2, osPriorityHigh, 0, 128);
  TXMotor2Handle = osThreadCreate(osThread(TXMotor2), NULL);

  /* definition and creation of RXMotor1 */
  osThreadDef(RXMotor1, StartRXMotor1, osPriorityAboveNormal, 0, 128);
  RXMotor1Handle = osThreadCreate(osThread(RXMotor1), NULL);
 800414e:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXMotor2 */
  osThreadDef(RXMotor2, StartRXMotor2, osPriorityAboveNormal, 0, 128);
 8004150:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004152:	ae34      	add	r6, sp, #208	; 0xd0
 8004154:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	6033      	str	r3, [r6, #0]
  RXMotor2Handle = osThreadCreate(osThread(RXMotor2), NULL);
 800415a:	4629      	mov	r1, r5
 800415c:	a834      	add	r0, sp, #208	; 0xd0
 800415e:	f7fe f924 	bl	80023aa <osThreadCreate>
 8004162:	4b40      	ldr	r3, [pc, #256]	; (8004264 <main+0x34c>)

  /* definition and creation of CombineiNemo */
  osThreadDef(CombineiNemo, StartCombineiNemo, osPriorityRealtime, 0, 128);
 8004164:	f104 0790 	add.w	r7, r4, #144	; 0x90
  osThreadDef(RXMotor1, StartRXMotor1, osPriorityAboveNormal, 0, 128);
  RXMotor1Handle = osThreadCreate(osThread(RXMotor1), NULL);

  /* definition and creation of RXMotor2 */
  osThreadDef(RXMotor2, StartRXMotor2, osPriorityAboveNormal, 0, 128);
  RXMotor2Handle = osThreadCreate(osThread(RXMotor2), NULL);
 8004168:	6018      	str	r0, [r3, #0]

  /* definition and creation of CombineiNemo */
  osThreadDef(CombineiNemo, StartCombineiNemo, osPriorityRealtime, 0, 128);
 800416a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800416c:	ae39      	add	r6, sp, #228	; 0xe4
 800416e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	6033      	str	r3, [r6, #0]
  CombineiNemoHandle = osThreadCreate(osThread(CombineiNemo), NULL);
 8004174:	4629      	mov	r1, r5
 8004176:	a839      	add	r0, sp, #228	; 0xe4
 8004178:	f7fe f917 	bl	80023aa <osThreadCreate>
 800417c:	4b3a      	ldr	r3, [pc, #232]	; (8004268 <main+0x350>)

  /* definition and creation of CombineM1 */
  osThreadDef(CombineM1, StartCombineM1, osPriorityRealtime, 0, 128);
 800417e:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
  osThreadDef(RXMotor2, StartRXMotor2, osPriorityAboveNormal, 0, 128);
  RXMotor2Handle = osThreadCreate(osThread(RXMotor2), NULL);

  /* definition and creation of CombineiNemo */
  osThreadDef(CombineiNemo, StartCombineiNemo, osPriorityRealtime, 0, 128);
  CombineiNemoHandle = osThreadCreate(osThread(CombineiNemo), NULL);
 8004182:	6018      	str	r0, [r3, #0]

  /* definition and creation of CombineM1 */
  osThreadDef(CombineM1, StartCombineM1, osPriorityRealtime, 0, 128);
 8004184:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004186:	ae3e      	add	r6, sp, #248	; 0xf8
 8004188:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	6033      	str	r3, [r6, #0]
  CombineM1Handle = osThreadCreate(osThread(CombineM1), NULL);
 800418e:	4629      	mov	r1, r5
 8004190:	a83e      	add	r0, sp, #248	; 0xf8
 8004192:	f7fe f90a 	bl	80023aa <osThreadCreate>
 8004196:	4b35      	ldr	r3, [pc, #212]	; (800426c <main+0x354>)

  /* definition and creation of CombineM2 */
  osThreadDef(CombineM2, StartCombineM2, osPriorityRealtime, 0, 128);
 8004198:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
  osThreadDef(CombineiNemo, StartCombineiNemo, osPriorityRealtime, 0, 128);
  CombineiNemoHandle = osThreadCreate(osThread(CombineiNemo), NULL);

  /* definition and creation of CombineM1 */
  osThreadDef(CombineM1, StartCombineM1, osPriorityRealtime, 0, 128);
  CombineM1Handle = osThreadCreate(osThread(CombineM1), NULL);
 800419c:	6018      	str	r0, [r3, #0]

  /* definition and creation of CombineM2 */
  osThreadDef(CombineM2, StartCombineM2, osPriorityRealtime, 0, 128);
 800419e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80041a0:	ae43      	add	r6, sp, #268	; 0x10c
 80041a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6033      	str	r3, [r6, #0]
  CombineM2Handle = osThreadCreate(osThread(CombineM2), NULL);
 80041a8:	4629      	mov	r1, r5
 80041aa:	a843      	add	r0, sp, #268	; 0x10c
 80041ac:	f7fe f8fd 	bl	80023aa <osThreadCreate>
 80041b0:	4b2f      	ldr	r3, [pc, #188]	; (8004270 <main+0x358>)
        /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of TXBox */
  osMessageQDef(TXBox, 6, float);
 80041b2:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
  osThreadDef(CombineM1, StartCombineM1, osPriorityRealtime, 0, 128);
  CombineM1Handle = osThreadCreate(osThread(CombineM1), NULL);

  /* definition and creation of CombineM2 */
  osThreadDef(CombineM2, StartCombineM2, osPriorityRealtime, 0, 128);
  CombineM2Handle = osThreadCreate(osThread(CombineM2), NULL);
 80041b6:	6018      	str	r0, [r3, #0]
        /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of TXBox */
  osMessageQDef(TXBox, 6, float);
 80041b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041bc:	ab05      	add	r3, sp, #20
 80041be:	e883 0003 	stmia.w	r3, {r0, r1}
  TXBoxHandle = osMessageCreate(osMessageQ(TXBox), NULL);
 80041c2:	4629      	mov	r1, r5
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fe f96a 	bl	800249e <osMessageCreate>
 80041ca:	4b2a      	ldr	r3, [pc, #168]	; (8004274 <main+0x35c>)

  /* definition and creation of TXBoxM1 */
  osMessageQDef(TXBoxM1, 16, uint16_t);
 80041cc:	34d4      	adds	r4, #212	; 0xd4
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of TXBox */
  osMessageQDef(TXBox, 6, float);
  TXBoxHandle = osMessageCreate(osMessageQ(TXBox), NULL);
 80041ce:	6018      	str	r0, [r3, #0]

  /* definition and creation of TXBoxM1 */
  osMessageQDef(TXBoxM1, 16, uint16_t);
 80041d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041d4:	ab07      	add	r3, sp, #28
 80041d6:	e883 0003 	stmia.w	r3, {r0, r1}
  TXBoxM1Handle = osMessageCreate(osMessageQ(TXBoxM1), NULL);
 80041da:	4629      	mov	r1, r5
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fe f95e 	bl	800249e <osMessageCreate>
 80041e2:	4b25      	ldr	r3, [pc, #148]	; (8004278 <main+0x360>)
 80041e4:	6018      	str	r0, [r3, #0]

  /* definition and creation of TXBoxM2 */
  osMessageQDef(TXBoxM2, 16, uint16_t);
 80041e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041ea:	ab09      	add	r3, sp, #36	; 0x24
 80041ec:	e883 0003 	stmia.w	r3, {r0, r1}
  TXBoxM2Handle = osMessageCreate(osMessageQ(TXBoxM2), NULL);
 80041f0:	4629      	mov	r1, r5
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe f953 	bl	800249e <osMessageCreate>
 80041f8:	4b20      	ldr	r3, [pc, #128]	; (800427c <main+0x364>)
 80041fa:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXBoxiNemo */
  osMessageQDef(RXBoxiNemo, 16, uint16_t);
 80041fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004200:	ab0b      	add	r3, sp, #44	; 0x2c
 8004202:	e883 0003 	stmia.w	r3, {r0, r1}
  RXBoxiNemoHandle = osMessageCreate(osMessageQ(RXBoxiNemo), NULL);
 8004206:	4629      	mov	r1, r5
 8004208:	4618      	mov	r0, r3
 800420a:	f7fe f948 	bl	800249e <osMessageCreate>
 800420e:	4b1c      	ldr	r3, [pc, #112]	; (8004280 <main+0x368>)
 8004210:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXBoxM1 */
  osMessageQDef(RXBoxM1, 16, uint16_t);
 8004212:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004216:	ab0d      	add	r3, sp, #52	; 0x34
 8004218:	e883 0003 	stmia.w	r3, {r0, r1}
  RXBoxM1Handle = osMessageCreate(osMessageQ(RXBoxM1), NULL);
 800421c:	4629      	mov	r1, r5
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe f93d 	bl	800249e <osMessageCreate>
 8004224:	4b17      	ldr	r3, [pc, #92]	; (8004284 <main+0x36c>)
 8004226:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXBoxM2 */
  osMessageQDef(RXBoxM2, 16, uint16_t);
 8004228:	e894 0003 	ldmia.w	r4, {r0, r1}
 800422c:	ab0f      	add	r3, sp, #60	; 0x3c
 800422e:	e883 0003 	stmia.w	r3, {r0, r1}
  RXBoxM2Handle = osMessageCreate(osMessageQ(RXBoxM2), NULL);
 8004232:	4618      	mov	r0, r3
 8004234:	4629      	mov	r1, r5
 8004236:	f7fe f932 	bl	800249e <osMessageCreate>
 800423a:	4b13      	ldr	r3, [pc, #76]	; (8004288 <main+0x370>)
 800423c:	6018      	str	r0, [r3, #0]
        /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 800423e:	f7fe f8af 	bl	80023a0 <osKernelStart>
 8004242:	e7fe      	b.n	8004242 <main+0x32a>
 8004244:	08007108 	.word	0x08007108
 8004248:	20004338 	.word	0x20004338
 800424c:	20004674 	.word	0x20004674
 8004250:	2000475c 	.word	0x2000475c
 8004254:	20004670 	.word	0x20004670
 8004258:	20004534 	.word	0x20004534
 800425c:	20004400 	.word	0x20004400
 8004260:	20004684 	.word	0x20004684
 8004264:	20004678 	.word	0x20004678
 8004268:	20004680 	.word	0x20004680
 800426c:	20004760 	.word	0x20004760
 8004270:	20004650 	.word	0x20004650
 8004274:	20004538 	.word	0x20004538
 8004278:	20004668 	.word	0x20004668
 800427c:	2000439c 	.word	0x2000439c
 8004280:	200044bc 	.word	0x200044bc
 8004284:	200044b8 	.word	0x200044b8
 8004288:	2000467c 	.word	0x2000467c

0800428c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800428c:	6802      	ldr	r2, [r0, #0]
 800428e:	4b03      	ldr	r3, [pc, #12]	; (800429c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004290:	429a      	cmp	r2, r3
 8004292:	d101      	bne.n	8004298 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8004294:	f7ff baac 	b.w	80037f0 <HAL_IncTick>
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40010000 	.word	0x40010000

080042a0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80042a0:	e7fe      	b.n	80042a0 <Error_Handler>
	...

080042a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80042a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80042a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80042aa:	e003      	b.n	80042b4 <LoopCopyDataInit>

080042ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80042ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80042b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80042b2:	3104      	adds	r1, #4

080042b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80042b4:	480b      	ldr	r0, [pc, #44]	; (80042e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80042b6:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80042b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80042ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80042bc:	d3f6      	bcc.n	80042ac <CopyDataInit>
  ldr  r2, =_sbss
 80042be:	4a0b      	ldr	r2, [pc, #44]	; (80042ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80042c0:	e002      	b.n	80042c8 <LoopFillZerobss>

080042c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80042c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80042c4:	f842 3b04 	str.w	r3, [r2], #4

080042c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80042c8:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80042ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80042cc:	d3f9      	bcc.n	80042c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80042ce:	f7ff fa9d 	bl	800380c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042d2:	f000 f811 	bl	80042f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042d6:	f7ff fe1f 	bl	8003f18 <main>
  bx  lr    
 80042da:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80042dc:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80042e0:	080073ec 	.word	0x080073ec
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80042e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80042e8:	2000055c 	.word	0x2000055c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80042ec:	2000055c 	.word	0x2000055c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80042f0:	20004768 	.word	0x20004768

080042f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042f4:	e7fe      	b.n	80042f4 <ADC_IRQHandler>
	...

080042f8 <__libc_init_array>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <__libc_init_array+0x3c>)
 80042fc:	4c0e      	ldr	r4, [pc, #56]	; (8004338 <__libc_init_array+0x40>)
 80042fe:	1ae4      	subs	r4, r4, r3
 8004300:	10a4      	asrs	r4, r4, #2
 8004302:	2500      	movs	r5, #0
 8004304:	461e      	mov	r6, r3
 8004306:	42a5      	cmp	r5, r4
 8004308:	d004      	beq.n	8004314 <__libc_init_array+0x1c>
 800430a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800430e:	4798      	blx	r3
 8004310:	3501      	adds	r5, #1
 8004312:	e7f8      	b.n	8004306 <__libc_init_array+0xe>
 8004314:	f002 feea 	bl	80070ec <_init>
 8004318:	4c08      	ldr	r4, [pc, #32]	; (800433c <__libc_init_array+0x44>)
 800431a:	4b09      	ldr	r3, [pc, #36]	; (8004340 <__libc_init_array+0x48>)
 800431c:	1ae4      	subs	r4, r4, r3
 800431e:	10a4      	asrs	r4, r4, #2
 8004320:	2500      	movs	r5, #0
 8004322:	461e      	mov	r6, r3
 8004324:	42a5      	cmp	r5, r4
 8004326:	d004      	beq.n	8004332 <__libc_init_array+0x3a>
 8004328:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800432c:	4798      	blx	r3
 800432e:	3501      	adds	r5, #1
 8004330:	e7f8      	b.n	8004324 <__libc_init_array+0x2c>
 8004332:	bd70      	pop	{r4, r5, r6, pc}
 8004334:	080073e4 	.word	0x080073e4
 8004338:	080073e4 	.word	0x080073e4
 800433c:	080073e8 	.word	0x080073e8
 8004340:	080073e4 	.word	0x080073e4

08004344 <memcpy>:
 8004344:	b510      	push	{r4, lr}
 8004346:	1e43      	subs	r3, r0, #1
 8004348:	440a      	add	r2, r1
 800434a:	4291      	cmp	r1, r2
 800434c:	d004      	beq.n	8004358 <memcpy+0x14>
 800434e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004356:	e7f8      	b.n	800434a <memcpy+0x6>
 8004358:	bd10      	pop	{r4, pc}

0800435a <memset>:
 800435a:	4402      	add	r2, r0
 800435c:	4603      	mov	r3, r0
 800435e:	4293      	cmp	r3, r2
 8004360:	d002      	beq.n	8004368 <memset+0xe>
 8004362:	f803 1b01 	strb.w	r1, [r3], #1
 8004366:	e7fa      	b.n	800435e <memset+0x4>
 8004368:	4770      	bx	lr
	...

0800436c <sprintf>:
 800436c:	b40e      	push	{r1, r2, r3}
 800436e:	b500      	push	{lr}
 8004370:	b09c      	sub	sp, #112	; 0x70
 8004372:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004376:	ab1d      	add	r3, sp, #116	; 0x74
 8004378:	f8ad 1014 	strh.w	r1, [sp, #20]
 800437c:	9002      	str	r0, [sp, #8]
 800437e:	9006      	str	r0, [sp, #24]
 8004380:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004384:	480a      	ldr	r0, [pc, #40]	; (80043b0 <sprintf+0x44>)
 8004386:	9104      	str	r1, [sp, #16]
 8004388:	9107      	str	r1, [sp, #28]
 800438a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800438e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004392:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004396:	6800      	ldr	r0, [r0, #0]
 8004398:	9301      	str	r3, [sp, #4]
 800439a:	a902      	add	r1, sp, #8
 800439c:	f000 f80c 	bl	80043b8 <_svfprintf_r>
 80043a0:	9b02      	ldr	r3, [sp, #8]
 80043a2:	2200      	movs	r2, #0
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	b01c      	add	sp, #112	; 0x70
 80043a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80043ac:	b003      	add	sp, #12
 80043ae:	4770      	bx	lr
 80043b0:	20000110 	.word	0x20000110
 80043b4:	00000000 	.word	0x00000000

080043b8 <_svfprintf_r>:
 80043b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043bc:	b0bd      	sub	sp, #244	; 0xf4
 80043be:	468b      	mov	fp, r1
 80043c0:	9205      	str	r2, [sp, #20]
 80043c2:	461f      	mov	r7, r3
 80043c4:	4682      	mov	sl, r0
 80043c6:	f001 fdeb 	bl	8005fa0 <_localeconv_r>
 80043ca:	6803      	ldr	r3, [r0, #0]
 80043cc:	930d      	str	r3, [sp, #52]	; 0x34
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fb fefe 	bl	80001d0 <strlen>
 80043d4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80043d8:	9008      	str	r0, [sp, #32]
 80043da:	0619      	lsls	r1, r3, #24
 80043dc:	d515      	bpl.n	800440a <_svfprintf_r+0x52>
 80043de:	f8db 3010 	ldr.w	r3, [fp, #16]
 80043e2:	b993      	cbnz	r3, 800440a <_svfprintf_r+0x52>
 80043e4:	2140      	movs	r1, #64	; 0x40
 80043e6:	4650      	mov	r0, sl
 80043e8:	f001 fde6 	bl	8005fb8 <_malloc_r>
 80043ec:	f8cb 0000 	str.w	r0, [fp]
 80043f0:	f8cb 0010 	str.w	r0, [fp, #16]
 80043f4:	b930      	cbnz	r0, 8004404 <_svfprintf_r+0x4c>
 80043f6:	230c      	movs	r3, #12
 80043f8:	f8ca 3000 	str.w	r3, [sl]
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004400:	f000 bf95 	b.w	800532e <_svfprintf_r+0xf76>
 8004404:	2340      	movs	r3, #64	; 0x40
 8004406:	f8cb 3014 	str.w	r3, [fp, #20]
 800440a:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8004670 <_svfprintf_r+0x2b8>
 800440e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004412:	2300      	movs	r3, #0
 8004414:	ac2c      	add	r4, sp, #176	; 0xb0
 8004416:	941f      	str	r4, [sp, #124]	; 0x7c
 8004418:	9321      	str	r3, [sp, #132]	; 0x84
 800441a:	9320      	str	r3, [sp, #128]	; 0x80
 800441c:	9304      	str	r3, [sp, #16]
 800441e:	9311      	str	r3, [sp, #68]	; 0x44
 8004420:	9310      	str	r3, [sp, #64]	; 0x40
 8004422:	930a      	str	r3, [sp, #40]	; 0x28
 8004424:	9d05      	ldr	r5, [sp, #20]
 8004426:	462b      	mov	r3, r5
 8004428:	f813 2b01 	ldrb.w	r2, [r3], #1
 800442c:	b11a      	cbz	r2, 8004436 <_svfprintf_r+0x7e>
 800442e:	2a25      	cmp	r2, #37	; 0x25
 8004430:	d001      	beq.n	8004436 <_svfprintf_r+0x7e>
 8004432:	461d      	mov	r5, r3
 8004434:	e7f7      	b.n	8004426 <_svfprintf_r+0x6e>
 8004436:	9b05      	ldr	r3, [sp, #20]
 8004438:	1aee      	subs	r6, r5, r3
 800443a:	d017      	beq.n	800446c <_svfprintf_r+0xb4>
 800443c:	e884 0048 	stmia.w	r4, {r3, r6}
 8004440:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004442:	4433      	add	r3, r6
 8004444:	9321      	str	r3, [sp, #132]	; 0x84
 8004446:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004448:	3301      	adds	r3, #1
 800444a:	2b07      	cmp	r3, #7
 800444c:	9320      	str	r3, [sp, #128]	; 0x80
 800444e:	dc01      	bgt.n	8004454 <_svfprintf_r+0x9c>
 8004450:	3408      	adds	r4, #8
 8004452:	e008      	b.n	8004466 <_svfprintf_r+0xae>
 8004454:	aa1f      	add	r2, sp, #124	; 0x7c
 8004456:	4659      	mov	r1, fp
 8004458:	4650      	mov	r0, sl
 800445a:	f002 fab5 	bl	80069c8 <__ssprint_r>
 800445e:	2800      	cmp	r0, #0
 8004460:	f040 862c 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004464:	ac2c      	add	r4, sp, #176	; 0xb0
 8004466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004468:	4433      	add	r3, r6
 800446a:	930a      	str	r3, [sp, #40]	; 0x28
 800446c:	782b      	ldrb	r3, [r5, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 861d 	beq.w	80050ae <_svfprintf_r+0xcf6>
 8004474:	2200      	movs	r2, #0
 8004476:	1c6b      	adds	r3, r5, #1
 8004478:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800447c:	4611      	mov	r1, r2
 800447e:	f04f 39ff 	mov.w	r9, #4294967295
 8004482:	9209      	str	r2, [sp, #36]	; 0x24
 8004484:	4615      	mov	r5, r2
 8004486:	200a      	movs	r0, #10
 8004488:	1c5e      	adds	r6, r3, #1
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	9605      	str	r6, [sp, #20]
 800448e:	9302      	str	r3, [sp, #8]
 8004490:	9b02      	ldr	r3, [sp, #8]
 8004492:	3b20      	subs	r3, #32
 8004494:	2b58      	cmp	r3, #88	; 0x58
 8004496:	f200 8263 	bhi.w	8004960 <_svfprintf_r+0x5a8>
 800449a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800449e:	005c      	.short	0x005c
 80044a0:	02610261 	.word	0x02610261
 80044a4:	0261006b 	.word	0x0261006b
 80044a8:	02610261 	.word	0x02610261
 80044ac:	02610261 	.word	0x02610261
 80044b0:	006e0261 	.word	0x006e0261
 80044b4:	02610059 	.word	0x02610059
 80044b8:	007c0079 	.word	0x007c0079
 80044bc:	00a30261 	.word	0x00a30261
 80044c0:	00a600a6 	.word	0x00a600a6
 80044c4:	00a600a6 	.word	0x00a600a6
 80044c8:	00a600a6 	.word	0x00a600a6
 80044cc:	00a600a6 	.word	0x00a600a6
 80044d0:	026100a6 	.word	0x026100a6
 80044d4:	02610261 	.word	0x02610261
 80044d8:	02610261 	.word	0x02610261
 80044dc:	02610261 	.word	0x02610261
 80044e0:	02610261 	.word	0x02610261
 80044e4:	00d60261 	.word	0x00d60261
 80044e8:	0261010b 	.word	0x0261010b
 80044ec:	0261010b 	.word	0x0261010b
 80044f0:	02610261 	.word	0x02610261
 80044f4:	00b90261 	.word	0x00b90261
 80044f8:	02610261 	.word	0x02610261
 80044fc:	02610152 	.word	0x02610152
 8004500:	02610261 	.word	0x02610261
 8004504:	02610261 	.word	0x02610261
 8004508:	02610199 	.word	0x02610199
 800450c:	00660261 	.word	0x00660261
 8004510:	02610261 	.word	0x02610261
 8004514:	02610261 	.word	0x02610261
 8004518:	02610261 	.word	0x02610261
 800451c:	02610261 	.word	0x02610261
 8004520:	02610261 	.word	0x02610261
 8004524:	006100cd 	.word	0x006100cd
 8004528:	010b010b 	.word	0x010b010b
 800452c:	00bc010b 	.word	0x00bc010b
 8004530:	02610061 	.word	0x02610061
 8004534:	00bf0261 	.word	0x00bf0261
 8004538:	01340261 	.word	0x01340261
 800453c:	016f0154 	.word	0x016f0154
 8004540:	026100ca 	.word	0x026100ca
 8004544:	02610180 	.word	0x02610180
 8004548:	0261019b 	.word	0x0261019b
 800454c:	01b30261 	.word	0x01b30261
 8004550:	2201      	movs	r2, #1
 8004552:	212b      	movs	r1, #43	; 0x2b
 8004554:	e002      	b.n	800455c <_svfprintf_r+0x1a4>
 8004556:	b909      	cbnz	r1, 800455c <_svfprintf_r+0x1a4>
 8004558:	2201      	movs	r2, #1
 800455a:	2120      	movs	r1, #32
 800455c:	9b05      	ldr	r3, [sp, #20]
 800455e:	e793      	b.n	8004488 <_svfprintf_r+0xd0>
 8004560:	2a00      	cmp	r2, #0
 8004562:	d077      	beq.n	8004654 <_svfprintf_r+0x29c>
 8004564:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004568:	e074      	b.n	8004654 <_svfprintf_r+0x29c>
 800456a:	b10a      	cbz	r2, 8004570 <_svfprintf_r+0x1b8>
 800456c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004570:	4b41      	ldr	r3, [pc, #260]	; (8004678 <_svfprintf_r+0x2c0>)
 8004572:	e14b      	b.n	800480c <_svfprintf_r+0x454>
 8004574:	f045 0501 	orr.w	r5, r5, #1
 8004578:	e7f0      	b.n	800455c <_svfprintf_r+0x1a4>
 800457a:	683e      	ldr	r6, [r7, #0]
 800457c:	9609      	str	r6, [sp, #36]	; 0x24
 800457e:	2e00      	cmp	r6, #0
 8004580:	f107 0304 	add.w	r3, r7, #4
 8004584:	db01      	blt.n	800458a <_svfprintf_r+0x1d2>
 8004586:	461f      	mov	r7, r3
 8004588:	e7e8      	b.n	800455c <_svfprintf_r+0x1a4>
 800458a:	4276      	negs	r6, r6
 800458c:	9609      	str	r6, [sp, #36]	; 0x24
 800458e:	461f      	mov	r7, r3
 8004590:	f045 0504 	orr.w	r5, r5, #4
 8004594:	e7e2      	b.n	800455c <_svfprintf_r+0x1a4>
 8004596:	9e05      	ldr	r6, [sp, #20]
 8004598:	9b05      	ldr	r3, [sp, #20]
 800459a:	7836      	ldrb	r6, [r6, #0]
 800459c:	9602      	str	r6, [sp, #8]
 800459e:	2e2a      	cmp	r6, #42	; 0x2a
 80045a0:	f103 0301 	add.w	r3, r3, #1
 80045a4:	d002      	beq.n	80045ac <_svfprintf_r+0x1f4>
 80045a6:	f04f 0900 	mov.w	r9, #0
 80045aa:	e00a      	b.n	80045c2 <_svfprintf_r+0x20a>
 80045ac:	f8d7 9000 	ldr.w	r9, [r7]
 80045b0:	9305      	str	r3, [sp, #20]
 80045b2:	1d3e      	adds	r6, r7, #4
 80045b4:	f1b9 0f00 	cmp.w	r9, #0
 80045b8:	4637      	mov	r7, r6
 80045ba:	dacf      	bge.n	800455c <_svfprintf_r+0x1a4>
 80045bc:	f04f 39ff 	mov.w	r9, #4294967295
 80045c0:	e7cc      	b.n	800455c <_svfprintf_r+0x1a4>
 80045c2:	9305      	str	r3, [sp, #20]
 80045c4:	9b02      	ldr	r3, [sp, #8]
 80045c6:	3b30      	subs	r3, #48	; 0x30
 80045c8:	2b09      	cmp	r3, #9
 80045ca:	d808      	bhi.n	80045de <_svfprintf_r+0x226>
 80045cc:	fb00 3909 	mla	r9, r0, r9, r3
 80045d0:	9b05      	ldr	r3, [sp, #20]
 80045d2:	461e      	mov	r6, r3
 80045d4:	f816 3b01 	ldrb.w	r3, [r6], #1
 80045d8:	9302      	str	r3, [sp, #8]
 80045da:	4633      	mov	r3, r6
 80045dc:	e7f1      	b.n	80045c2 <_svfprintf_r+0x20a>
 80045de:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 80045e2:	e755      	b.n	8004490 <_svfprintf_r+0xd8>
 80045e4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80045e8:	e7b8      	b.n	800455c <_svfprintf_r+0x1a4>
 80045ea:	2300      	movs	r3, #0
 80045ec:	9309      	str	r3, [sp, #36]	; 0x24
 80045ee:	9b02      	ldr	r3, [sp, #8]
 80045f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80045f2:	3b30      	subs	r3, #48	; 0x30
 80045f4:	fb00 3306 	mla	r3, r0, r6, r3
 80045f8:	9309      	str	r3, [sp, #36]	; 0x24
 80045fa:	9b05      	ldr	r3, [sp, #20]
 80045fc:	461e      	mov	r6, r3
 80045fe:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004602:	9302      	str	r3, [sp, #8]
 8004604:	9b02      	ldr	r3, [sp, #8]
 8004606:	9605      	str	r6, [sp, #20]
 8004608:	3b30      	subs	r3, #48	; 0x30
 800460a:	2b09      	cmp	r3, #9
 800460c:	d9ef      	bls.n	80045ee <_svfprintf_r+0x236>
 800460e:	e73f      	b.n	8004490 <_svfprintf_r+0xd8>
 8004610:	f045 0508 	orr.w	r5, r5, #8
 8004614:	e7a2      	b.n	800455c <_svfprintf_r+0x1a4>
 8004616:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800461a:	e79f      	b.n	800455c <_svfprintf_r+0x1a4>
 800461c:	9b05      	ldr	r3, [sp, #20]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b6c      	cmp	r3, #108	; 0x6c
 8004622:	d103      	bne.n	800462c <_svfprintf_r+0x274>
 8004624:	9b05      	ldr	r3, [sp, #20]
 8004626:	3301      	adds	r3, #1
 8004628:	9305      	str	r3, [sp, #20]
 800462a:	e002      	b.n	8004632 <_svfprintf_r+0x27a>
 800462c:	f045 0510 	orr.w	r5, r5, #16
 8004630:	e794      	b.n	800455c <_svfprintf_r+0x1a4>
 8004632:	f045 0520 	orr.w	r5, r5, #32
 8004636:	e791      	b.n	800455c <_svfprintf_r+0x1a4>
 8004638:	1d3b      	adds	r3, r7, #4
 800463a:	9303      	str	r3, [sp, #12]
 800463c:	2600      	movs	r6, #0
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8004644:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004648:	e199      	b.n	800497e <_svfprintf_r+0x5c6>
 800464a:	b10a      	cbz	r2, 8004650 <_svfprintf_r+0x298>
 800464c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004650:	f045 0510 	orr.w	r5, r5, #16
 8004654:	06aa      	lsls	r2, r5, #26
 8004656:	d511      	bpl.n	800467c <_svfprintf_r+0x2c4>
 8004658:	3707      	adds	r7, #7
 800465a:	f027 0707 	bic.w	r7, r7, #7
 800465e:	f107 0308 	add.w	r3, r7, #8
 8004662:	9303      	str	r3, [sp, #12]
 8004664:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004668:	e017      	b.n	800469a <_svfprintf_r+0x2e2>
 800466a:	bf00      	nop
 800466c:	f3af 8000 	nop.w
	...
 8004678:	08007297 	.word	0x08007297
 800467c:	f015 0f10 	tst.w	r5, #16
 8004680:	f107 0304 	add.w	r3, r7, #4
 8004684:	d002      	beq.n	800468c <_svfprintf_r+0x2d4>
 8004686:	9303      	str	r3, [sp, #12]
 8004688:	683e      	ldr	r6, [r7, #0]
 800468a:	e005      	b.n	8004698 <_svfprintf_r+0x2e0>
 800468c:	683e      	ldr	r6, [r7, #0]
 800468e:	9303      	str	r3, [sp, #12]
 8004690:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004694:	bf18      	it	ne
 8004696:	b236      	sxthne	r6, r6
 8004698:	17f7      	asrs	r7, r6, #31
 800469a:	2e00      	cmp	r6, #0
 800469c:	f177 0300 	sbcs.w	r3, r7, #0
 80046a0:	f280 80de 	bge.w	8004860 <_svfprintf_r+0x4a8>
 80046a4:	4276      	negs	r6, r6
 80046a6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80046aa:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80046ae:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80046b2:	e0d5      	b.n	8004860 <_svfprintf_r+0x4a8>
 80046b4:	b10a      	cbz	r2, 80046ba <_svfprintf_r+0x302>
 80046b6:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80046ba:	3707      	adds	r7, #7
 80046bc:	f027 0707 	bic.w	r7, r7, #7
 80046c0:	f107 0308 	add.w	r3, r7, #8
 80046c4:	9303      	str	r3, [sp, #12]
 80046c6:	ed97 7b00 	vldr	d7, [r7]
 80046ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 80046ce:	9b06      	ldr	r3, [sp, #24]
 80046d0:	9312      	str	r3, [sp, #72]	; 0x48
 80046d2:	9b07      	ldr	r3, [sp, #28]
 80046d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80046da:	f04f 32ff 	mov.w	r2, #4294967295
 80046de:	4bab      	ldr	r3, [pc, #684]	; (800498c <_svfprintf_r+0x5d4>)
 80046e0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80046e4:	f7fc fa1e 	bl	8000b24 <__aeabi_dcmpun>
 80046e8:	2800      	cmp	r0, #0
 80046ea:	f040 84f1 	bne.w	80050d0 <_svfprintf_r+0xd18>
 80046ee:	f04f 32ff 	mov.w	r2, #4294967295
 80046f2:	4ba6      	ldr	r3, [pc, #664]	; (800498c <_svfprintf_r+0x5d4>)
 80046f4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80046f8:	f7fc f9f6 	bl	8000ae8 <__aeabi_dcmple>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	f040 84e7 	bne.w	80050d0 <_svfprintf_r+0xd18>
 8004702:	f000 bdfd 	b.w	8005300 <_svfprintf_r+0xf48>
 8004706:	b10a      	cbz	r2, 800470c <_svfprintf_r+0x354>
 8004708:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800470c:	f015 0f20 	tst.w	r5, #32
 8004710:	f107 0304 	add.w	r3, r7, #4
 8004714:	d007      	beq.n	8004726 <_svfprintf_r+0x36e>
 8004716:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	17ce      	asrs	r6, r1, #31
 800471c:	4608      	mov	r0, r1
 800471e:	4631      	mov	r1, r6
 8004720:	e9c2 0100 	strd	r0, r1, [r2]
 8004724:	e00b      	b.n	800473e <_svfprintf_r+0x386>
 8004726:	06e9      	lsls	r1, r5, #27
 8004728:	d406      	bmi.n	8004738 <_svfprintf_r+0x380>
 800472a:	066a      	lsls	r2, r5, #25
 800472c:	d504      	bpl.n	8004738 <_svfprintf_r+0x380>
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8004734:	8011      	strh	r1, [r2, #0]
 8004736:	e002      	b.n	800473e <_svfprintf_r+0x386>
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800473c:	6011      	str	r1, [r2, #0]
 800473e:	461f      	mov	r7, r3
 8004740:	e670      	b.n	8004424 <_svfprintf_r+0x6c>
 8004742:	f045 0510 	orr.w	r5, r5, #16
 8004746:	f015 0320 	ands.w	r3, r5, #32
 800474a:	d009      	beq.n	8004760 <_svfprintf_r+0x3a8>
 800474c:	3707      	adds	r7, #7
 800474e:	f027 0707 	bic.w	r7, r7, #7
 8004752:	f107 0308 	add.w	r3, r7, #8
 8004756:	e9d7 6700 	ldrd	r6, r7, [r7]
 800475a:	9303      	str	r3, [sp, #12]
 800475c:	2300      	movs	r3, #0
 800475e:	e07b      	b.n	8004858 <_svfprintf_r+0x4a0>
 8004760:	1d3a      	adds	r2, r7, #4
 8004762:	f015 0110 	ands.w	r1, r5, #16
 8004766:	9203      	str	r2, [sp, #12]
 8004768:	d105      	bne.n	8004776 <_svfprintf_r+0x3be>
 800476a:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800476e:	d002      	beq.n	8004776 <_svfprintf_r+0x3be>
 8004770:	883e      	ldrh	r6, [r7, #0]
 8004772:	2700      	movs	r7, #0
 8004774:	e7f2      	b.n	800475c <_svfprintf_r+0x3a4>
 8004776:	683e      	ldr	r6, [r7, #0]
 8004778:	2700      	movs	r7, #0
 800477a:	e06d      	b.n	8004858 <_svfprintf_r+0x4a0>
 800477c:	1d3b      	adds	r3, r7, #4
 800477e:	9303      	str	r3, [sp, #12]
 8004780:	2330      	movs	r3, #48	; 0x30
 8004782:	2278      	movs	r2, #120	; 0x78
 8004784:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8004788:	4b81      	ldr	r3, [pc, #516]	; (8004990 <_svfprintf_r+0x5d8>)
 800478a:	683e      	ldr	r6, [r7, #0]
 800478c:	9311      	str	r3, [sp, #68]	; 0x44
 800478e:	2700      	movs	r7, #0
 8004790:	f045 0502 	orr.w	r5, r5, #2
 8004794:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8004798:	2302      	movs	r3, #2
 800479a:	9202      	str	r2, [sp, #8]
 800479c:	e05c      	b.n	8004858 <_svfprintf_r+0x4a0>
 800479e:	2600      	movs	r6, #0
 80047a0:	1d3b      	adds	r3, r7, #4
 80047a2:	45b1      	cmp	r9, r6
 80047a4:	9303      	str	r3, [sp, #12]
 80047a6:	f8d7 8000 	ldr.w	r8, [r7]
 80047aa:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80047ae:	db0a      	blt.n	80047c6 <_svfprintf_r+0x40e>
 80047b0:	464a      	mov	r2, r9
 80047b2:	4631      	mov	r1, r6
 80047b4:	4640      	mov	r0, r8
 80047b6:	f7fb fd13 	bl	80001e0 <memchr>
 80047ba:	2800      	cmp	r0, #0
 80047bc:	f000 80ea 	beq.w	8004994 <_svfprintf_r+0x5dc>
 80047c0:	ebc8 0900 	rsb	r9, r8, r0
 80047c4:	e0e7      	b.n	8004996 <_svfprintf_r+0x5de>
 80047c6:	4640      	mov	r0, r8
 80047c8:	f7fb fd02 	bl	80001d0 <strlen>
 80047cc:	4681      	mov	r9, r0
 80047ce:	e0e2      	b.n	8004996 <_svfprintf_r+0x5de>
 80047d0:	f045 0510 	orr.w	r5, r5, #16
 80047d4:	06ae      	lsls	r6, r5, #26
 80047d6:	d508      	bpl.n	80047ea <_svfprintf_r+0x432>
 80047d8:	3707      	adds	r7, #7
 80047da:	f027 0707 	bic.w	r7, r7, #7
 80047de:	f107 0308 	add.w	r3, r7, #8
 80047e2:	9303      	str	r3, [sp, #12]
 80047e4:	e9d7 6700 	ldrd	r6, r7, [r7]
 80047e8:	e00a      	b.n	8004800 <_svfprintf_r+0x448>
 80047ea:	1d3b      	adds	r3, r7, #4
 80047ec:	f015 0f10 	tst.w	r5, #16
 80047f0:	9303      	str	r3, [sp, #12]
 80047f2:	d103      	bne.n	80047fc <_svfprintf_r+0x444>
 80047f4:	0668      	lsls	r0, r5, #25
 80047f6:	d501      	bpl.n	80047fc <_svfprintf_r+0x444>
 80047f8:	883e      	ldrh	r6, [r7, #0]
 80047fa:	e000      	b.n	80047fe <_svfprintf_r+0x446>
 80047fc:	683e      	ldr	r6, [r7, #0]
 80047fe:	2700      	movs	r7, #0
 8004800:	2301      	movs	r3, #1
 8004802:	e029      	b.n	8004858 <_svfprintf_r+0x4a0>
 8004804:	b10a      	cbz	r2, 800480a <_svfprintf_r+0x452>
 8004806:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800480a:	4b61      	ldr	r3, [pc, #388]	; (8004990 <_svfprintf_r+0x5d8>)
 800480c:	9311      	str	r3, [sp, #68]	; 0x44
 800480e:	06a9      	lsls	r1, r5, #26
 8004810:	d508      	bpl.n	8004824 <_svfprintf_r+0x46c>
 8004812:	3707      	adds	r7, #7
 8004814:	f027 0707 	bic.w	r7, r7, #7
 8004818:	f107 0308 	add.w	r3, r7, #8
 800481c:	9303      	str	r3, [sp, #12]
 800481e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004822:	e00a      	b.n	800483a <_svfprintf_r+0x482>
 8004824:	1d3b      	adds	r3, r7, #4
 8004826:	f015 0f10 	tst.w	r5, #16
 800482a:	9303      	str	r3, [sp, #12]
 800482c:	d103      	bne.n	8004836 <_svfprintf_r+0x47e>
 800482e:	066a      	lsls	r2, r5, #25
 8004830:	d501      	bpl.n	8004836 <_svfprintf_r+0x47e>
 8004832:	883e      	ldrh	r6, [r7, #0]
 8004834:	e000      	b.n	8004838 <_svfprintf_r+0x480>
 8004836:	683e      	ldr	r6, [r7, #0]
 8004838:	2700      	movs	r7, #0
 800483a:	07eb      	lsls	r3, r5, #31
 800483c:	d50b      	bpl.n	8004856 <_svfprintf_r+0x49e>
 800483e:	ea56 0307 	orrs.w	r3, r6, r7
 8004842:	d008      	beq.n	8004856 <_svfprintf_r+0x49e>
 8004844:	2330      	movs	r3, #48	; 0x30
 8004846:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800484a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800484e:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8004852:	f045 0502 	orr.w	r5, r5, #2
 8004856:	2302      	movs	r3, #2
 8004858:	2200      	movs	r2, #0
 800485a:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800485e:	e000      	b.n	8004862 <_svfprintf_r+0x4aa>
 8004860:	2301      	movs	r3, #1
 8004862:	f1b9 0f00 	cmp.w	r9, #0
 8004866:	f2c0 855c 	blt.w	8005322 <_svfprintf_r+0xf6a>
 800486a:	ea56 0207 	orrs.w	r2, r6, r7
 800486e:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8004872:	d103      	bne.n	800487c <_svfprintf_r+0x4c4>
 8004874:	f1b9 0f00 	cmp.w	r9, #0
 8004878:	d05f      	beq.n	800493a <_svfprintf_r+0x582>
 800487a:	e006      	b.n	800488a <_svfprintf_r+0x4d2>
 800487c:	460d      	mov	r5, r1
 800487e:	2b01      	cmp	r3, #1
 8004880:	d025      	beq.n	80048ce <_svfprintf_r+0x516>
 8004882:	2b02      	cmp	r3, #2
 8004884:	d046      	beq.n	8004914 <_svfprintf_r+0x55c>
 8004886:	4629      	mov	r1, r5
 8004888:	e007      	b.n	800489a <_svfprintf_r+0x4e2>
 800488a:	460d      	mov	r5, r1
 800488c:	2b01      	cmp	r3, #1
 800488e:	d022      	beq.n	80048d6 <_svfprintf_r+0x51e>
 8004890:	2b02      	cmp	r3, #2
 8004892:	d03d      	beq.n	8004910 <_svfprintf_r+0x558>
 8004894:	4629      	mov	r1, r5
 8004896:	2600      	movs	r6, #0
 8004898:	2700      	movs	r7, #0
 800489a:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800489e:	08f2      	lsrs	r2, r6, #3
 80048a0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80048a4:	08f8      	lsrs	r0, r7, #3
 80048a6:	f006 0307 	and.w	r3, r6, #7
 80048aa:	4607      	mov	r7, r0
 80048ac:	4616      	mov	r6, r2
 80048ae:	3330      	adds	r3, #48	; 0x30
 80048b0:	ea56 0207 	orrs.w	r2, r6, r7
 80048b4:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80048b8:	d1f1      	bne.n	800489e <_svfprintf_r+0x4e6>
 80048ba:	07e8      	lsls	r0, r5, #31
 80048bc:	d548      	bpl.n	8004950 <_svfprintf_r+0x598>
 80048be:	2b30      	cmp	r3, #48	; 0x30
 80048c0:	d046      	beq.n	8004950 <_svfprintf_r+0x598>
 80048c2:	2330      	movs	r3, #48	; 0x30
 80048c4:	f808 3c01 	strb.w	r3, [r8, #-1]
 80048c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80048cc:	e040      	b.n	8004950 <_svfprintf_r+0x598>
 80048ce:	2f00      	cmp	r7, #0
 80048d0:	bf08      	it	eq
 80048d2:	2e0a      	cmpeq	r6, #10
 80048d4:	d205      	bcs.n	80048e2 <_svfprintf_r+0x52a>
 80048d6:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80048da:	3630      	adds	r6, #48	; 0x30
 80048dc:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80048e0:	e029      	b.n	8004936 <_svfprintf_r+0x57e>
 80048e2:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80048e6:	4630      	mov	r0, r6
 80048e8:	4639      	mov	r1, r7
 80048ea:	220a      	movs	r2, #10
 80048ec:	2300      	movs	r3, #0
 80048ee:	f7fc f957 	bl	8000ba0 <__aeabi_uldivmod>
 80048f2:	3230      	adds	r2, #48	; 0x30
 80048f4:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80048f8:	2300      	movs	r3, #0
 80048fa:	4630      	mov	r0, r6
 80048fc:	4639      	mov	r1, r7
 80048fe:	220a      	movs	r2, #10
 8004900:	f7fc f94e 	bl	8000ba0 <__aeabi_uldivmod>
 8004904:	4606      	mov	r6, r0
 8004906:	460f      	mov	r7, r1
 8004908:	ea56 0307 	orrs.w	r3, r6, r7
 800490c:	d1eb      	bne.n	80048e6 <_svfprintf_r+0x52e>
 800490e:	e012      	b.n	8004936 <_svfprintf_r+0x57e>
 8004910:	2600      	movs	r6, #0
 8004912:	2700      	movs	r7, #0
 8004914:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8004918:	f006 030f 	and.w	r3, r6, #15
 800491c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800491e:	5cd3      	ldrb	r3, [r2, r3]
 8004920:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8004924:	0933      	lsrs	r3, r6, #4
 8004926:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800492a:	093a      	lsrs	r2, r7, #4
 800492c:	461e      	mov	r6, r3
 800492e:	4617      	mov	r7, r2
 8004930:	ea56 0307 	orrs.w	r3, r6, r7
 8004934:	d1f0      	bne.n	8004918 <_svfprintf_r+0x560>
 8004936:	4629      	mov	r1, r5
 8004938:	e00a      	b.n	8004950 <_svfprintf_r+0x598>
 800493a:	b93b      	cbnz	r3, 800494c <_svfprintf_r+0x594>
 800493c:	07ea      	lsls	r2, r5, #31
 800493e:	d505      	bpl.n	800494c <_svfprintf_r+0x594>
 8004940:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8004944:	2330      	movs	r3, #48	; 0x30
 8004946:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800494a:	e001      	b.n	8004950 <_svfprintf_r+0x598>
 800494c:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8004950:	464e      	mov	r6, r9
 8004952:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8004956:	ebc8 0909 	rsb	r9, r8, r9
 800495a:	460d      	mov	r5, r1
 800495c:	2700      	movs	r7, #0
 800495e:	e01b      	b.n	8004998 <_svfprintf_r+0x5e0>
 8004960:	b10a      	cbz	r2, 8004966 <_svfprintf_r+0x5ae>
 8004962:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004966:	9b02      	ldr	r3, [sp, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 83a0 	beq.w	80050ae <_svfprintf_r+0xcf6>
 800496e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004972:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8004976:	2600      	movs	r6, #0
 8004978:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800497c:	9703      	str	r7, [sp, #12]
 800497e:	f04f 0901 	mov.w	r9, #1
 8004982:	4637      	mov	r7, r6
 8004984:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8004988:	e006      	b.n	8004998 <_svfprintf_r+0x5e0>
 800498a:	bf00      	nop
 800498c:	7fefffff 	.word	0x7fefffff
 8004990:	080072a8 	.word	0x080072a8
 8004994:	4606      	mov	r6, r0
 8004996:	4637      	mov	r7, r6
 8004998:	454e      	cmp	r6, r9
 800499a:	4633      	mov	r3, r6
 800499c:	bfb8      	it	lt
 800499e:	464b      	movlt	r3, r9
 80049a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80049a2:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80049a6:	b113      	cbz	r3, 80049ae <_svfprintf_r+0x5f6>
 80049a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049aa:	3301      	adds	r3, #1
 80049ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80049ae:	f015 0302 	ands.w	r3, r5, #2
 80049b2:	9314      	str	r3, [sp, #80]	; 0x50
 80049b4:	bf1e      	ittt	ne
 80049b6:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 80049b8:	3302      	addne	r3, #2
 80049ba:	930b      	strne	r3, [sp, #44]	; 0x2c
 80049bc:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80049c0:	9315      	str	r3, [sp, #84]	; 0x54
 80049c2:	d139      	bne.n	8004a38 <_svfprintf_r+0x680>
 80049c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049c8:	1a9b      	subs	r3, r3, r2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	930c      	str	r3, [sp, #48]	; 0x30
 80049ce:	dd33      	ble.n	8004a38 <_svfprintf_r+0x680>
 80049d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049d2:	2b10      	cmp	r3, #16
 80049d4:	4ba6      	ldr	r3, [pc, #664]	; (8004c70 <_svfprintf_r+0x8b8>)
 80049d6:	6023      	str	r3, [r4, #0]
 80049d8:	dd18      	ble.n	8004a0c <_svfprintf_r+0x654>
 80049da:	2310      	movs	r3, #16
 80049dc:	6063      	str	r3, [r4, #4]
 80049de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049e0:	3310      	adds	r3, #16
 80049e2:	9321      	str	r3, [sp, #132]	; 0x84
 80049e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80049e6:	3301      	adds	r3, #1
 80049e8:	2b07      	cmp	r3, #7
 80049ea:	9320      	str	r3, [sp, #128]	; 0x80
 80049ec:	dc01      	bgt.n	80049f2 <_svfprintf_r+0x63a>
 80049ee:	3408      	adds	r4, #8
 80049f0:	e008      	b.n	8004a04 <_svfprintf_r+0x64c>
 80049f2:	aa1f      	add	r2, sp, #124	; 0x7c
 80049f4:	4659      	mov	r1, fp
 80049f6:	4650      	mov	r0, sl
 80049f8:	f001 ffe6 	bl	80069c8 <__ssprint_r>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	f040 835d 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004a02:	ac2c      	add	r4, sp, #176	; 0xb0
 8004a04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a06:	3b10      	subs	r3, #16
 8004a08:	930c      	str	r3, [sp, #48]	; 0x30
 8004a0a:	e7e1      	b.n	80049d0 <_svfprintf_r+0x618>
 8004a0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a0e:	6063      	str	r3, [r4, #4]
 8004a10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a14:	4413      	add	r3, r2
 8004a16:	9321      	str	r3, [sp, #132]	; 0x84
 8004a18:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	2b07      	cmp	r3, #7
 8004a1e:	9320      	str	r3, [sp, #128]	; 0x80
 8004a20:	dc01      	bgt.n	8004a26 <_svfprintf_r+0x66e>
 8004a22:	3408      	adds	r4, #8
 8004a24:	e008      	b.n	8004a38 <_svfprintf_r+0x680>
 8004a26:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a28:	4659      	mov	r1, fp
 8004a2a:	4650      	mov	r0, sl
 8004a2c:	f001 ffcc 	bl	80069c8 <__ssprint_r>
 8004a30:	2800      	cmp	r0, #0
 8004a32:	f040 8343 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004a36:	ac2c      	add	r4, sp, #176	; 0xb0
 8004a38:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8004a3c:	b1bb      	cbz	r3, 8004a6e <_svfprintf_r+0x6b6>
 8004a3e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8004a42:	6023      	str	r3, [r4, #0]
 8004a44:	2301      	movs	r3, #1
 8004a46:	6063      	str	r3, [r4, #4]
 8004a48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	9321      	str	r3, [sp, #132]	; 0x84
 8004a4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a50:	3301      	adds	r3, #1
 8004a52:	2b07      	cmp	r3, #7
 8004a54:	9320      	str	r3, [sp, #128]	; 0x80
 8004a56:	dc01      	bgt.n	8004a5c <_svfprintf_r+0x6a4>
 8004a58:	3408      	adds	r4, #8
 8004a5a:	e008      	b.n	8004a6e <_svfprintf_r+0x6b6>
 8004a5c:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a5e:	4659      	mov	r1, fp
 8004a60:	4650      	mov	r0, sl
 8004a62:	f001 ffb1 	bl	80069c8 <__ssprint_r>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	f040 8328 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004a6c:	ac2c      	add	r4, sp, #176	; 0xb0
 8004a6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a70:	b1b3      	cbz	r3, 8004aa0 <_svfprintf_r+0x6e8>
 8004a72:	ab18      	add	r3, sp, #96	; 0x60
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	2302      	movs	r3, #2
 8004a78:	6063      	str	r3, [r4, #4]
 8004a7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a7c:	3302      	adds	r3, #2
 8004a7e:	9321      	str	r3, [sp, #132]	; 0x84
 8004a80:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a82:	3301      	adds	r3, #1
 8004a84:	2b07      	cmp	r3, #7
 8004a86:	9320      	str	r3, [sp, #128]	; 0x80
 8004a88:	dc01      	bgt.n	8004a8e <_svfprintf_r+0x6d6>
 8004a8a:	3408      	adds	r4, #8
 8004a8c:	e008      	b.n	8004aa0 <_svfprintf_r+0x6e8>
 8004a8e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a90:	4659      	mov	r1, fp
 8004a92:	4650      	mov	r0, sl
 8004a94:	f001 ff98 	bl	80069c8 <__ssprint_r>
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	f040 830f 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004a9e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004aa0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004aa2:	2b80      	cmp	r3, #128	; 0x80
 8004aa4:	d135      	bne.n	8004b12 <_svfprintf_r+0x75a>
 8004aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	dd30      	ble.n	8004b12 <_svfprintf_r+0x75a>
 8004ab0:	4a70      	ldr	r2, [pc, #448]	; (8004c74 <_svfprintf_r+0x8bc>)
 8004ab2:	6022      	str	r2, [r4, #0]
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	dd18      	ble.n	8004aea <_svfprintf_r+0x732>
 8004ab8:	2210      	movs	r2, #16
 8004aba:	6062      	str	r2, [r4, #4]
 8004abc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004abe:	3210      	adds	r2, #16
 8004ac0:	9221      	str	r2, [sp, #132]	; 0x84
 8004ac2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004ac4:	3201      	adds	r2, #1
 8004ac6:	2a07      	cmp	r2, #7
 8004ac8:	9220      	str	r2, [sp, #128]	; 0x80
 8004aca:	dc01      	bgt.n	8004ad0 <_svfprintf_r+0x718>
 8004acc:	3408      	adds	r4, #8
 8004ace:	e00a      	b.n	8004ae6 <_svfprintf_r+0x72e>
 8004ad0:	aa1f      	add	r2, sp, #124	; 0x7c
 8004ad2:	4659      	mov	r1, fp
 8004ad4:	4650      	mov	r0, sl
 8004ad6:	930c      	str	r3, [sp, #48]	; 0x30
 8004ad8:	f001 ff76 	bl	80069c8 <__ssprint_r>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	f040 82ed 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004ae2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ae4:	ac2c      	add	r4, sp, #176	; 0xb0
 8004ae6:	3b10      	subs	r3, #16
 8004ae8:	e7e2      	b.n	8004ab0 <_svfprintf_r+0x6f8>
 8004aea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004aec:	6063      	str	r3, [r4, #4]
 8004aee:	4413      	add	r3, r2
 8004af0:	9321      	str	r3, [sp, #132]	; 0x84
 8004af2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004af4:	3301      	adds	r3, #1
 8004af6:	2b07      	cmp	r3, #7
 8004af8:	9320      	str	r3, [sp, #128]	; 0x80
 8004afa:	dc01      	bgt.n	8004b00 <_svfprintf_r+0x748>
 8004afc:	3408      	adds	r4, #8
 8004afe:	e008      	b.n	8004b12 <_svfprintf_r+0x75a>
 8004b00:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b02:	4659      	mov	r1, fp
 8004b04:	4650      	mov	r0, sl
 8004b06:	f001 ff5f 	bl	80069c8 <__ssprint_r>
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	f040 82d6 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004b10:	ac2c      	add	r4, sp, #176	; 0xb0
 8004b12:	ebc9 0606 	rsb	r6, r9, r6
 8004b16:	2e00      	cmp	r6, #0
 8004b18:	dd2e      	ble.n	8004b78 <_svfprintf_r+0x7c0>
 8004b1a:	4b56      	ldr	r3, [pc, #344]	; (8004c74 <_svfprintf_r+0x8bc>)
 8004b1c:	6023      	str	r3, [r4, #0]
 8004b1e:	2e10      	cmp	r6, #16
 8004b20:	dd16      	ble.n	8004b50 <_svfprintf_r+0x798>
 8004b22:	2310      	movs	r3, #16
 8004b24:	6063      	str	r3, [r4, #4]
 8004b26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b28:	3310      	adds	r3, #16
 8004b2a:	9321      	str	r3, [sp, #132]	; 0x84
 8004b2c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004b2e:	3301      	adds	r3, #1
 8004b30:	2b07      	cmp	r3, #7
 8004b32:	9320      	str	r3, [sp, #128]	; 0x80
 8004b34:	dc01      	bgt.n	8004b3a <_svfprintf_r+0x782>
 8004b36:	3408      	adds	r4, #8
 8004b38:	e008      	b.n	8004b4c <_svfprintf_r+0x794>
 8004b3a:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b3c:	4659      	mov	r1, fp
 8004b3e:	4650      	mov	r0, sl
 8004b40:	f001 ff42 	bl	80069c8 <__ssprint_r>
 8004b44:	2800      	cmp	r0, #0
 8004b46:	f040 82b9 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004b4a:	ac2c      	add	r4, sp, #176	; 0xb0
 8004b4c:	3e10      	subs	r6, #16
 8004b4e:	e7e4      	b.n	8004b1a <_svfprintf_r+0x762>
 8004b50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004b52:	9821      	ldr	r0, [sp, #132]	; 0x84
 8004b54:	6066      	str	r6, [r4, #4]
 8004b56:	3301      	adds	r3, #1
 8004b58:	4406      	add	r6, r0
 8004b5a:	2b07      	cmp	r3, #7
 8004b5c:	9621      	str	r6, [sp, #132]	; 0x84
 8004b5e:	9320      	str	r3, [sp, #128]	; 0x80
 8004b60:	dc01      	bgt.n	8004b66 <_svfprintf_r+0x7ae>
 8004b62:	3408      	adds	r4, #8
 8004b64:	e008      	b.n	8004b78 <_svfprintf_r+0x7c0>
 8004b66:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b68:	4659      	mov	r1, fp
 8004b6a:	4650      	mov	r0, sl
 8004b6c:	f001 ff2c 	bl	80069c8 <__ssprint_r>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	f040 82a3 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004b76:	ac2c      	add	r4, sp, #176	; 0xb0
 8004b78:	05eb      	lsls	r3, r5, #23
 8004b7a:	d414      	bmi.n	8004ba6 <_svfprintf_r+0x7ee>
 8004b7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b7e:	e884 0300 	stmia.w	r4, {r8, r9}
 8004b82:	444b      	add	r3, r9
 8004b84:	9321      	str	r3, [sp, #132]	; 0x84
 8004b86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004b88:	3301      	adds	r3, #1
 8004b8a:	2b07      	cmp	r3, #7
 8004b8c:	9320      	str	r3, [sp, #128]	; 0x80
 8004b8e:	f340 8244 	ble.w	800501a <_svfprintf_r+0xc62>
 8004b92:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b94:	4659      	mov	r1, fp
 8004b96:	4650      	mov	r0, sl
 8004b98:	f001 ff16 	bl	80069c8 <__ssprint_r>
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	f040 828d 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004ba2:	ac2c      	add	r4, sp, #176	; 0xb0
 8004ba4:	e23a      	b.n	800501c <_svfprintf_r+0xc64>
 8004ba6:	9b02      	ldr	r3, [sp, #8]
 8004ba8:	2b65      	cmp	r3, #101	; 0x65
 8004baa:	f340 81ad 	ble.w	8004f08 <_svfprintf_r+0xb50>
 8004bae:	2200      	movs	r2, #0
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bb6:	f7fb ff83 	bl	8000ac0 <__aeabi_dcmpeq>
 8004bba:	2800      	cmp	r0, #0
 8004bbc:	d05e      	beq.n	8004c7c <_svfprintf_r+0x8c4>
 8004bbe:	4b2e      	ldr	r3, [pc, #184]	; (8004c78 <_svfprintf_r+0x8c0>)
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	6063      	str	r3, [r4, #4]
 8004bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bc8:	3301      	adds	r3, #1
 8004bca:	9321      	str	r3, [sp, #132]	; 0x84
 8004bcc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004bce:	3301      	adds	r3, #1
 8004bd0:	2b07      	cmp	r3, #7
 8004bd2:	9320      	str	r3, [sp, #128]	; 0x80
 8004bd4:	dc01      	bgt.n	8004bda <_svfprintf_r+0x822>
 8004bd6:	3408      	adds	r4, #8
 8004bd8:	e008      	b.n	8004bec <_svfprintf_r+0x834>
 8004bda:	aa1f      	add	r2, sp, #124	; 0x7c
 8004bdc:	4659      	mov	r1, fp
 8004bde:	4650      	mov	r0, sl
 8004be0:	f001 fef2 	bl	80069c8 <__ssprint_r>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	f040 8269 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004bea:	ac2c      	add	r4, sp, #176	; 0xb0
 8004bec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004bee:	9a04      	ldr	r2, [sp, #16]
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	db02      	blt.n	8004bfa <_svfprintf_r+0x842>
 8004bf4:	07ee      	lsls	r6, r5, #31
 8004bf6:	f140 8211 	bpl.w	800501c <_svfprintf_r+0xc64>
 8004bfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	9b08      	ldr	r3, [sp, #32]
 8004c00:	6063      	str	r3, [r4, #4]
 8004c02:	9a08      	ldr	r2, [sp, #32]
 8004c04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c06:	4413      	add	r3, r2
 8004c08:	9321      	str	r3, [sp, #132]	; 0x84
 8004c0a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	2b07      	cmp	r3, #7
 8004c10:	9320      	str	r3, [sp, #128]	; 0x80
 8004c12:	dc01      	bgt.n	8004c18 <_svfprintf_r+0x860>
 8004c14:	3408      	adds	r4, #8
 8004c16:	e008      	b.n	8004c2a <_svfprintf_r+0x872>
 8004c18:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c1a:	4659      	mov	r1, fp
 8004c1c:	4650      	mov	r0, sl
 8004c1e:	f001 fed3 	bl	80069c8 <__ssprint_r>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	f040 824a 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004c28:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c2a:	9b04      	ldr	r3, [sp, #16]
 8004c2c:	1e5e      	subs	r6, r3, #1
 8004c2e:	2e00      	cmp	r6, #0
 8004c30:	f340 81f4 	ble.w	800501c <_svfprintf_r+0xc64>
 8004c34:	4f0f      	ldr	r7, [pc, #60]	; (8004c74 <_svfprintf_r+0x8bc>)
 8004c36:	f04f 0810 	mov.w	r8, #16
 8004c3a:	2e10      	cmp	r6, #16
 8004c3c:	f340 8159 	ble.w	8004ef2 <_svfprintf_r+0xb3a>
 8004c40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c42:	3310      	adds	r3, #16
 8004c44:	9321      	str	r3, [sp, #132]	; 0x84
 8004c46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c48:	3301      	adds	r3, #1
 8004c4a:	2b07      	cmp	r3, #7
 8004c4c:	e884 0180 	stmia.w	r4, {r7, r8}
 8004c50:	9320      	str	r3, [sp, #128]	; 0x80
 8004c52:	dc01      	bgt.n	8004c58 <_svfprintf_r+0x8a0>
 8004c54:	3408      	adds	r4, #8
 8004c56:	e008      	b.n	8004c6a <_svfprintf_r+0x8b2>
 8004c58:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c5a:	4659      	mov	r1, fp
 8004c5c:	4650      	mov	r0, sl
 8004c5e:	f001 feb3 	bl	80069c8 <__ssprint_r>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	f040 822a 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004c68:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c6a:	3e10      	subs	r6, #16
 8004c6c:	e7e5      	b.n	8004c3a <_svfprintf_r+0x882>
 8004c6e:	bf00      	nop
 8004c70:	080072bb 	.word	0x080072bb
 8004c74:	08007277 	.word	0x08007277
 8004c78:	080072b9 	.word	0x080072b9
 8004c7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	dc7c      	bgt.n	8004d7c <_svfprintf_r+0x9c4>
 8004c82:	4b9f      	ldr	r3, [pc, #636]	; (8004f00 <_svfprintf_r+0xb48>)
 8004c84:	6023      	str	r3, [r4, #0]
 8004c86:	2301      	movs	r3, #1
 8004c88:	6063      	str	r3, [r4, #4]
 8004c8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	9321      	str	r3, [sp, #132]	; 0x84
 8004c90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c92:	3301      	adds	r3, #1
 8004c94:	2b07      	cmp	r3, #7
 8004c96:	9320      	str	r3, [sp, #128]	; 0x80
 8004c98:	dc01      	bgt.n	8004c9e <_svfprintf_r+0x8e6>
 8004c9a:	3408      	adds	r4, #8
 8004c9c:	e008      	b.n	8004cb0 <_svfprintf_r+0x8f8>
 8004c9e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004ca0:	4659      	mov	r1, fp
 8004ca2:	4650      	mov	r0, sl
 8004ca4:	f001 fe90 	bl	80069c8 <__ssprint_r>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	f040 8207 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004cae:	ac2c      	add	r4, sp, #176	; 0xb0
 8004cb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004cb2:	b923      	cbnz	r3, 8004cbe <_svfprintf_r+0x906>
 8004cb4:	9b04      	ldr	r3, [sp, #16]
 8004cb6:	b913      	cbnz	r3, 8004cbe <_svfprintf_r+0x906>
 8004cb8:	07e8      	lsls	r0, r5, #31
 8004cba:	f140 81af 	bpl.w	800501c <_svfprintf_r+0xc64>
 8004cbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	9b08      	ldr	r3, [sp, #32]
 8004cc4:	6063      	str	r3, [r4, #4]
 8004cc6:	9a08      	ldr	r2, [sp, #32]
 8004cc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cca:	4413      	add	r3, r2
 8004ccc:	9321      	str	r3, [sp, #132]	; 0x84
 8004cce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	2b07      	cmp	r3, #7
 8004cd4:	9320      	str	r3, [sp, #128]	; 0x80
 8004cd6:	dc02      	bgt.n	8004cde <_svfprintf_r+0x926>
 8004cd8:	f104 0308 	add.w	r3, r4, #8
 8004cdc:	e008      	b.n	8004cf0 <_svfprintf_r+0x938>
 8004cde:	aa1f      	add	r2, sp, #124	; 0x7c
 8004ce0:	4659      	mov	r1, fp
 8004ce2:	4650      	mov	r0, sl
 8004ce4:	f001 fe70 	bl	80069c8 <__ssprint_r>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	f040 81e7 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004cee:	ab2c      	add	r3, sp, #176	; 0xb0
 8004cf0:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004cf2:	4276      	negs	r6, r6
 8004cf4:	2e00      	cmp	r6, #0
 8004cf6:	dd30      	ble.n	8004d5a <_svfprintf_r+0x9a2>
 8004cf8:	4f82      	ldr	r7, [pc, #520]	; (8004f04 <_svfprintf_r+0xb4c>)
 8004cfa:	2410      	movs	r4, #16
 8004cfc:	2e10      	cmp	r6, #16
 8004cfe:	dd16      	ble.n	8004d2e <_svfprintf_r+0x976>
 8004d00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d02:	601f      	str	r7, [r3, #0]
 8004d04:	3210      	adds	r2, #16
 8004d06:	9221      	str	r2, [sp, #132]	; 0x84
 8004d08:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d0a:	605c      	str	r4, [r3, #4]
 8004d0c:	3201      	adds	r2, #1
 8004d0e:	2a07      	cmp	r2, #7
 8004d10:	9220      	str	r2, [sp, #128]	; 0x80
 8004d12:	dc01      	bgt.n	8004d18 <_svfprintf_r+0x960>
 8004d14:	3308      	adds	r3, #8
 8004d16:	e008      	b.n	8004d2a <_svfprintf_r+0x972>
 8004d18:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d1a:	4659      	mov	r1, fp
 8004d1c:	4650      	mov	r0, sl
 8004d1e:	f001 fe53 	bl	80069c8 <__ssprint_r>
 8004d22:	2800      	cmp	r0, #0
 8004d24:	f040 81ca 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004d28:	ab2c      	add	r3, sp, #176	; 0xb0
 8004d2a:	3e10      	subs	r6, #16
 8004d2c:	e7e6      	b.n	8004cfc <_svfprintf_r+0x944>
 8004d2e:	4a75      	ldr	r2, [pc, #468]	; (8004f04 <_svfprintf_r+0xb4c>)
 8004d30:	e883 0044 	stmia.w	r3, {r2, r6}
 8004d34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d36:	4416      	add	r6, r2
 8004d38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d3a:	9621      	str	r6, [sp, #132]	; 0x84
 8004d3c:	3201      	adds	r2, #1
 8004d3e:	2a07      	cmp	r2, #7
 8004d40:	9220      	str	r2, [sp, #128]	; 0x80
 8004d42:	dc01      	bgt.n	8004d48 <_svfprintf_r+0x990>
 8004d44:	3308      	adds	r3, #8
 8004d46:	e008      	b.n	8004d5a <_svfprintf_r+0x9a2>
 8004d48:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d4a:	4659      	mov	r1, fp
 8004d4c:	4650      	mov	r0, sl
 8004d4e:	f001 fe3b 	bl	80069c8 <__ssprint_r>
 8004d52:	2800      	cmp	r0, #0
 8004d54:	f040 81b2 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004d58:	ab2c      	add	r3, sp, #176	; 0xb0
 8004d5a:	9a04      	ldr	r2, [sp, #16]
 8004d5c:	605a      	str	r2, [r3, #4]
 8004d5e:	9904      	ldr	r1, [sp, #16]
 8004d60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d62:	f8c3 8000 	str.w	r8, [r3]
 8004d66:	440a      	add	r2, r1
 8004d68:	9221      	str	r2, [sp, #132]	; 0x84
 8004d6a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d6c:	3201      	adds	r2, #1
 8004d6e:	2a07      	cmp	r2, #7
 8004d70:	9220      	str	r2, [sp, #128]	; 0x80
 8004d72:	f73f af0e 	bgt.w	8004b92 <_svfprintf_r+0x7da>
 8004d76:	f103 0408 	add.w	r4, r3, #8
 8004d7a:	e14f      	b.n	800501c <_svfprintf_r+0xc64>
 8004d7c:	9b04      	ldr	r3, [sp, #16]
 8004d7e:	42bb      	cmp	r3, r7
 8004d80:	bfa8      	it	ge
 8004d82:	463b      	movge	r3, r7
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	461e      	mov	r6, r3
 8004d88:	dd15      	ble.n	8004db6 <_svfprintf_r+0x9fe>
 8004d8a:	6063      	str	r3, [r4, #4]
 8004d8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d8e:	f8c4 8000 	str.w	r8, [r4]
 8004d92:	4433      	add	r3, r6
 8004d94:	9321      	str	r3, [sp, #132]	; 0x84
 8004d96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004d98:	3301      	adds	r3, #1
 8004d9a:	2b07      	cmp	r3, #7
 8004d9c:	9320      	str	r3, [sp, #128]	; 0x80
 8004d9e:	dc01      	bgt.n	8004da4 <_svfprintf_r+0x9ec>
 8004da0:	3408      	adds	r4, #8
 8004da2:	e008      	b.n	8004db6 <_svfprintf_r+0x9fe>
 8004da4:	aa1f      	add	r2, sp, #124	; 0x7c
 8004da6:	4659      	mov	r1, fp
 8004da8:	4650      	mov	r0, sl
 8004daa:	f001 fe0d 	bl	80069c8 <__ssprint_r>
 8004dae:	2800      	cmp	r0, #0
 8004db0:	f040 8184 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004db4:	ac2c      	add	r4, sp, #176	; 0xb0
 8004db6:	2e00      	cmp	r6, #0
 8004db8:	bfac      	ite	ge
 8004dba:	1bbe      	subge	r6, r7, r6
 8004dbc:	463e      	movlt	r6, r7
 8004dbe:	2e00      	cmp	r6, #0
 8004dc0:	dd30      	ble.n	8004e24 <_svfprintf_r+0xa6c>
 8004dc2:	f04f 0910 	mov.w	r9, #16
 8004dc6:	4b4f      	ldr	r3, [pc, #316]	; (8004f04 <_svfprintf_r+0xb4c>)
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	2e10      	cmp	r6, #16
 8004dcc:	dd16      	ble.n	8004dfc <_svfprintf_r+0xa44>
 8004dce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dd0:	f8c4 9004 	str.w	r9, [r4, #4]
 8004dd4:	3310      	adds	r3, #16
 8004dd6:	9321      	str	r3, [sp, #132]	; 0x84
 8004dd8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004dda:	3301      	adds	r3, #1
 8004ddc:	2b07      	cmp	r3, #7
 8004dde:	9320      	str	r3, [sp, #128]	; 0x80
 8004de0:	dc01      	bgt.n	8004de6 <_svfprintf_r+0xa2e>
 8004de2:	3408      	adds	r4, #8
 8004de4:	e008      	b.n	8004df8 <_svfprintf_r+0xa40>
 8004de6:	aa1f      	add	r2, sp, #124	; 0x7c
 8004de8:	4659      	mov	r1, fp
 8004dea:	4650      	mov	r0, sl
 8004dec:	f001 fdec 	bl	80069c8 <__ssprint_r>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	f040 8163 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004df6:	ac2c      	add	r4, sp, #176	; 0xb0
 8004df8:	3e10      	subs	r6, #16
 8004dfa:	e7e4      	b.n	8004dc6 <_svfprintf_r+0xa0e>
 8004dfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dfe:	6066      	str	r6, [r4, #4]
 8004e00:	441e      	add	r6, r3
 8004e02:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004e04:	9621      	str	r6, [sp, #132]	; 0x84
 8004e06:	3301      	adds	r3, #1
 8004e08:	2b07      	cmp	r3, #7
 8004e0a:	9320      	str	r3, [sp, #128]	; 0x80
 8004e0c:	dc01      	bgt.n	8004e12 <_svfprintf_r+0xa5a>
 8004e0e:	3408      	adds	r4, #8
 8004e10:	e008      	b.n	8004e24 <_svfprintf_r+0xa6c>
 8004e12:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e14:	4659      	mov	r1, fp
 8004e16:	4650      	mov	r0, sl
 8004e18:	f001 fdd6 	bl	80069c8 <__ssprint_r>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	f040 814d 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004e22:	ac2c      	add	r4, sp, #176	; 0xb0
 8004e24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e26:	9a04      	ldr	r2, [sp, #16]
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	4447      	add	r7, r8
 8004e2c:	db01      	blt.n	8004e32 <_svfprintf_r+0xa7a>
 8004e2e:	07e9      	lsls	r1, r5, #31
 8004e30:	d517      	bpl.n	8004e62 <_svfprintf_r+0xaaa>
 8004e32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	9b08      	ldr	r3, [sp, #32]
 8004e38:	6063      	str	r3, [r4, #4]
 8004e3a:	9a08      	ldr	r2, [sp, #32]
 8004e3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e3e:	4413      	add	r3, r2
 8004e40:	9321      	str	r3, [sp, #132]	; 0x84
 8004e42:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004e44:	3301      	adds	r3, #1
 8004e46:	2b07      	cmp	r3, #7
 8004e48:	9320      	str	r3, [sp, #128]	; 0x80
 8004e4a:	dc01      	bgt.n	8004e50 <_svfprintf_r+0xa98>
 8004e4c:	3408      	adds	r4, #8
 8004e4e:	e008      	b.n	8004e62 <_svfprintf_r+0xaaa>
 8004e50:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e52:	4659      	mov	r1, fp
 8004e54:	4650      	mov	r0, sl
 8004e56:	f001 fdb7 	bl	80069c8 <__ssprint_r>
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	f040 812e 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004e60:	ac2c      	add	r4, sp, #176	; 0xb0
 8004e62:	9b04      	ldr	r3, [sp, #16]
 8004e64:	9a04      	ldr	r2, [sp, #16]
 8004e66:	eb08 0603 	add.w	r6, r8, r3
 8004e6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e6c:	1bf6      	subs	r6, r6, r7
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	429e      	cmp	r6, r3
 8004e72:	bfa8      	it	ge
 8004e74:	461e      	movge	r6, r3
 8004e76:	2e00      	cmp	r6, #0
 8004e78:	dd14      	ble.n	8004ea4 <_svfprintf_r+0xaec>
 8004e7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e7c:	6027      	str	r7, [r4, #0]
 8004e7e:	4433      	add	r3, r6
 8004e80:	9321      	str	r3, [sp, #132]	; 0x84
 8004e82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004e84:	6066      	str	r6, [r4, #4]
 8004e86:	3301      	adds	r3, #1
 8004e88:	2b07      	cmp	r3, #7
 8004e8a:	9320      	str	r3, [sp, #128]	; 0x80
 8004e8c:	dc01      	bgt.n	8004e92 <_svfprintf_r+0xada>
 8004e8e:	3408      	adds	r4, #8
 8004e90:	e008      	b.n	8004ea4 <_svfprintf_r+0xaec>
 8004e92:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e94:	4659      	mov	r1, fp
 8004e96:	4650      	mov	r0, sl
 8004e98:	f001 fd96 	bl	80069c8 <__ssprint_r>
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	f040 810d 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004ea2:	ac2c      	add	r4, sp, #176	; 0xb0
 8004ea4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ea6:	9a04      	ldr	r2, [sp, #16]
 8004ea8:	2e00      	cmp	r6, #0
 8004eaa:	eba2 0303 	sub.w	r3, r2, r3
 8004eae:	bfac      	ite	ge
 8004eb0:	1b9e      	subge	r6, r3, r6
 8004eb2:	461e      	movlt	r6, r3
 8004eb4:	2e00      	cmp	r6, #0
 8004eb6:	f340 80b1 	ble.w	800501c <_svfprintf_r+0xc64>
 8004eba:	4f12      	ldr	r7, [pc, #72]	; (8004f04 <_svfprintf_r+0xb4c>)
 8004ebc:	f04f 0810 	mov.w	r8, #16
 8004ec0:	2e10      	cmp	r6, #16
 8004ec2:	dd16      	ble.n	8004ef2 <_svfprintf_r+0xb3a>
 8004ec4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ec6:	3310      	adds	r3, #16
 8004ec8:	9321      	str	r3, [sp, #132]	; 0x84
 8004eca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004ecc:	3301      	adds	r3, #1
 8004ece:	2b07      	cmp	r3, #7
 8004ed0:	e884 0180 	stmia.w	r4, {r7, r8}
 8004ed4:	9320      	str	r3, [sp, #128]	; 0x80
 8004ed6:	dc01      	bgt.n	8004edc <_svfprintf_r+0xb24>
 8004ed8:	3408      	adds	r4, #8
 8004eda:	e008      	b.n	8004eee <_svfprintf_r+0xb36>
 8004edc:	aa1f      	add	r2, sp, #124	; 0x7c
 8004ede:	4659      	mov	r1, fp
 8004ee0:	4650      	mov	r0, sl
 8004ee2:	f001 fd71 	bl	80069c8 <__ssprint_r>
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	f040 80e8 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004eec:	ac2c      	add	r4, sp, #176	; 0xb0
 8004eee:	3e10      	subs	r6, #16
 8004ef0:	e7e6      	b.n	8004ec0 <_svfprintf_r+0xb08>
 8004ef2:	4b04      	ldr	r3, [pc, #16]	; (8004f04 <_svfprintf_r+0xb4c>)
 8004ef4:	e884 0048 	stmia.w	r4, {r3, r6}
 8004ef8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004efa:	441e      	add	r6, r3
 8004efc:	9621      	str	r6, [sp, #132]	; 0x84
 8004efe:	e642      	b.n	8004b86 <_svfprintf_r+0x7ce>
 8004f00:	080072b9 	.word	0x080072b9
 8004f04:	08007277 	.word	0x08007277
 8004f08:	9b04      	ldr	r3, [sp, #16]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	dc01      	bgt.n	8004f12 <_svfprintf_r+0xb5a>
 8004f0e:	07ea      	lsls	r2, r5, #31
 8004f10:	d573      	bpl.n	8004ffa <_svfprintf_r+0xc42>
 8004f12:	2301      	movs	r3, #1
 8004f14:	6063      	str	r3, [r4, #4]
 8004f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f18:	f8c4 8000 	str.w	r8, [r4]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	9321      	str	r3, [sp, #132]	; 0x84
 8004f20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f22:	3301      	adds	r3, #1
 8004f24:	2b07      	cmp	r3, #7
 8004f26:	9320      	str	r3, [sp, #128]	; 0x80
 8004f28:	dc01      	bgt.n	8004f2e <_svfprintf_r+0xb76>
 8004f2a:	3408      	adds	r4, #8
 8004f2c:	e008      	b.n	8004f40 <_svfprintf_r+0xb88>
 8004f2e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004f30:	4659      	mov	r1, fp
 8004f32:	4650      	mov	r0, sl
 8004f34:	f001 fd48 	bl	80069c8 <__ssprint_r>
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	f040 80bf 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004f3e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004f40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f42:	6023      	str	r3, [r4, #0]
 8004f44:	9b08      	ldr	r3, [sp, #32]
 8004f46:	6063      	str	r3, [r4, #4]
 8004f48:	9a08      	ldr	r2, [sp, #32]
 8004f4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f4c:	4413      	add	r3, r2
 8004f4e:	9321      	str	r3, [sp, #132]	; 0x84
 8004f50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f52:	3301      	adds	r3, #1
 8004f54:	2b07      	cmp	r3, #7
 8004f56:	9320      	str	r3, [sp, #128]	; 0x80
 8004f58:	dc01      	bgt.n	8004f5e <_svfprintf_r+0xba6>
 8004f5a:	3408      	adds	r4, #8
 8004f5c:	e008      	b.n	8004f70 <_svfprintf_r+0xbb8>
 8004f5e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004f60:	4659      	mov	r1, fp
 8004f62:	4650      	mov	r0, sl
 8004f64:	f001 fd30 	bl	80069c8 <__ssprint_r>
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	f040 80a7 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004f6e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004f70:	2300      	movs	r3, #0
 8004f72:	2200      	movs	r2, #0
 8004f74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f78:	f7fb fda2 	bl	8000ac0 <__aeabi_dcmpeq>
 8004f7c:	9b04      	ldr	r3, [sp, #16]
 8004f7e:	1e5e      	subs	r6, r3, #1
 8004f80:	b9b8      	cbnz	r0, 8004fb2 <_svfprintf_r+0xbfa>
 8004f82:	f108 0301 	add.w	r3, r8, #1
 8004f86:	e884 0048 	stmia.w	r4, {r3, r6}
 8004f8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f8c:	9a04      	ldr	r2, [sp, #16]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	4413      	add	r3, r2
 8004f92:	9321      	str	r3, [sp, #132]	; 0x84
 8004f94:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f96:	3301      	adds	r3, #1
 8004f98:	2b07      	cmp	r3, #7
 8004f9a:	9320      	str	r3, [sp, #128]	; 0x80
 8004f9c:	dd34      	ble.n	8005008 <_svfprintf_r+0xc50>
 8004f9e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004fa0:	4659      	mov	r1, fp
 8004fa2:	4650      	mov	r0, sl
 8004fa4:	f001 fd10 	bl	80069c8 <__ssprint_r>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	f040 8087 	bne.w	80050bc <_svfprintf_r+0xd04>
 8004fae:	ac2c      	add	r4, sp, #176	; 0xb0
 8004fb0:	e02b      	b.n	800500a <_svfprintf_r+0xc52>
 8004fb2:	2e00      	cmp	r6, #0
 8004fb4:	dd29      	ble.n	800500a <_svfprintf_r+0xc52>
 8004fb6:	4fa7      	ldr	r7, [pc, #668]	; (8005254 <_svfprintf_r+0xe9c>)
 8004fb8:	f04f 0810 	mov.w	r8, #16
 8004fbc:	2e10      	cmp	r6, #16
 8004fbe:	dd15      	ble.n	8004fec <_svfprintf_r+0xc34>
 8004fc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fc2:	3310      	adds	r3, #16
 8004fc4:	9321      	str	r3, [sp, #132]	; 0x84
 8004fc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004fc8:	3301      	adds	r3, #1
 8004fca:	2b07      	cmp	r3, #7
 8004fcc:	e884 0180 	stmia.w	r4, {r7, r8}
 8004fd0:	9320      	str	r3, [sp, #128]	; 0x80
 8004fd2:	dc01      	bgt.n	8004fd8 <_svfprintf_r+0xc20>
 8004fd4:	3408      	adds	r4, #8
 8004fd6:	e007      	b.n	8004fe8 <_svfprintf_r+0xc30>
 8004fd8:	aa1f      	add	r2, sp, #124	; 0x7c
 8004fda:	4659      	mov	r1, fp
 8004fdc:	4650      	mov	r0, sl
 8004fde:	f001 fcf3 	bl	80069c8 <__ssprint_r>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d16a      	bne.n	80050bc <_svfprintf_r+0xd04>
 8004fe6:	ac2c      	add	r4, sp, #176	; 0xb0
 8004fe8:	3e10      	subs	r6, #16
 8004fea:	e7e7      	b.n	8004fbc <_svfprintf_r+0xc04>
 8004fec:	4b99      	ldr	r3, [pc, #612]	; (8005254 <_svfprintf_r+0xe9c>)
 8004fee:	e884 0048 	stmia.w	r4, {r3, r6}
 8004ff2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ff4:	441e      	add	r6, r3
 8004ff6:	9621      	str	r6, [sp, #132]	; 0x84
 8004ff8:	e7cc      	b.n	8004f94 <_svfprintf_r+0xbdc>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	6063      	str	r3, [r4, #4]
 8004ffe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005000:	f8c4 8000 	str.w	r8, [r4]
 8005004:	3301      	adds	r3, #1
 8005006:	e7c4      	b.n	8004f92 <_svfprintf_r+0xbda>
 8005008:	3408      	adds	r4, #8
 800500a:	ab1b      	add	r3, sp, #108	; 0x6c
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005010:	6063      	str	r3, [r4, #4]
 8005012:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005014:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005016:	4413      	add	r3, r2
 8005018:	e5b4      	b.n	8004b84 <_svfprintf_r+0x7cc>
 800501a:	3408      	adds	r4, #8
 800501c:	076b      	lsls	r3, r5, #29
 800501e:	d40b      	bmi.n	8005038 <_svfprintf_r+0xc80>
 8005020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005024:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005026:	428a      	cmp	r2, r1
 8005028:	bfac      	ite	ge
 800502a:	189b      	addge	r3, r3, r2
 800502c:	185b      	addlt	r3, r3, r1
 800502e:	930a      	str	r3, [sp, #40]	; 0x28
 8005030:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005032:	2b00      	cmp	r3, #0
 8005034:	d035      	beq.n	80050a2 <_svfprintf_r+0xcea>
 8005036:	e02e      	b.n	8005096 <_svfprintf_r+0xcde>
 8005038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800503a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800503c:	1a9d      	subs	r5, r3, r2
 800503e:	2d00      	cmp	r5, #0
 8005040:	ddee      	ble.n	8005020 <_svfprintf_r+0xc68>
 8005042:	2610      	movs	r6, #16
 8005044:	4b84      	ldr	r3, [pc, #528]	; (8005258 <_svfprintf_r+0xea0>)
 8005046:	6023      	str	r3, [r4, #0]
 8005048:	2d10      	cmp	r5, #16
 800504a:	dd13      	ble.n	8005074 <_svfprintf_r+0xcbc>
 800504c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800504e:	6066      	str	r6, [r4, #4]
 8005050:	3310      	adds	r3, #16
 8005052:	9321      	str	r3, [sp, #132]	; 0x84
 8005054:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005056:	3301      	adds	r3, #1
 8005058:	2b07      	cmp	r3, #7
 800505a:	9320      	str	r3, [sp, #128]	; 0x80
 800505c:	dc01      	bgt.n	8005062 <_svfprintf_r+0xcaa>
 800505e:	3408      	adds	r4, #8
 8005060:	e006      	b.n	8005070 <_svfprintf_r+0xcb8>
 8005062:	aa1f      	add	r2, sp, #124	; 0x7c
 8005064:	4659      	mov	r1, fp
 8005066:	4650      	mov	r0, sl
 8005068:	f001 fcae 	bl	80069c8 <__ssprint_r>
 800506c:	bb30      	cbnz	r0, 80050bc <_svfprintf_r+0xd04>
 800506e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005070:	3d10      	subs	r5, #16
 8005072:	e7e7      	b.n	8005044 <_svfprintf_r+0xc8c>
 8005074:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005076:	6065      	str	r5, [r4, #4]
 8005078:	441d      	add	r5, r3
 800507a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800507c:	9521      	str	r5, [sp, #132]	; 0x84
 800507e:	3301      	adds	r3, #1
 8005080:	2b07      	cmp	r3, #7
 8005082:	9320      	str	r3, [sp, #128]	; 0x80
 8005084:	ddcc      	ble.n	8005020 <_svfprintf_r+0xc68>
 8005086:	aa1f      	add	r2, sp, #124	; 0x7c
 8005088:	4659      	mov	r1, fp
 800508a:	4650      	mov	r0, sl
 800508c:	f001 fc9c 	bl	80069c8 <__ssprint_r>
 8005090:	2800      	cmp	r0, #0
 8005092:	d0c5      	beq.n	8005020 <_svfprintf_r+0xc68>
 8005094:	e012      	b.n	80050bc <_svfprintf_r+0xd04>
 8005096:	aa1f      	add	r2, sp, #124	; 0x7c
 8005098:	4659      	mov	r1, fp
 800509a:	4650      	mov	r0, sl
 800509c:	f001 fc94 	bl	80069c8 <__ssprint_r>
 80050a0:	b960      	cbnz	r0, 80050bc <_svfprintf_r+0xd04>
 80050a2:	2300      	movs	r3, #0
 80050a4:	9320      	str	r3, [sp, #128]	; 0x80
 80050a6:	9f03      	ldr	r7, [sp, #12]
 80050a8:	ac2c      	add	r4, sp, #176	; 0xb0
 80050aa:	f7ff b9bb 	b.w	8004424 <_svfprintf_r+0x6c>
 80050ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050b0:	b123      	cbz	r3, 80050bc <_svfprintf_r+0xd04>
 80050b2:	aa1f      	add	r2, sp, #124	; 0x7c
 80050b4:	4659      	mov	r1, fp
 80050b6:	4650      	mov	r0, sl
 80050b8:	f001 fc86 	bl	80069c8 <__ssprint_r>
 80050bc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80050c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80050c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050c6:	bf18      	it	ne
 80050c8:	f04f 33ff 	movne.w	r3, #4294967295
 80050cc:	4618      	mov	r0, r3
 80050ce:	e12e      	b.n	800532e <_svfprintf_r+0xf76>
 80050d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050d4:	4610      	mov	r0, r2
 80050d6:	4619      	mov	r1, r3
 80050d8:	f7fb fd24 	bl	8000b24 <__aeabi_dcmpun>
 80050dc:	b160      	cbz	r0, 80050f8 <_svfprintf_r+0xd40>
 80050de:	4b5f      	ldr	r3, [pc, #380]	; (800525c <_svfprintf_r+0xea4>)
 80050e0:	4a5f      	ldr	r2, [pc, #380]	; (8005260 <_svfprintf_r+0xea8>)
 80050e2:	9902      	ldr	r1, [sp, #8]
 80050e4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80050e8:	2947      	cmp	r1, #71	; 0x47
 80050ea:	bfcc      	ite	gt
 80050ec:	4690      	movgt	r8, r2
 80050ee:	4698      	movle	r8, r3
 80050f0:	f04f 0903 	mov.w	r9, #3
 80050f4:	2600      	movs	r6, #0
 80050f6:	e44e      	b.n	8004996 <_svfprintf_r+0x5de>
 80050f8:	f1b9 3fff 	cmp.w	r9, #4294967295
 80050fc:	d00a      	beq.n	8005114 <_svfprintf_r+0xd5c>
 80050fe:	9b02      	ldr	r3, [sp, #8]
 8005100:	f023 0320 	bic.w	r3, r3, #32
 8005104:	2b47      	cmp	r3, #71	; 0x47
 8005106:	d107      	bne.n	8005118 <_svfprintf_r+0xd60>
 8005108:	f1b9 0f00 	cmp.w	r9, #0
 800510c:	bf08      	it	eq
 800510e:	f04f 0901 	moveq.w	r9, #1
 8005112:	e001      	b.n	8005118 <_svfprintf_r+0xd60>
 8005114:	f04f 0906 	mov.w	r9, #6
 8005118:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800511c:	930c      	str	r3, [sp, #48]	; 0x30
 800511e:	9b07      	ldr	r3, [sp, #28]
 8005120:	2b00      	cmp	r3, #0
 8005122:	da07      	bge.n	8005134 <_svfprintf_r+0xd7c>
 8005124:	9b06      	ldr	r3, [sp, #24]
 8005126:	930e      	str	r3, [sp, #56]	; 0x38
 8005128:	9b07      	ldr	r3, [sp, #28]
 800512a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800512e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005130:	232d      	movs	r3, #45	; 0x2d
 8005132:	e004      	b.n	800513e <_svfprintf_r+0xd86>
 8005134:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005138:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800513c:	2300      	movs	r3, #0
 800513e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005140:	9b02      	ldr	r3, [sp, #8]
 8005142:	f023 0720 	bic.w	r7, r3, #32
 8005146:	2f46      	cmp	r7, #70	; 0x46
 8005148:	d004      	beq.n	8005154 <_svfprintf_r+0xd9c>
 800514a:	2f45      	cmp	r7, #69	; 0x45
 800514c:	d105      	bne.n	800515a <_svfprintf_r+0xda2>
 800514e:	f109 0601 	add.w	r6, r9, #1
 8005152:	e003      	b.n	800515c <_svfprintf_r+0xda4>
 8005154:	464e      	mov	r6, r9
 8005156:	2103      	movs	r1, #3
 8005158:	e001      	b.n	800515e <_svfprintf_r+0xda6>
 800515a:	464e      	mov	r6, r9
 800515c:	2102      	movs	r1, #2
 800515e:	ab1d      	add	r3, sp, #116	; 0x74
 8005160:	9301      	str	r3, [sp, #4]
 8005162:	ab1a      	add	r3, sp, #104	; 0x68
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	4632      	mov	r2, r6
 8005168:	ab19      	add	r3, sp, #100	; 0x64
 800516a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800516e:	4650      	mov	r0, sl
 8005170:	f000 f976 	bl	8005460 <_dtoa_r>
 8005174:	2f47      	cmp	r7, #71	; 0x47
 8005176:	4680      	mov	r8, r0
 8005178:	d102      	bne.n	8005180 <_svfprintf_r+0xdc8>
 800517a:	07eb      	lsls	r3, r5, #31
 800517c:	f140 80cd 	bpl.w	800531a <_svfprintf_r+0xf62>
 8005180:	eb08 0306 	add.w	r3, r8, r6
 8005184:	2f46      	cmp	r7, #70	; 0x46
 8005186:	9304      	str	r3, [sp, #16]
 8005188:	d111      	bne.n	80051ae <_svfprintf_r+0xdf6>
 800518a:	f898 3000 	ldrb.w	r3, [r8]
 800518e:	2b30      	cmp	r3, #48	; 0x30
 8005190:	d109      	bne.n	80051a6 <_svfprintf_r+0xdee>
 8005192:	2200      	movs	r2, #0
 8005194:	2300      	movs	r3, #0
 8005196:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800519a:	f7fb fc91 	bl	8000ac0 <__aeabi_dcmpeq>
 800519e:	b910      	cbnz	r0, 80051a6 <_svfprintf_r+0xdee>
 80051a0:	f1c6 0601 	rsb	r6, r6, #1
 80051a4:	9619      	str	r6, [sp, #100]	; 0x64
 80051a6:	9a04      	ldr	r2, [sp, #16]
 80051a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051aa:	441a      	add	r2, r3
 80051ac:	9204      	str	r2, [sp, #16]
 80051ae:	2200      	movs	r2, #0
 80051b0:	2300      	movs	r3, #0
 80051b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80051b6:	f7fb fc83 	bl	8000ac0 <__aeabi_dcmpeq>
 80051ba:	b908      	cbnz	r0, 80051c0 <_svfprintf_r+0xe08>
 80051bc:	2230      	movs	r2, #48	; 0x30
 80051be:	e002      	b.n	80051c6 <_svfprintf_r+0xe0e>
 80051c0:	9b04      	ldr	r3, [sp, #16]
 80051c2:	931d      	str	r3, [sp, #116]	; 0x74
 80051c4:	e007      	b.n	80051d6 <_svfprintf_r+0xe1e>
 80051c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80051c8:	9904      	ldr	r1, [sp, #16]
 80051ca:	4299      	cmp	r1, r3
 80051cc:	d903      	bls.n	80051d6 <_svfprintf_r+0xe1e>
 80051ce:	1c59      	adds	r1, r3, #1
 80051d0:	911d      	str	r1, [sp, #116]	; 0x74
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	e7f7      	b.n	80051c6 <_svfprintf_r+0xe0e>
 80051d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80051d8:	2f47      	cmp	r7, #71	; 0x47
 80051da:	ebc8 0303 	rsb	r3, r8, r3
 80051de:	9304      	str	r3, [sp, #16]
 80051e0:	d108      	bne.n	80051f4 <_svfprintf_r+0xe3c>
 80051e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051e4:	1cdf      	adds	r7, r3, #3
 80051e6:	db01      	blt.n	80051ec <_svfprintf_r+0xe34>
 80051e8:	4599      	cmp	r9, r3
 80051ea:	da68      	bge.n	80052be <_svfprintf_r+0xf06>
 80051ec:	9b02      	ldr	r3, [sp, #8]
 80051ee:	3b02      	subs	r3, #2
 80051f0:	9302      	str	r3, [sp, #8]
 80051f2:	e002      	b.n	80051fa <_svfprintf_r+0xe42>
 80051f4:	9b02      	ldr	r3, [sp, #8]
 80051f6:	2b65      	cmp	r3, #101	; 0x65
 80051f8:	dc4a      	bgt.n	8005290 <_svfprintf_r+0xed8>
 80051fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051fc:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8005200:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8005204:	3b01      	subs	r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	9319      	str	r3, [sp, #100]	; 0x64
 800520a:	bfba      	itte	lt
 800520c:	425b      	neglt	r3, r3
 800520e:	222d      	movlt	r2, #45	; 0x2d
 8005210:	222b      	movge	r2, #43	; 0x2b
 8005212:	2b09      	cmp	r3, #9
 8005214:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8005218:	dd24      	ble.n	8005264 <_svfprintf_r+0xeac>
 800521a:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800521e:	200a      	movs	r0, #10
 8005220:	fb93 f1f0 	sdiv	r1, r3, r0
 8005224:	fb00 3311 	mls	r3, r0, r1, r3
 8005228:	3330      	adds	r3, #48	; 0x30
 800522a:	2909      	cmp	r1, #9
 800522c:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8005230:	460b      	mov	r3, r1
 8005232:	dcf5      	bgt.n	8005220 <_svfprintf_r+0xe68>
 8005234:	3330      	adds	r3, #48	; 0x30
 8005236:	f802 3c01 	strb.w	r3, [r2, #-1]
 800523a:	1e51      	subs	r1, r2, #1
 800523c:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8005240:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8005244:	4281      	cmp	r1, r0
 8005246:	461a      	mov	r2, r3
 8005248:	d213      	bcs.n	8005272 <_svfprintf_r+0xeba>
 800524a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800524e:	f803 2b01 	strb.w	r2, [r3], #1
 8005252:	e7f7      	b.n	8005244 <_svfprintf_r+0xe8c>
 8005254:	08007277 	.word	0x08007277
 8005258:	080072bb 	.word	0x080072bb
 800525c:	0800728f 	.word	0x0800728f
 8005260:	08007293 	.word	0x08007293
 8005264:	2230      	movs	r2, #48	; 0x30
 8005266:	4413      	add	r3, r2
 8005268:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800526c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8005270:	aa1c      	add	r2, sp, #112	; 0x70
 8005272:	ab1b      	add	r3, sp, #108	; 0x6c
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	9a04      	ldr	r2, [sp, #16]
 8005278:	9310      	str	r3, [sp, #64]	; 0x40
 800527a:	2a01      	cmp	r2, #1
 800527c:	eb03 0902 	add.w	r9, r3, r2
 8005280:	dc02      	bgt.n	8005288 <_svfprintf_r+0xed0>
 8005282:	f015 0701 	ands.w	r7, r5, #1
 8005286:	d032      	beq.n	80052ee <_svfprintf_r+0xf36>
 8005288:	9b08      	ldr	r3, [sp, #32]
 800528a:	2700      	movs	r7, #0
 800528c:	4499      	add	r9, r3
 800528e:	e02e      	b.n	80052ee <_svfprintf_r+0xf36>
 8005290:	9b02      	ldr	r3, [sp, #8]
 8005292:	2b66      	cmp	r3, #102	; 0x66
 8005294:	d113      	bne.n	80052be <_svfprintf_r+0xf06>
 8005296:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005298:	2b00      	cmp	r3, #0
 800529a:	dd07      	ble.n	80052ac <_svfprintf_r+0xef4>
 800529c:	f1b9 0f00 	cmp.w	r9, #0
 80052a0:	d101      	bne.n	80052a6 <_svfprintf_r+0xeee>
 80052a2:	07ee      	lsls	r6, r5, #31
 80052a4:	d521      	bpl.n	80052ea <_svfprintf_r+0xf32>
 80052a6:	9a08      	ldr	r2, [sp, #32]
 80052a8:	4413      	add	r3, r2
 80052aa:	e006      	b.n	80052ba <_svfprintf_r+0xf02>
 80052ac:	f1b9 0f00 	cmp.w	r9, #0
 80052b0:	d101      	bne.n	80052b6 <_svfprintf_r+0xefe>
 80052b2:	07ed      	lsls	r5, r5, #31
 80052b4:	d514      	bpl.n	80052e0 <_svfprintf_r+0xf28>
 80052b6:	9b08      	ldr	r3, [sp, #32]
 80052b8:	3301      	adds	r3, #1
 80052ba:	444b      	add	r3, r9
 80052bc:	e015      	b.n	80052ea <_svfprintf_r+0xf32>
 80052be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052c0:	9a04      	ldr	r2, [sp, #16]
 80052c2:	4293      	cmp	r3, r2
 80052c4:	db03      	blt.n	80052ce <_svfprintf_r+0xf16>
 80052c6:	07e8      	lsls	r0, r5, #31
 80052c8:	d50d      	bpl.n	80052e6 <_svfprintf_r+0xf2e>
 80052ca:	9a08      	ldr	r2, [sp, #32]
 80052cc:	e006      	b.n	80052dc <_svfprintf_r+0xf24>
 80052ce:	9a04      	ldr	r2, [sp, #16]
 80052d0:	9908      	ldr	r1, [sp, #32]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	440a      	add	r2, r1
 80052d6:	dc05      	bgt.n	80052e4 <_svfprintf_r+0xf2c>
 80052d8:	f1c3 0301 	rsb	r3, r3, #1
 80052dc:	4413      	add	r3, r2
 80052de:	e002      	b.n	80052e6 <_svfprintf_r+0xf2e>
 80052e0:	2301      	movs	r3, #1
 80052e2:	e002      	b.n	80052ea <_svfprintf_r+0xf32>
 80052e4:	4613      	mov	r3, r2
 80052e6:	2267      	movs	r2, #103	; 0x67
 80052e8:	9202      	str	r2, [sp, #8]
 80052ea:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80052ec:	4699      	mov	r9, r3
 80052ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052f0:	b113      	cbz	r3, 80052f8 <_svfprintf_r+0xf40>
 80052f2:	232d      	movs	r3, #45	; 0x2d
 80052f4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80052f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052fa:	2600      	movs	r6, #0
 80052fc:	f7ff bb4c 	b.w	8004998 <_svfprintf_r+0x5e0>
 8005300:	2200      	movs	r2, #0
 8005302:	2300      	movs	r3, #0
 8005304:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005308:	f7fb fbe4 	bl	8000ad4 <__aeabi_dcmplt>
 800530c:	b110      	cbz	r0, 8005314 <_svfprintf_r+0xf5c>
 800530e:	232d      	movs	r3, #45	; 0x2d
 8005310:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005314:	4b07      	ldr	r3, [pc, #28]	; (8005334 <_svfprintf_r+0xf7c>)
 8005316:	4a08      	ldr	r2, [pc, #32]	; (8005338 <_svfprintf_r+0xf80>)
 8005318:	e6e3      	b.n	80050e2 <_svfprintf_r+0xd2a>
 800531a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800531c:	1a1b      	subs	r3, r3, r0
 800531e:	9304      	str	r3, [sp, #16]
 8005320:	e75f      	b.n	80051e2 <_svfprintf_r+0xe2a>
 8005322:	ea56 0207 	orrs.w	r2, r6, r7
 8005326:	f47f aaaa 	bne.w	800487e <_svfprintf_r+0x4c6>
 800532a:	f7ff baaf 	b.w	800488c <_svfprintf_r+0x4d4>
 800532e:	b03d      	add	sp, #244	; 0xf4
 8005330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005334:	08007287 	.word	0x08007287
 8005338:	0800728b 	.word	0x0800728b

0800533c <quorem>:
 800533c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005340:	6903      	ldr	r3, [r0, #16]
 8005342:	690c      	ldr	r4, [r1, #16]
 8005344:	429c      	cmp	r4, r3
 8005346:	4680      	mov	r8, r0
 8005348:	f300 8083 	bgt.w	8005452 <quorem+0x116>
 800534c:	3c01      	subs	r4, #1
 800534e:	f101 0714 	add.w	r7, r1, #20
 8005352:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005356:	f100 0614 	add.w	r6, r0, #20
 800535a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800535e:	eb06 030e 	add.w	r3, r6, lr
 8005362:	9301      	str	r3, [sp, #4]
 8005364:	3501      	adds	r5, #1
 8005366:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800536a:	fbb3 f5f5 	udiv	r5, r3, r5
 800536e:	eb07 090e 	add.w	r9, r7, lr
 8005372:	2d00      	cmp	r5, #0
 8005374:	d039      	beq.n	80053ea <quorem+0xae>
 8005376:	f04f 0a00 	mov.w	sl, #0
 800537a:	4638      	mov	r0, r7
 800537c:	46b4      	mov	ip, r6
 800537e:	46d3      	mov	fp, sl
 8005380:	f850 2b04 	ldr.w	r2, [r0], #4
 8005384:	b293      	uxth	r3, r2
 8005386:	fb05 a303 	mla	r3, r5, r3, sl
 800538a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800538e:	b29b      	uxth	r3, r3
 8005390:	ebc3 030b 	rsb	r3, r3, fp
 8005394:	0c12      	lsrs	r2, r2, #16
 8005396:	f8bc b000 	ldrh.w	fp, [ip]
 800539a:	fb05 a202 	mla	r2, r5, r2, sl
 800539e:	fa13 f38b 	uxtah	r3, r3, fp
 80053a2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80053a6:	fa1f fb82 	uxth.w	fp, r2
 80053aa:	f8dc 2000 	ldr.w	r2, [ip]
 80053ae:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80053b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053bc:	4581      	cmp	r9, r0
 80053be:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80053c2:	f84c 3b04 	str.w	r3, [ip], #4
 80053c6:	d2db      	bcs.n	8005380 <quorem+0x44>
 80053c8:	f856 300e 	ldr.w	r3, [r6, lr]
 80053cc:	b96b      	cbnz	r3, 80053ea <quorem+0xae>
 80053ce:	9b01      	ldr	r3, [sp, #4]
 80053d0:	3b04      	subs	r3, #4
 80053d2:	429e      	cmp	r6, r3
 80053d4:	461a      	mov	r2, r3
 80053d6:	d302      	bcc.n	80053de <quorem+0xa2>
 80053d8:	f8c8 4010 	str.w	r4, [r8, #16]
 80053dc:	e005      	b.n	80053ea <quorem+0xae>
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	3b04      	subs	r3, #4
 80053e2:	2a00      	cmp	r2, #0
 80053e4:	d1f8      	bne.n	80053d8 <quorem+0x9c>
 80053e6:	3c01      	subs	r4, #1
 80053e8:	e7f3      	b.n	80053d2 <quorem+0x96>
 80053ea:	4640      	mov	r0, r8
 80053ec:	f001 fa13 	bl	8006816 <__mcmp>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	db2c      	blt.n	800544e <quorem+0x112>
 80053f4:	3501      	adds	r5, #1
 80053f6:	4630      	mov	r0, r6
 80053f8:	f04f 0e00 	mov.w	lr, #0
 80053fc:	f857 1b04 	ldr.w	r1, [r7], #4
 8005400:	f8d0 c000 	ldr.w	ip, [r0]
 8005404:	b28a      	uxth	r2, r1
 8005406:	ebc2 030e 	rsb	r3, r2, lr
 800540a:	0c09      	lsrs	r1, r1, #16
 800540c:	fa13 f38c 	uxtah	r3, r3, ip
 8005410:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 8005414:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005418:	b29b      	uxth	r3, r3
 800541a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800541e:	45b9      	cmp	r9, r7
 8005420:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005424:	f840 3b04 	str.w	r3, [r0], #4
 8005428:	d2e8      	bcs.n	80053fc <quorem+0xc0>
 800542a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800542e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005432:	b962      	cbnz	r2, 800544e <quorem+0x112>
 8005434:	3b04      	subs	r3, #4
 8005436:	429e      	cmp	r6, r3
 8005438:	461a      	mov	r2, r3
 800543a:	d302      	bcc.n	8005442 <quorem+0x106>
 800543c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005440:	e005      	b.n	800544e <quorem+0x112>
 8005442:	6812      	ldr	r2, [r2, #0]
 8005444:	3b04      	subs	r3, #4
 8005446:	2a00      	cmp	r2, #0
 8005448:	d1f8      	bne.n	800543c <quorem+0x100>
 800544a:	3c01      	subs	r4, #1
 800544c:	e7f3      	b.n	8005436 <quorem+0xfa>
 800544e:	4628      	mov	r0, r5
 8005450:	e000      	b.n	8005454 <quorem+0x118>
 8005452:	2000      	movs	r0, #0
 8005454:	b003      	add	sp, #12
 8005456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800545a:	0000      	movs	r0, r0
 800545c:	0000      	movs	r0, r0
	...

08005460 <_dtoa_r>:
 8005460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005464:	ec59 8b10 	vmov	r8, r9, d0
 8005468:	b097      	sub	sp, #92	; 0x5c
 800546a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800546c:	9106      	str	r1, [sp, #24]
 800546e:	4682      	mov	sl, r0
 8005470:	9209      	str	r2, [sp, #36]	; 0x24
 8005472:	9310      	str	r3, [sp, #64]	; 0x40
 8005474:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8005476:	e9cd 8900 	strd	r8, r9, [sp]
 800547a:	b945      	cbnz	r5, 800548e <_dtoa_r+0x2e>
 800547c:	2010      	movs	r0, #16
 800547e:	f000 fd93 	bl	8005fa8 <malloc>
 8005482:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8005486:	6045      	str	r5, [r0, #4]
 8005488:	6085      	str	r5, [r0, #8]
 800548a:	6005      	str	r5, [r0, #0]
 800548c:	60c5      	str	r5, [r0, #12]
 800548e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8005492:	6819      	ldr	r1, [r3, #0]
 8005494:	b159      	cbz	r1, 80054ae <_dtoa_r+0x4e>
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	604a      	str	r2, [r1, #4]
 800549a:	2301      	movs	r3, #1
 800549c:	4093      	lsls	r3, r2
 800549e:	608b      	str	r3, [r1, #8]
 80054a0:	4650      	mov	r0, sl
 80054a2:	f000 ffe0 	bl	8006466 <_Bfree>
 80054a6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80054aa:	2200      	movs	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	9b01      	ldr	r3, [sp, #4]
 80054b0:	4a9f      	ldr	r2, [pc, #636]	; (8005730 <_dtoa_r+0x2d0>)
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	bfbf      	itttt	lt
 80054b6:	2301      	movlt	r3, #1
 80054b8:	6023      	strlt	r3, [r4, #0]
 80054ba:	9b01      	ldrlt	r3, [sp, #4]
 80054bc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80054c0:	bfb8      	it	lt
 80054c2:	9301      	strlt	r3, [sp, #4]
 80054c4:	9f01      	ldr	r7, [sp, #4]
 80054c6:	bfa4      	itt	ge
 80054c8:	2300      	movge	r3, #0
 80054ca:	6023      	strge	r3, [r4, #0]
 80054cc:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 80054d0:	0d1b      	lsrs	r3, r3, #20
 80054d2:	051b      	lsls	r3, r3, #20
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d11d      	bne.n	8005514 <_dtoa_r+0xb4>
 80054d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80054da:	f242 730f 	movw	r3, #9999	; 0x270f
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	9b00      	ldr	r3, [sp, #0]
 80054e2:	b943      	cbnz	r3, 80054f6 <_dtoa_r+0x96>
 80054e4:	4a93      	ldr	r2, [pc, #588]	; (8005734 <_dtoa_r+0x2d4>)
 80054e6:	4b94      	ldr	r3, [pc, #592]	; (8005738 <_dtoa_r+0x2d8>)
 80054e8:	f3c7 0013 	ubfx	r0, r7, #0, #20
 80054ec:	2800      	cmp	r0, #0
 80054ee:	bf14      	ite	ne
 80054f0:	4618      	movne	r0, r3
 80054f2:	4610      	moveq	r0, r2
 80054f4:	e000      	b.n	80054f8 <_dtoa_r+0x98>
 80054f6:	4890      	ldr	r0, [pc, #576]	; (8005738 <_dtoa_r+0x2d8>)
 80054f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 854a 	beq.w	8005f94 <_dtoa_r+0xb34>
 8005500:	78c3      	ldrb	r3, [r0, #3]
 8005502:	b113      	cbz	r3, 800550a <_dtoa_r+0xaa>
 8005504:	f100 0308 	add.w	r3, r0, #8
 8005508:	e000      	b.n	800550c <_dtoa_r+0xac>
 800550a:	1cc3      	adds	r3, r0, #3
 800550c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	f000 bd40 	b.w	8005f94 <_dtoa_r+0xb34>
 8005514:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005518:	2200      	movs	r2, #0
 800551a:	2300      	movs	r3, #0
 800551c:	4620      	mov	r0, r4
 800551e:	4629      	mov	r1, r5
 8005520:	f7fb face 	bl	8000ac0 <__aeabi_dcmpeq>
 8005524:	4680      	mov	r8, r0
 8005526:	b158      	cbz	r0, 8005540 <_dtoa_r+0xe0>
 8005528:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800552a:	2301      	movs	r3, #1
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 8522 	beq.w	8005f7a <_dtoa_r+0xb1a>
 8005536:	4881      	ldr	r0, [pc, #516]	; (800573c <_dtoa_r+0x2dc>)
 8005538:	6018      	str	r0, [r3, #0]
 800553a:	3801      	subs	r0, #1
 800553c:	f000 bd2a 	b.w	8005f94 <_dtoa_r+0xb34>
 8005540:	aa14      	add	r2, sp, #80	; 0x50
 8005542:	a915      	add	r1, sp, #84	; 0x54
 8005544:	ec45 4b10 	vmov	d0, r4, r5
 8005548:	4650      	mov	r0, sl
 800554a:	f001 f9df 	bl	800690c <__d2b>
 800554e:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005552:	9002      	str	r0, [sp, #8]
 8005554:	b15e      	cbz	r6, 800556e <_dtoa_r+0x10e>
 8005556:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800555a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800555e:	4620      	mov	r0, r4
 8005560:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005564:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8005568:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 800556c:	e01d      	b.n	80055aa <_dtoa_r+0x14a>
 800556e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005570:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8005572:	441e      	add	r6, r3
 8005574:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8005578:	2b20      	cmp	r3, #32
 800557a:	dd0a      	ble.n	8005592 <_dtoa_r+0x132>
 800557c:	9a00      	ldr	r2, [sp, #0]
 800557e:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8005582:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005586:	fa22 f000 	lsr.w	r0, r2, r0
 800558a:	fa07 f303 	lsl.w	r3, r7, r3
 800558e:	4318      	orrs	r0, r3
 8005590:	e004      	b.n	800559c <_dtoa_r+0x13c>
 8005592:	f1c3 0020 	rsb	r0, r3, #32
 8005596:	9b00      	ldr	r3, [sp, #0]
 8005598:	fa03 f000 	lsl.w	r0, r3, r0
 800559c:	f7fa ffb2 	bl	8000504 <__aeabi_ui2d>
 80055a0:	2301      	movs	r3, #1
 80055a2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80055a6:	3e01      	subs	r6, #1
 80055a8:	9311      	str	r3, [sp, #68]	; 0x44
 80055aa:	2200      	movs	r2, #0
 80055ac:	4b64      	ldr	r3, [pc, #400]	; (8005740 <_dtoa_r+0x2e0>)
 80055ae:	f7fa fe6b 	bl	8000288 <__aeabi_dsub>
 80055b2:	a359      	add	r3, pc, #356	; (adr r3, 8005718 <_dtoa_r+0x2b8>)
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	f7fb f81a 	bl	80005f0 <__aeabi_dmul>
 80055bc:	a358      	add	r3, pc, #352	; (adr r3, 8005720 <_dtoa_r+0x2c0>)
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	f7fa fe63 	bl	800028c <__adddf3>
 80055c6:	4604      	mov	r4, r0
 80055c8:	4630      	mov	r0, r6
 80055ca:	460d      	mov	r5, r1
 80055cc:	f7fa ffaa 	bl	8000524 <__aeabi_i2d>
 80055d0:	a355      	add	r3, pc, #340	; (adr r3, 8005728 <_dtoa_r+0x2c8>)
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f7fb f80b 	bl	80005f0 <__aeabi_dmul>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4620      	mov	r0, r4
 80055e0:	4629      	mov	r1, r5
 80055e2:	f7fa fe53 	bl	800028c <__adddf3>
 80055e6:	4604      	mov	r4, r0
 80055e8:	460d      	mov	r5, r1
 80055ea:	f7fb fab1 	bl	8000b50 <__aeabi_d2iz>
 80055ee:	2200      	movs	r2, #0
 80055f0:	4683      	mov	fp, r0
 80055f2:	2300      	movs	r3, #0
 80055f4:	4620      	mov	r0, r4
 80055f6:	4629      	mov	r1, r5
 80055f8:	f7fb fa6c 	bl	8000ad4 <__aeabi_dcmplt>
 80055fc:	b158      	cbz	r0, 8005616 <_dtoa_r+0x1b6>
 80055fe:	4658      	mov	r0, fp
 8005600:	f7fa ff90 	bl	8000524 <__aeabi_i2d>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4620      	mov	r0, r4
 800560a:	4629      	mov	r1, r5
 800560c:	f7fb fa58 	bl	8000ac0 <__aeabi_dcmpeq>
 8005610:	b908      	cbnz	r0, 8005616 <_dtoa_r+0x1b6>
 8005612:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005616:	f1bb 0f16 	cmp.w	fp, #22
 800561a:	d80d      	bhi.n	8005638 <_dtoa_r+0x1d8>
 800561c:	4949      	ldr	r1, [pc, #292]	; (8005744 <_dtoa_r+0x2e4>)
 800561e:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005622:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800562a:	f7fb fa71 	bl	8000b10 <__aeabi_dcmpgt>
 800562e:	b130      	cbz	r0, 800563e <_dtoa_r+0x1de>
 8005630:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005634:	2300      	movs	r3, #0
 8005636:	e000      	b.n	800563a <_dtoa_r+0x1da>
 8005638:	2301      	movs	r3, #1
 800563a:	930d      	str	r3, [sp, #52]	; 0x34
 800563c:	e000      	b.n	8005640 <_dtoa_r+0x1e0>
 800563e:	900d      	str	r0, [sp, #52]	; 0x34
 8005640:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005642:	1b9e      	subs	r6, r3, r6
 8005644:	1e73      	subs	r3, r6, #1
 8005646:	9305      	str	r3, [sp, #20]
 8005648:	bf43      	ittte	mi
 800564a:	f1c3 0900 	rsbmi	r9, r3, #0
 800564e:	2300      	movmi	r3, #0
 8005650:	9305      	strmi	r3, [sp, #20]
 8005652:	f04f 0900 	movpl.w	r9, #0
 8005656:	f1bb 0f00 	cmp.w	fp, #0
 800565a:	db07      	blt.n	800566c <_dtoa_r+0x20c>
 800565c:	9b05      	ldr	r3, [sp, #20]
 800565e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8005662:	445b      	add	r3, fp
 8005664:	9305      	str	r3, [sp, #20]
 8005666:	2300      	movs	r3, #0
 8005668:	9307      	str	r3, [sp, #28]
 800566a:	e006      	b.n	800567a <_dtoa_r+0x21a>
 800566c:	f1cb 0300 	rsb	r3, fp, #0
 8005670:	9307      	str	r3, [sp, #28]
 8005672:	2300      	movs	r3, #0
 8005674:	ebcb 0909 	rsb	r9, fp, r9
 8005678:	930c      	str	r3, [sp, #48]	; 0x30
 800567a:	9b06      	ldr	r3, [sp, #24]
 800567c:	2b09      	cmp	r3, #9
 800567e:	d827      	bhi.n	80056d0 <_dtoa_r+0x270>
 8005680:	2b05      	cmp	r3, #5
 8005682:	bfc4      	itt	gt
 8005684:	3b04      	subgt	r3, #4
 8005686:	9306      	strgt	r3, [sp, #24]
 8005688:	9b06      	ldr	r3, [sp, #24]
 800568a:	f1a3 0302 	sub.w	r3, r3, #2
 800568e:	bfcc      	ite	gt
 8005690:	2500      	movgt	r5, #0
 8005692:	2501      	movle	r5, #1
 8005694:	2b03      	cmp	r3, #3
 8005696:	d820      	bhi.n	80056da <_dtoa_r+0x27a>
 8005698:	e8df f003 	tbb	[pc, r3]
 800569c:	04020e06 	.word	0x04020e06
 80056a0:	2301      	movs	r3, #1
 80056a2:	e002      	b.n	80056aa <_dtoa_r+0x24a>
 80056a4:	2301      	movs	r3, #1
 80056a6:	e008      	b.n	80056ba <_dtoa_r+0x25a>
 80056a8:	2300      	movs	r3, #0
 80056aa:	9308      	str	r3, [sp, #32]
 80056ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	dd1c      	ble.n	80056ec <_dtoa_r+0x28c>
 80056b2:	9303      	str	r3, [sp, #12]
 80056b4:	4698      	mov	r8, r3
 80056b6:	e01e      	b.n	80056f6 <_dtoa_r+0x296>
 80056b8:	2300      	movs	r3, #0
 80056ba:	9308      	str	r3, [sp, #32]
 80056bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056be:	445b      	add	r3, fp
 80056c0:	f103 0801 	add.w	r8, r3, #1
 80056c4:	9303      	str	r3, [sp, #12]
 80056c6:	4643      	mov	r3, r8
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	bfb8      	it	lt
 80056cc:	2301      	movlt	r3, #1
 80056ce:	e012      	b.n	80056f6 <_dtoa_r+0x296>
 80056d0:	2501      	movs	r5, #1
 80056d2:	2300      	movs	r3, #0
 80056d4:	9306      	str	r3, [sp, #24]
 80056d6:	9508      	str	r5, [sp, #32]
 80056d8:	e001      	b.n	80056de <_dtoa_r+0x27e>
 80056da:	2301      	movs	r3, #1
 80056dc:	9308      	str	r3, [sp, #32]
 80056de:	f04f 33ff 	mov.w	r3, #4294967295
 80056e2:	9303      	str	r3, [sp, #12]
 80056e4:	4698      	mov	r8, r3
 80056e6:	2200      	movs	r2, #0
 80056e8:	2312      	movs	r3, #18
 80056ea:	e003      	b.n	80056f4 <_dtoa_r+0x294>
 80056ec:	2301      	movs	r3, #1
 80056ee:	9303      	str	r3, [sp, #12]
 80056f0:	4698      	mov	r8, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	9209      	str	r2, [sp, #36]	; 0x24
 80056f6:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 80056fa:	2200      	movs	r2, #0
 80056fc:	6062      	str	r2, [r4, #4]
 80056fe:	2104      	movs	r1, #4
 8005700:	f101 0214 	add.w	r2, r1, #20
 8005704:	429a      	cmp	r2, r3
 8005706:	d81f      	bhi.n	8005748 <_dtoa_r+0x2e8>
 8005708:	6862      	ldr	r2, [r4, #4]
 800570a:	3201      	adds	r2, #1
 800570c:	6062      	str	r2, [r4, #4]
 800570e:	0049      	lsls	r1, r1, #1
 8005710:	e7f6      	b.n	8005700 <_dtoa_r+0x2a0>
 8005712:	bf00      	nop
 8005714:	f3af 8000 	nop.w
 8005718:	636f4361 	.word	0x636f4361
 800571c:	3fd287a7 	.word	0x3fd287a7
 8005720:	8b60c8b3 	.word	0x8b60c8b3
 8005724:	3fc68a28 	.word	0x3fc68a28
 8005728:	509f79fb 	.word	0x509f79fb
 800572c:	3fd34413 	.word	0x3fd34413
 8005730:	7ff00000 	.word	0x7ff00000
 8005734:	080072cb 	.word	0x080072cb
 8005738:	080072d4 	.word	0x080072d4
 800573c:	080072ba 	.word	0x080072ba
 8005740:	3ff80000 	.word	0x3ff80000
 8005744:	080072e0 	.word	0x080072e0
 8005748:	6861      	ldr	r1, [r4, #4]
 800574a:	4650      	mov	r0, sl
 800574c:	f000 fe56 	bl	80063fc <_Balloc>
 8005750:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8005754:	6020      	str	r0, [r4, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	9304      	str	r3, [sp, #16]
 800575a:	f1b8 0f0e 	cmp.w	r8, #14
 800575e:	f200 815d 	bhi.w	8005a1c <_dtoa_r+0x5bc>
 8005762:	2d00      	cmp	r5, #0
 8005764:	f000 815a 	beq.w	8005a1c <_dtoa_r+0x5bc>
 8005768:	ed9d 7b00 	vldr	d7, [sp]
 800576c:	f1bb 0f00 	cmp.w	fp, #0
 8005770:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005774:	dd31      	ble.n	80057da <_dtoa_r+0x37a>
 8005776:	4aa0      	ldr	r2, [pc, #640]	; (80059f8 <_dtoa_r+0x598>)
 8005778:	f00b 030f 	and.w	r3, fp, #15
 800577c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005780:	ed93 7b00 	vldr	d7, [r3]
 8005784:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005788:	06e2      	lsls	r2, r4, #27
 800578a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800578e:	d50c      	bpl.n	80057aa <_dtoa_r+0x34a>
 8005790:	4b9a      	ldr	r3, [pc, #616]	; (80059fc <_dtoa_r+0x59c>)
 8005792:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005796:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800579a:	f7fb f853 	bl	8000844 <__aeabi_ddiv>
 800579e:	f004 040f 	and.w	r4, r4, #15
 80057a2:	e9cd 0100 	strd	r0, r1, [sp]
 80057a6:	2603      	movs	r6, #3
 80057a8:	e000      	b.n	80057ac <_dtoa_r+0x34c>
 80057aa:	2602      	movs	r6, #2
 80057ac:	4d93      	ldr	r5, [pc, #588]	; (80059fc <_dtoa_r+0x59c>)
 80057ae:	b16c      	cbz	r4, 80057cc <_dtoa_r+0x36c>
 80057b0:	07e3      	lsls	r3, r4, #31
 80057b2:	d508      	bpl.n	80057c6 <_dtoa_r+0x366>
 80057b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80057bc:	f7fa ff18 	bl	80005f0 <__aeabi_dmul>
 80057c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80057c4:	3601      	adds	r6, #1
 80057c6:	1064      	asrs	r4, r4, #1
 80057c8:	3508      	adds	r5, #8
 80057ca:	e7f0      	b.n	80057ae <_dtoa_r+0x34e>
 80057cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057d4:	f7fb f836 	bl	8000844 <__aeabi_ddiv>
 80057d8:	e020      	b.n	800581c <_dtoa_r+0x3bc>
 80057da:	f1cb 0400 	rsb	r4, fp, #0
 80057de:	b304      	cbz	r4, 8005822 <_dtoa_r+0x3c2>
 80057e0:	4b85      	ldr	r3, [pc, #532]	; (80059f8 <_dtoa_r+0x598>)
 80057e2:	4d86      	ldr	r5, [pc, #536]	; (80059fc <_dtoa_r+0x59c>)
 80057e4:	f004 020f 	and.w	r2, r4, #15
 80057e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80057f4:	f7fa fefc 	bl	80005f0 <__aeabi_dmul>
 80057f8:	e9cd 0100 	strd	r0, r1, [sp]
 80057fc:	1124      	asrs	r4, r4, #4
 80057fe:	2300      	movs	r3, #0
 8005800:	2602      	movs	r6, #2
 8005802:	b154      	cbz	r4, 800581a <_dtoa_r+0x3ba>
 8005804:	07e7      	lsls	r7, r4, #31
 8005806:	d505      	bpl.n	8005814 <_dtoa_r+0x3b4>
 8005808:	e9d5 2300 	ldrd	r2, r3, [r5]
 800580c:	f7fa fef0 	bl	80005f0 <__aeabi_dmul>
 8005810:	3601      	adds	r6, #1
 8005812:	2301      	movs	r3, #1
 8005814:	1064      	asrs	r4, r4, #1
 8005816:	3508      	adds	r5, #8
 8005818:	e7f3      	b.n	8005802 <_dtoa_r+0x3a2>
 800581a:	b11b      	cbz	r3, 8005824 <_dtoa_r+0x3c4>
 800581c:	e9cd 0100 	strd	r0, r1, [sp]
 8005820:	e000      	b.n	8005824 <_dtoa_r+0x3c4>
 8005822:	2602      	movs	r6, #2
 8005824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005826:	b1eb      	cbz	r3, 8005864 <_dtoa_r+0x404>
 8005828:	e9dd 4500 	ldrd	r4, r5, [sp]
 800582c:	2200      	movs	r2, #0
 800582e:	4b74      	ldr	r3, [pc, #464]	; (8005a00 <_dtoa_r+0x5a0>)
 8005830:	4620      	mov	r0, r4
 8005832:	4629      	mov	r1, r5
 8005834:	f7fb f94e 	bl	8000ad4 <__aeabi_dcmplt>
 8005838:	b1a0      	cbz	r0, 8005864 <_dtoa_r+0x404>
 800583a:	f1b8 0f00 	cmp.w	r8, #0
 800583e:	d011      	beq.n	8005864 <_dtoa_r+0x404>
 8005840:	9b03      	ldr	r3, [sp, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	f340 80e6 	ble.w	8005a14 <_dtoa_r+0x5b4>
 8005848:	f10b 33ff 	add.w	r3, fp, #4294967295
 800584c:	930a      	str	r3, [sp, #40]	; 0x28
 800584e:	2200      	movs	r2, #0
 8005850:	4b6c      	ldr	r3, [pc, #432]	; (8005a04 <_dtoa_r+0x5a4>)
 8005852:	4620      	mov	r0, r4
 8005854:	4629      	mov	r1, r5
 8005856:	f7fa fecb 	bl	80005f0 <__aeabi_dmul>
 800585a:	3601      	adds	r6, #1
 800585c:	e9cd 0100 	strd	r0, r1, [sp]
 8005860:	9f03      	ldr	r7, [sp, #12]
 8005862:	e002      	b.n	800586a <_dtoa_r+0x40a>
 8005864:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005868:	4647      	mov	r7, r8
 800586a:	4630      	mov	r0, r6
 800586c:	f7fa fe5a 	bl	8000524 <__aeabi_i2d>
 8005870:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005874:	f7fa febc 	bl	80005f0 <__aeabi_dmul>
 8005878:	2200      	movs	r2, #0
 800587a:	4b63      	ldr	r3, [pc, #396]	; (8005a08 <_dtoa_r+0x5a8>)
 800587c:	f7fa fd06 	bl	800028c <__adddf3>
 8005880:	4604      	mov	r4, r0
 8005882:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005886:	b9cf      	cbnz	r7, 80058bc <_dtoa_r+0x45c>
 8005888:	2200      	movs	r2, #0
 800588a:	4b60      	ldr	r3, [pc, #384]	; (8005a0c <_dtoa_r+0x5ac>)
 800588c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005890:	f7fa fcfa 	bl	8000288 <__aeabi_dsub>
 8005894:	4622      	mov	r2, r4
 8005896:	462b      	mov	r3, r5
 8005898:	e9cd 0100 	strd	r0, r1, [sp]
 800589c:	f7fb f938 	bl	8000b10 <__aeabi_dcmpgt>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	f040 8241 	bne.w	8005d28 <_dtoa_r+0x8c8>
 80058a6:	4622      	mov	r2, r4
 80058a8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80058ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058b0:	f7fb f910 	bl	8000ad4 <__aeabi_dcmplt>
 80058b4:	2800      	cmp	r0, #0
 80058b6:	f040 822e 	bne.w	8005d16 <_dtoa_r+0x8b6>
 80058ba:	e0ab      	b.n	8005a14 <_dtoa_r+0x5b4>
 80058bc:	9a08      	ldr	r2, [sp, #32]
 80058be:	4b4e      	ldr	r3, [pc, #312]	; (80059f8 <_dtoa_r+0x598>)
 80058c0:	1e79      	subs	r1, r7, #1
 80058c2:	2a00      	cmp	r2, #0
 80058c4:	d04a      	beq.n	800595c <_dtoa_r+0x4fc>
 80058c6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80058ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ce:	2000      	movs	r0, #0
 80058d0:	494f      	ldr	r1, [pc, #316]	; (8005a10 <_dtoa_r+0x5b0>)
 80058d2:	f7fa ffb7 	bl	8000844 <__aeabi_ddiv>
 80058d6:	4622      	mov	r2, r4
 80058d8:	462b      	mov	r3, r5
 80058da:	f7fa fcd5 	bl	8000288 <__aeabi_dsub>
 80058de:	9c04      	ldr	r4, [sp, #16]
 80058e0:	4605      	mov	r5, r0
 80058e2:	460e      	mov	r6, r1
 80058e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058e8:	f7fb f932 	bl	8000b50 <__aeabi_d2iz>
 80058ec:	9012      	str	r0, [sp, #72]	; 0x48
 80058ee:	f7fa fe19 	bl	8000524 <__aeabi_i2d>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058fa:	f7fa fcc5 	bl	8000288 <__aeabi_dsub>
 80058fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005900:	3330      	adds	r3, #48	; 0x30
 8005902:	f804 3b01 	strb.w	r3, [r4], #1
 8005906:	462a      	mov	r2, r5
 8005908:	4633      	mov	r3, r6
 800590a:	e9cd 0100 	strd	r0, r1, [sp]
 800590e:	f7fb f8e1 	bl	8000ad4 <__aeabi_dcmplt>
 8005912:	2800      	cmp	r0, #0
 8005914:	f040 8321 	bne.w	8005f5a <_dtoa_r+0xafa>
 8005918:	e9dd 2300 	ldrd	r2, r3, [sp]
 800591c:	2000      	movs	r0, #0
 800591e:	4938      	ldr	r1, [pc, #224]	; (8005a00 <_dtoa_r+0x5a0>)
 8005920:	f7fa fcb2 	bl	8000288 <__aeabi_dsub>
 8005924:	462a      	mov	r2, r5
 8005926:	4633      	mov	r3, r6
 8005928:	f7fb f8d4 	bl	8000ad4 <__aeabi_dcmplt>
 800592c:	2800      	cmp	r0, #0
 800592e:	f040 80d2 	bne.w	8005ad6 <_dtoa_r+0x676>
 8005932:	9b04      	ldr	r3, [sp, #16]
 8005934:	1ae3      	subs	r3, r4, r3
 8005936:	42bb      	cmp	r3, r7
 8005938:	da6c      	bge.n	8005a14 <_dtoa_r+0x5b4>
 800593a:	2200      	movs	r2, #0
 800593c:	4b31      	ldr	r3, [pc, #196]	; (8005a04 <_dtoa_r+0x5a4>)
 800593e:	4628      	mov	r0, r5
 8005940:	4631      	mov	r1, r6
 8005942:	f7fa fe55 	bl	80005f0 <__aeabi_dmul>
 8005946:	2200      	movs	r2, #0
 8005948:	4605      	mov	r5, r0
 800594a:	460e      	mov	r6, r1
 800594c:	4b2d      	ldr	r3, [pc, #180]	; (8005a04 <_dtoa_r+0x5a4>)
 800594e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005952:	f7fa fe4d 	bl	80005f0 <__aeabi_dmul>
 8005956:	e9cd 0100 	strd	r0, r1, [sp]
 800595a:	e7c3      	b.n	80058e4 <_dtoa_r+0x484>
 800595c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005960:	4622      	mov	r2, r4
 8005962:	462b      	mov	r3, r5
 8005964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005968:	f7fa fe42 	bl	80005f0 <__aeabi_dmul>
 800596c:	9b04      	ldr	r3, [sp, #16]
 800596e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8005972:	19dc      	adds	r4, r3, r7
 8005974:	461d      	mov	r5, r3
 8005976:	e9dd 0100 	ldrd	r0, r1, [sp]
 800597a:	f7fb f8e9 	bl	8000b50 <__aeabi_d2iz>
 800597e:	4606      	mov	r6, r0
 8005980:	f7fa fdd0 	bl	8000524 <__aeabi_i2d>
 8005984:	3630      	adds	r6, #48	; 0x30
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800598e:	f7fa fc7b 	bl	8000288 <__aeabi_dsub>
 8005992:	f805 6b01 	strb.w	r6, [r5], #1
 8005996:	42ac      	cmp	r4, r5
 8005998:	e9cd 0100 	strd	r0, r1, [sp]
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	d123      	bne.n	80059ea <_dtoa_r+0x58a>
 80059a2:	4b1b      	ldr	r3, [pc, #108]	; (8005a10 <_dtoa_r+0x5b0>)
 80059a4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80059a8:	f7fa fc70 	bl	800028c <__adddf3>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059b4:	f7fb f8ac 	bl	8000b10 <__aeabi_dcmpgt>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	f040 808c 	bne.w	8005ad6 <_dtoa_r+0x676>
 80059be:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80059c2:	2000      	movs	r0, #0
 80059c4:	4912      	ldr	r1, [pc, #72]	; (8005a10 <_dtoa_r+0x5b0>)
 80059c6:	f7fa fc5f 	bl	8000288 <__aeabi_dsub>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059d2:	f7fb f87f 	bl	8000ad4 <__aeabi_dcmplt>
 80059d6:	b1e8      	cbz	r0, 8005a14 <_dtoa_r+0x5b4>
 80059d8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80059dc:	2b30      	cmp	r3, #48	; 0x30
 80059de:	f104 32ff 	add.w	r2, r4, #4294967295
 80059e2:	f040 82ba 	bne.w	8005f5a <_dtoa_r+0xafa>
 80059e6:	4614      	mov	r4, r2
 80059e8:	e7f6      	b.n	80059d8 <_dtoa_r+0x578>
 80059ea:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <_dtoa_r+0x5a4>)
 80059ec:	f7fa fe00 	bl	80005f0 <__aeabi_dmul>
 80059f0:	e9cd 0100 	strd	r0, r1, [sp]
 80059f4:	e7bf      	b.n	8005976 <_dtoa_r+0x516>
 80059f6:	bf00      	nop
 80059f8:	080072e0 	.word	0x080072e0
 80059fc:	080073a8 	.word	0x080073a8
 8005a00:	3ff00000 	.word	0x3ff00000
 8005a04:	40240000 	.word	0x40240000
 8005a08:	401c0000 	.word	0x401c0000
 8005a0c:	40140000 	.word	0x40140000
 8005a10:	3fe00000 	.word	0x3fe00000
 8005a14:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8005a18:	e88d 0018 	stmia.w	sp, {r3, r4}
 8005a1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	db7c      	blt.n	8005b1c <_dtoa_r+0x6bc>
 8005a22:	f1bb 0f0e 	cmp.w	fp, #14
 8005a26:	dc79      	bgt.n	8005b1c <_dtoa_r+0x6bc>
 8005a28:	4b8f      	ldr	r3, [pc, #572]	; (8005c68 <_dtoa_r+0x808>)
 8005a2a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005a2e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	da14      	bge.n	8005a62 <_dtoa_r+0x602>
 8005a38:	f1b8 0f00 	cmp.w	r8, #0
 8005a3c:	dc11      	bgt.n	8005a62 <_dtoa_r+0x602>
 8005a3e:	f040 816c 	bne.w	8005d1a <_dtoa_r+0x8ba>
 8005a42:	2200      	movs	r2, #0
 8005a44:	4b89      	ldr	r3, [pc, #548]	; (8005c6c <_dtoa_r+0x80c>)
 8005a46:	4630      	mov	r0, r6
 8005a48:	4639      	mov	r1, r7
 8005a4a:	f7fa fdd1 	bl	80005f0 <__aeabi_dmul>
 8005a4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a52:	f7fb f853 	bl	8000afc <__aeabi_dcmpge>
 8005a56:	4645      	mov	r5, r8
 8005a58:	4646      	mov	r6, r8
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	f040 815f 	bne.w	8005d1e <_dtoa_r+0x8be>
 8005a60:	e166      	b.n	8005d30 <_dtoa_r+0x8d0>
 8005a62:	9c04      	ldr	r4, [sp, #16]
 8005a64:	4632      	mov	r2, r6
 8005a66:	463b      	mov	r3, r7
 8005a68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a6c:	f7fa feea 	bl	8000844 <__aeabi_ddiv>
 8005a70:	f7fb f86e 	bl	8000b50 <__aeabi_d2iz>
 8005a74:	4605      	mov	r5, r0
 8005a76:	f7fa fd55 	bl	8000524 <__aeabi_i2d>
 8005a7a:	4632      	mov	r2, r6
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	f7fa fdb7 	bl	80005f0 <__aeabi_dmul>
 8005a82:	460b      	mov	r3, r1
 8005a84:	4602      	mov	r2, r0
 8005a86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a8a:	f7fa fbfd 	bl	8000288 <__aeabi_dsub>
 8005a8e:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8005a92:	f804 eb01 	strb.w	lr, [r4], #1
 8005a96:	9b04      	ldr	r3, [sp, #16]
 8005a98:	ebc3 0e04 	rsb	lr, r3, r4
 8005a9c:	45f0      	cmp	r8, lr
 8005a9e:	e9cd 0100 	strd	r0, r1, [sp]
 8005aa2:	d12e      	bne.n	8005b02 <_dtoa_r+0x6a2>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	f7fa fbf0 	bl	800028c <__adddf3>
 8005aac:	4680      	mov	r8, r0
 8005aae:	4689      	mov	r9, r1
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	4639      	mov	r1, r7
 8005ab8:	f7fb f80c 	bl	8000ad4 <__aeabi_dcmplt>
 8005abc:	b978      	cbnz	r0, 8005ade <_dtoa_r+0x67e>
 8005abe:	4642      	mov	r2, r8
 8005ac0:	464b      	mov	r3, r9
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	4639      	mov	r1, r7
 8005ac6:	f7fa fffb 	bl	8000ac0 <__aeabi_dcmpeq>
 8005aca:	2800      	cmp	r0, #0
 8005acc:	f000 8247 	beq.w	8005f5e <_dtoa_r+0xafe>
 8005ad0:	07e9      	lsls	r1, r5, #31
 8005ad2:	d404      	bmi.n	8005ade <_dtoa_r+0x67e>
 8005ad4:	e243      	b.n	8005f5e <_dtoa_r+0xafe>
 8005ad6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005ada:	e000      	b.n	8005ade <_dtoa_r+0x67e>
 8005adc:	461c      	mov	r4, r3
 8005ade:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8005ae2:	2a39      	cmp	r2, #57	; 0x39
 8005ae4:	f104 33ff 	add.w	r3, r4, #4294967295
 8005ae8:	d107      	bne.n	8005afa <_dtoa_r+0x69a>
 8005aea:	9a04      	ldr	r2, [sp, #16]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d1f5      	bne.n	8005adc <_dtoa_r+0x67c>
 8005af0:	9904      	ldr	r1, [sp, #16]
 8005af2:	2230      	movs	r2, #48	; 0x30
 8005af4:	f10b 0b01 	add.w	fp, fp, #1
 8005af8:	700a      	strb	r2, [r1, #0]
 8005afa:	781a      	ldrb	r2, [r3, #0]
 8005afc:	3201      	adds	r2, #1
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	e22d      	b.n	8005f5e <_dtoa_r+0xafe>
 8005b02:	2200      	movs	r2, #0
 8005b04:	4b5a      	ldr	r3, [pc, #360]	; (8005c70 <_dtoa_r+0x810>)
 8005b06:	f7fa fd73 	bl	80005f0 <__aeabi_dmul>
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	e9cd 0100 	strd	r0, r1, [sp]
 8005b12:	f7fa ffd5 	bl	8000ac0 <__aeabi_dcmpeq>
 8005b16:	2800      	cmp	r0, #0
 8005b18:	d0a4      	beq.n	8005a64 <_dtoa_r+0x604>
 8005b1a:	e220      	b.n	8005f5e <_dtoa_r+0xafe>
 8005b1c:	9a08      	ldr	r2, [sp, #32]
 8005b1e:	2a00      	cmp	r2, #0
 8005b20:	d02d      	beq.n	8005b7e <_dtoa_r+0x71e>
 8005b22:	9a06      	ldr	r2, [sp, #24]
 8005b24:	2a01      	cmp	r2, #1
 8005b26:	dc0a      	bgt.n	8005b3e <_dtoa_r+0x6de>
 8005b28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005b2a:	b112      	cbz	r2, 8005b32 <_dtoa_r+0x6d2>
 8005b2c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b30:	e002      	b.n	8005b38 <_dtoa_r+0x6d8>
 8005b32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b34:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b38:	9d07      	ldr	r5, [sp, #28]
 8005b3a:	464c      	mov	r4, r9
 8005b3c:	e015      	b.n	8005b6a <_dtoa_r+0x70a>
 8005b3e:	9b07      	ldr	r3, [sp, #28]
 8005b40:	f108 35ff 	add.w	r5, r8, #4294967295
 8005b44:	42ab      	cmp	r3, r5
 8005b46:	bfbf      	itttt	lt
 8005b48:	9b07      	ldrlt	r3, [sp, #28]
 8005b4a:	9507      	strlt	r5, [sp, #28]
 8005b4c:	1aea      	sublt	r2, r5, r3
 8005b4e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005b50:	bfb7      	itett	lt
 8005b52:	189b      	addlt	r3, r3, r2
 8005b54:	1b5d      	subge	r5, r3, r5
 8005b56:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005b58:	2500      	movlt	r5, #0
 8005b5a:	f1b8 0f00 	cmp.w	r8, #0
 8005b5e:	bfb9      	ittee	lt
 8005b60:	ebc8 0409 	rsblt	r4, r8, r9
 8005b64:	2300      	movlt	r3, #0
 8005b66:	464c      	movge	r4, r9
 8005b68:	4643      	movge	r3, r8
 8005b6a:	9a05      	ldr	r2, [sp, #20]
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	441a      	add	r2, r3
 8005b70:	4650      	mov	r0, sl
 8005b72:	4499      	add	r9, r3
 8005b74:	9205      	str	r2, [sp, #20]
 8005b76:	f000 fd15 	bl	80065a4 <__i2b>
 8005b7a:	4606      	mov	r6, r0
 8005b7c:	e002      	b.n	8005b84 <_dtoa_r+0x724>
 8005b7e:	9d07      	ldr	r5, [sp, #28]
 8005b80:	9e08      	ldr	r6, [sp, #32]
 8005b82:	464c      	mov	r4, r9
 8005b84:	b15c      	cbz	r4, 8005b9e <_dtoa_r+0x73e>
 8005b86:	9b05      	ldr	r3, [sp, #20]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	dd08      	ble.n	8005b9e <_dtoa_r+0x73e>
 8005b8c:	42a3      	cmp	r3, r4
 8005b8e:	9a05      	ldr	r2, [sp, #20]
 8005b90:	bfa8      	it	ge
 8005b92:	4623      	movge	r3, r4
 8005b94:	ebc3 0909 	rsb	r9, r3, r9
 8005b98:	1ae4      	subs	r4, r4, r3
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	9305      	str	r3, [sp, #20]
 8005b9e:	9b07      	ldr	r3, [sp, #28]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	dd1d      	ble.n	8005be0 <_dtoa_r+0x780>
 8005ba4:	9b08      	ldr	r3, [sp, #32]
 8005ba6:	b1ab      	cbz	r3, 8005bd4 <_dtoa_r+0x774>
 8005ba8:	b185      	cbz	r5, 8005bcc <_dtoa_r+0x76c>
 8005baa:	4631      	mov	r1, r6
 8005bac:	462a      	mov	r2, r5
 8005bae:	4650      	mov	r0, sl
 8005bb0:	f000 fd92 	bl	80066d8 <__pow5mult>
 8005bb4:	9a02      	ldr	r2, [sp, #8]
 8005bb6:	4601      	mov	r1, r0
 8005bb8:	4606      	mov	r6, r0
 8005bba:	4650      	mov	r0, sl
 8005bbc:	f000 fcfb 	bl	80065b6 <__multiply>
 8005bc0:	9902      	ldr	r1, [sp, #8]
 8005bc2:	4607      	mov	r7, r0
 8005bc4:	4650      	mov	r0, sl
 8005bc6:	f000 fc4e 	bl	8006466 <_Bfree>
 8005bca:	9702      	str	r7, [sp, #8]
 8005bcc:	9b07      	ldr	r3, [sp, #28]
 8005bce:	1b5a      	subs	r2, r3, r5
 8005bd0:	d006      	beq.n	8005be0 <_dtoa_r+0x780>
 8005bd2:	e000      	b.n	8005bd6 <_dtoa_r+0x776>
 8005bd4:	9a07      	ldr	r2, [sp, #28]
 8005bd6:	9902      	ldr	r1, [sp, #8]
 8005bd8:	4650      	mov	r0, sl
 8005bda:	f000 fd7d 	bl	80066d8 <__pow5mult>
 8005bde:	9002      	str	r0, [sp, #8]
 8005be0:	2101      	movs	r1, #1
 8005be2:	4650      	mov	r0, sl
 8005be4:	f000 fcde 	bl	80065a4 <__i2b>
 8005be8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bea:	4605      	mov	r5, r0
 8005bec:	b35b      	cbz	r3, 8005c46 <_dtoa_r+0x7e6>
 8005bee:	461a      	mov	r2, r3
 8005bf0:	4601      	mov	r1, r0
 8005bf2:	4650      	mov	r0, sl
 8005bf4:	f000 fd70 	bl	80066d8 <__pow5mult>
 8005bf8:	9b06      	ldr	r3, [sp, #24]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	4605      	mov	r5, r0
 8005bfe:	dc18      	bgt.n	8005c32 <_dtoa_r+0x7d2>
 8005c00:	9b00      	ldr	r3, [sp, #0]
 8005c02:	b983      	cbnz	r3, 8005c26 <_dtoa_r+0x7c6>
 8005c04:	9b01      	ldr	r3, [sp, #4]
 8005c06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c0a:	b973      	cbnz	r3, 8005c2a <_dtoa_r+0x7ca>
 8005c0c:	9b01      	ldr	r3, [sp, #4]
 8005c0e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8005c12:	0d3f      	lsrs	r7, r7, #20
 8005c14:	053f      	lsls	r7, r7, #20
 8005c16:	b14f      	cbz	r7, 8005c2c <_dtoa_r+0x7cc>
 8005c18:	9b05      	ldr	r3, [sp, #20]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	f109 0901 	add.w	r9, r9, #1
 8005c20:	9305      	str	r3, [sp, #20]
 8005c22:	2701      	movs	r7, #1
 8005c24:	e002      	b.n	8005c2c <_dtoa_r+0x7cc>
 8005c26:	2700      	movs	r7, #0
 8005c28:	e000      	b.n	8005c2c <_dtoa_r+0x7cc>
 8005c2a:	9f00      	ldr	r7, [sp, #0]
 8005c2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c2e:	b173      	cbz	r3, 8005c4e <_dtoa_r+0x7ee>
 8005c30:	e000      	b.n	8005c34 <_dtoa_r+0x7d4>
 8005c32:	2700      	movs	r7, #0
 8005c34:	692b      	ldr	r3, [r5, #16]
 8005c36:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005c3a:	6918      	ldr	r0, [r3, #16]
 8005c3c:	f000 fc65 	bl	800650a <__hi0bits>
 8005c40:	f1c0 0020 	rsb	r0, r0, #32
 8005c44:	e004      	b.n	8005c50 <_dtoa_r+0x7f0>
 8005c46:	9b06      	ldr	r3, [sp, #24]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	ddd9      	ble.n	8005c00 <_dtoa_r+0x7a0>
 8005c4c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8005c4e:	2001      	movs	r0, #1
 8005c50:	9b05      	ldr	r3, [sp, #20]
 8005c52:	4418      	add	r0, r3
 8005c54:	f010 001f 	ands.w	r0, r0, #31
 8005c58:	d00e      	beq.n	8005c78 <_dtoa_r+0x818>
 8005c5a:	f1c0 0320 	rsb	r3, r0, #32
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	dd08      	ble.n	8005c74 <_dtoa_r+0x814>
 8005c62:	f1c0 001c 	rsb	r0, r0, #28
 8005c66:	e008      	b.n	8005c7a <_dtoa_r+0x81a>
 8005c68:	080072e0 	.word	0x080072e0
 8005c6c:	40140000 	.word	0x40140000
 8005c70:	40240000 	.word	0x40240000
 8005c74:	d006      	beq.n	8005c84 <_dtoa_r+0x824>
 8005c76:	4618      	mov	r0, r3
 8005c78:	301c      	adds	r0, #28
 8005c7a:	9b05      	ldr	r3, [sp, #20]
 8005c7c:	4403      	add	r3, r0
 8005c7e:	4481      	add	r9, r0
 8005c80:	4404      	add	r4, r0
 8005c82:	9305      	str	r3, [sp, #20]
 8005c84:	f1b9 0f00 	cmp.w	r9, #0
 8005c88:	dd05      	ble.n	8005c96 <_dtoa_r+0x836>
 8005c8a:	464a      	mov	r2, r9
 8005c8c:	9902      	ldr	r1, [sp, #8]
 8005c8e:	4650      	mov	r0, sl
 8005c90:	f000 fd70 	bl	8006774 <__lshift>
 8005c94:	9002      	str	r0, [sp, #8]
 8005c96:	9b05      	ldr	r3, [sp, #20]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	dd05      	ble.n	8005ca8 <_dtoa_r+0x848>
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	4650      	mov	r0, sl
 8005ca2:	f000 fd67 	bl	8006774 <__lshift>
 8005ca6:	4605      	mov	r5, r0
 8005ca8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005caa:	b1eb      	cbz	r3, 8005ce8 <_dtoa_r+0x888>
 8005cac:	4629      	mov	r1, r5
 8005cae:	9802      	ldr	r0, [sp, #8]
 8005cb0:	f000 fdb1 	bl	8006816 <__mcmp>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	da17      	bge.n	8005ce8 <_dtoa_r+0x888>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	220a      	movs	r2, #10
 8005cbc:	9902      	ldr	r1, [sp, #8]
 8005cbe:	4650      	mov	r0, sl
 8005cc0:	f000 fbe8 	bl	8006494 <__multadd>
 8005cc4:	9b08      	ldr	r3, [sp, #32]
 8005cc6:	9002      	str	r0, [sp, #8]
 8005cc8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 8158 	beq.w	8005f82 <_dtoa_r+0xb22>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	4631      	mov	r1, r6
 8005cd6:	220a      	movs	r2, #10
 8005cd8:	4650      	mov	r0, sl
 8005cda:	f000 fbdb 	bl	8006494 <__multadd>
 8005cde:	9b03      	ldr	r3, [sp, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	4606      	mov	r6, r0
 8005ce4:	dc37      	bgt.n	8005d56 <_dtoa_r+0x8f6>
 8005ce6:	e033      	b.n	8005d50 <_dtoa_r+0x8f0>
 8005ce8:	f1b8 0f00 	cmp.w	r8, #0
 8005cec:	dc2a      	bgt.n	8005d44 <_dtoa_r+0x8e4>
 8005cee:	9b06      	ldr	r3, [sp, #24]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	dd27      	ble.n	8005d44 <_dtoa_r+0x8e4>
 8005cf4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cf8:	9b03      	ldr	r3, [sp, #12]
 8005cfa:	b983      	cbnz	r3, 8005d1e <_dtoa_r+0x8be>
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	2205      	movs	r2, #5
 8005d00:	4650      	mov	r0, sl
 8005d02:	f000 fbc7 	bl	8006494 <__multadd>
 8005d06:	4601      	mov	r1, r0
 8005d08:	4605      	mov	r5, r0
 8005d0a:	9802      	ldr	r0, [sp, #8]
 8005d0c:	f000 fd83 	bl	8006816 <__mcmp>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	dc0d      	bgt.n	8005d30 <_dtoa_r+0x8d0>
 8005d14:	e003      	b.n	8005d1e <_dtoa_r+0x8be>
 8005d16:	463d      	mov	r5, r7
 8005d18:	e000      	b.n	8005d1c <_dtoa_r+0x8bc>
 8005d1a:	2500      	movs	r5, #0
 8005d1c:	462e      	mov	r6, r5
 8005d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d20:	9c04      	ldr	r4, [sp, #16]
 8005d22:	ea6f 0b03 	mvn.w	fp, r3
 8005d26:	e00a      	b.n	8005d3e <_dtoa_r+0x8de>
 8005d28:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005d2c:	463d      	mov	r5, r7
 8005d2e:	463e      	mov	r6, r7
 8005d30:	9b04      	ldr	r3, [sp, #16]
 8005d32:	9a04      	ldr	r2, [sp, #16]
 8005d34:	1c5c      	adds	r4, r3, #1
 8005d36:	2331      	movs	r3, #49	; 0x31
 8005d38:	7013      	strb	r3, [r2, #0]
 8005d3a:	f10b 0b01 	add.w	fp, fp, #1
 8005d3e:	46b0      	mov	r8, r6
 8005d40:	2600      	movs	r6, #0
 8005d42:	e0f7      	b.n	8005f34 <_dtoa_r+0xad4>
 8005d44:	9b08      	ldr	r3, [sp, #32]
 8005d46:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d4a:	b923      	cbnz	r3, 8005d56 <_dtoa_r+0x8f6>
 8005d4c:	9c04      	ldr	r4, [sp, #16]
 8005d4e:	e0b1      	b.n	8005eb4 <_dtoa_r+0xa54>
 8005d50:	9b06      	ldr	r3, [sp, #24]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	dcd0      	bgt.n	8005cf8 <_dtoa_r+0x898>
 8005d56:	2c00      	cmp	r4, #0
 8005d58:	dd05      	ble.n	8005d66 <_dtoa_r+0x906>
 8005d5a:	4631      	mov	r1, r6
 8005d5c:	4622      	mov	r2, r4
 8005d5e:	4650      	mov	r0, sl
 8005d60:	f000 fd08 	bl	8006774 <__lshift>
 8005d64:	4606      	mov	r6, r0
 8005d66:	b19f      	cbz	r7, 8005d90 <_dtoa_r+0x930>
 8005d68:	6871      	ldr	r1, [r6, #4]
 8005d6a:	4650      	mov	r0, sl
 8005d6c:	f000 fb46 	bl	80063fc <_Balloc>
 8005d70:	6932      	ldr	r2, [r6, #16]
 8005d72:	3202      	adds	r2, #2
 8005d74:	4604      	mov	r4, r0
 8005d76:	0092      	lsls	r2, r2, #2
 8005d78:	f106 010c 	add.w	r1, r6, #12
 8005d7c:	300c      	adds	r0, #12
 8005d7e:	f7fe fae1 	bl	8004344 <memcpy>
 8005d82:	2201      	movs	r2, #1
 8005d84:	4621      	mov	r1, r4
 8005d86:	4650      	mov	r0, sl
 8005d88:	f000 fcf4 	bl	8006774 <__lshift>
 8005d8c:	4680      	mov	r8, r0
 8005d8e:	e000      	b.n	8005d92 <_dtoa_r+0x932>
 8005d90:	46b0      	mov	r8, r6
 8005d92:	9b00      	ldr	r3, [sp, #0]
 8005d94:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	9305      	str	r3, [sp, #20]
 8005d9e:	4629      	mov	r1, r5
 8005da0:	9802      	ldr	r0, [sp, #8]
 8005da2:	f7ff facb 	bl	800533c <quorem>
 8005da6:	4631      	mov	r1, r6
 8005da8:	4604      	mov	r4, r0
 8005daa:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8005dae:	9802      	ldr	r0, [sp, #8]
 8005db0:	f000 fd31 	bl	8006816 <__mcmp>
 8005db4:	4642      	mov	r2, r8
 8005db6:	9000      	str	r0, [sp, #0]
 8005db8:	4629      	mov	r1, r5
 8005dba:	4650      	mov	r0, sl
 8005dbc:	f000 fd47 	bl	800684e <__mdiff>
 8005dc0:	68c3      	ldr	r3, [r0, #12]
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	b93b      	cbnz	r3, 8005dd6 <_dtoa_r+0x976>
 8005dc6:	4601      	mov	r1, r0
 8005dc8:	9007      	str	r0, [sp, #28]
 8005dca:	9802      	ldr	r0, [sp, #8]
 8005dcc:	f000 fd23 	bl	8006816 <__mcmp>
 8005dd0:	9a07      	ldr	r2, [sp, #28]
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	e000      	b.n	8005dd8 <_dtoa_r+0x978>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	4611      	mov	r1, r2
 8005dda:	4650      	mov	r0, sl
 8005ddc:	9307      	str	r3, [sp, #28]
 8005dde:	f000 fb42 	bl	8006466 <_Bfree>
 8005de2:	9b07      	ldr	r3, [sp, #28]
 8005de4:	b94b      	cbnz	r3, 8005dfa <_dtoa_r+0x99a>
 8005de6:	9a06      	ldr	r2, [sp, #24]
 8005de8:	b93a      	cbnz	r2, 8005dfa <_dtoa_r+0x99a>
 8005dea:	9a05      	ldr	r2, [sp, #20]
 8005dec:	b92a      	cbnz	r2, 8005dfa <_dtoa_r+0x99a>
 8005dee:	2f39      	cmp	r7, #57	; 0x39
 8005df0:	d028      	beq.n	8005e44 <_dtoa_r+0x9e4>
 8005df2:	9b00      	ldr	r3, [sp, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	dc1a      	bgt.n	8005e2e <_dtoa_r+0x9ce>
 8005df8:	e01b      	b.n	8005e32 <_dtoa_r+0x9d2>
 8005dfa:	9a00      	ldr	r2, [sp, #0]
 8005dfc:	2a00      	cmp	r2, #0
 8005dfe:	db04      	blt.n	8005e0a <_dtoa_r+0x9aa>
 8005e00:	d11a      	bne.n	8005e38 <_dtoa_r+0x9d8>
 8005e02:	9a06      	ldr	r2, [sp, #24]
 8005e04:	b9c2      	cbnz	r2, 8005e38 <_dtoa_r+0x9d8>
 8005e06:	9a05      	ldr	r2, [sp, #20]
 8005e08:	b9b2      	cbnz	r2, 8005e38 <_dtoa_r+0x9d8>
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	dd11      	ble.n	8005e32 <_dtoa_r+0x9d2>
 8005e0e:	2201      	movs	r2, #1
 8005e10:	9902      	ldr	r1, [sp, #8]
 8005e12:	4650      	mov	r0, sl
 8005e14:	f000 fcae 	bl	8006774 <__lshift>
 8005e18:	4629      	mov	r1, r5
 8005e1a:	9002      	str	r0, [sp, #8]
 8005e1c:	f000 fcfb 	bl	8006816 <__mcmp>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	dc02      	bgt.n	8005e2a <_dtoa_r+0x9ca>
 8005e24:	d105      	bne.n	8005e32 <_dtoa_r+0x9d2>
 8005e26:	07fa      	lsls	r2, r7, #31
 8005e28:	d503      	bpl.n	8005e32 <_dtoa_r+0x9d2>
 8005e2a:	2f39      	cmp	r7, #57	; 0x39
 8005e2c:	d00a      	beq.n	8005e44 <_dtoa_r+0x9e4>
 8005e2e:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8005e32:	f109 0401 	add.w	r4, r9, #1
 8005e36:	e00c      	b.n	8005e52 <_dtoa_r+0x9f2>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f109 0401 	add.w	r4, r9, #1
 8005e3e:	dd0b      	ble.n	8005e58 <_dtoa_r+0x9f8>
 8005e40:	2f39      	cmp	r7, #57	; 0x39
 8005e42:	d105      	bne.n	8005e50 <_dtoa_r+0x9f0>
 8005e44:	2339      	movs	r3, #57	; 0x39
 8005e46:	f889 3000 	strb.w	r3, [r9]
 8005e4a:	f109 0901 	add.w	r9, r9, #1
 8005e4e:	e054      	b.n	8005efa <_dtoa_r+0xa9a>
 8005e50:	3701      	adds	r7, #1
 8005e52:	f889 7000 	strb.w	r7, [r9]
 8005e56:	e06d      	b.n	8005f34 <_dtoa_r+0xad4>
 8005e58:	9b04      	ldr	r3, [sp, #16]
 8005e5a:	9a03      	ldr	r2, [sp, #12]
 8005e5c:	f804 7c01 	strb.w	r7, [r4, #-1]
 8005e60:	1ae3      	subs	r3, r4, r3
 8005e62:	4293      	cmp	r3, r2
 8005e64:	46a1      	mov	r9, r4
 8005e66:	d03a      	beq.n	8005ede <_dtoa_r+0xa7e>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	220a      	movs	r2, #10
 8005e6c:	9902      	ldr	r1, [sp, #8]
 8005e6e:	4650      	mov	r0, sl
 8005e70:	f000 fb10 	bl	8006494 <__multadd>
 8005e74:	4546      	cmp	r6, r8
 8005e76:	9002      	str	r0, [sp, #8]
 8005e78:	f04f 0300 	mov.w	r3, #0
 8005e7c:	f04f 020a 	mov.w	r2, #10
 8005e80:	4631      	mov	r1, r6
 8005e82:	4650      	mov	r0, sl
 8005e84:	d104      	bne.n	8005e90 <_dtoa_r+0xa30>
 8005e86:	f000 fb05 	bl	8006494 <__multadd>
 8005e8a:	4606      	mov	r6, r0
 8005e8c:	4680      	mov	r8, r0
 8005e8e:	e786      	b.n	8005d9e <_dtoa_r+0x93e>
 8005e90:	f000 fb00 	bl	8006494 <__multadd>
 8005e94:	4641      	mov	r1, r8
 8005e96:	4606      	mov	r6, r0
 8005e98:	2300      	movs	r3, #0
 8005e9a:	220a      	movs	r2, #10
 8005e9c:	4650      	mov	r0, sl
 8005e9e:	f000 faf9 	bl	8006494 <__multadd>
 8005ea2:	4680      	mov	r8, r0
 8005ea4:	e77b      	b.n	8005d9e <_dtoa_r+0x93e>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	220a      	movs	r2, #10
 8005eaa:	9902      	ldr	r1, [sp, #8]
 8005eac:	4650      	mov	r0, sl
 8005eae:	f000 faf1 	bl	8006494 <__multadd>
 8005eb2:	9002      	str	r0, [sp, #8]
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	9802      	ldr	r0, [sp, #8]
 8005eb8:	f7ff fa40 	bl	800533c <quorem>
 8005ebc:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8005ec0:	f804 7b01 	strb.w	r7, [r4], #1
 8005ec4:	9b04      	ldr	r3, [sp, #16]
 8005ec6:	9a03      	ldr	r2, [sp, #12]
 8005ec8:	1ae3      	subs	r3, r4, r3
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	dbeb      	blt.n	8005ea6 <_dtoa_r+0xa46>
 8005ece:	9b04      	ldr	r3, [sp, #16]
 8005ed0:	2a01      	cmp	r2, #1
 8005ed2:	bfac      	ite	ge
 8005ed4:	189b      	addge	r3, r3, r2
 8005ed6:	3301      	addlt	r3, #1
 8005ed8:	46b0      	mov	r8, r6
 8005eda:	4699      	mov	r9, r3
 8005edc:	2600      	movs	r6, #0
 8005ede:	2201      	movs	r2, #1
 8005ee0:	9902      	ldr	r1, [sp, #8]
 8005ee2:	4650      	mov	r0, sl
 8005ee4:	f000 fc46 	bl	8006774 <__lshift>
 8005ee8:	4629      	mov	r1, r5
 8005eea:	9002      	str	r0, [sp, #8]
 8005eec:	f000 fc93 	bl	8006816 <__mcmp>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	dc02      	bgt.n	8005efa <_dtoa_r+0xa9a>
 8005ef4:	d115      	bne.n	8005f22 <_dtoa_r+0xac2>
 8005ef6:	07fb      	lsls	r3, r7, #31
 8005ef8:	d513      	bpl.n	8005f22 <_dtoa_r+0xac2>
 8005efa:	464c      	mov	r4, r9
 8005efc:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8005f00:	2b39      	cmp	r3, #57	; 0x39
 8005f02:	f104 32ff 	add.w	r2, r4, #4294967295
 8005f06:	d109      	bne.n	8005f1c <_dtoa_r+0xabc>
 8005f08:	9b04      	ldr	r3, [sp, #16]
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d104      	bne.n	8005f18 <_dtoa_r+0xab8>
 8005f0e:	f10b 0b01 	add.w	fp, fp, #1
 8005f12:	2331      	movs	r3, #49	; 0x31
 8005f14:	9a04      	ldr	r2, [sp, #16]
 8005f16:	e002      	b.n	8005f1e <_dtoa_r+0xabe>
 8005f18:	4614      	mov	r4, r2
 8005f1a:	e7ef      	b.n	8005efc <_dtoa_r+0xa9c>
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	7013      	strb	r3, [r2, #0]
 8005f20:	e008      	b.n	8005f34 <_dtoa_r+0xad4>
 8005f22:	464c      	mov	r4, r9
 8005f24:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8005f28:	2b30      	cmp	r3, #48	; 0x30
 8005f2a:	f104 32ff 	add.w	r2, r4, #4294967295
 8005f2e:	d101      	bne.n	8005f34 <_dtoa_r+0xad4>
 8005f30:	4614      	mov	r4, r2
 8005f32:	e7f7      	b.n	8005f24 <_dtoa_r+0xac4>
 8005f34:	4629      	mov	r1, r5
 8005f36:	4650      	mov	r0, sl
 8005f38:	f000 fa95 	bl	8006466 <_Bfree>
 8005f3c:	f1b8 0f00 	cmp.w	r8, #0
 8005f40:	d00d      	beq.n	8005f5e <_dtoa_r+0xafe>
 8005f42:	b12e      	cbz	r6, 8005f50 <_dtoa_r+0xaf0>
 8005f44:	4546      	cmp	r6, r8
 8005f46:	d003      	beq.n	8005f50 <_dtoa_r+0xaf0>
 8005f48:	4631      	mov	r1, r6
 8005f4a:	4650      	mov	r0, sl
 8005f4c:	f000 fa8b 	bl	8006466 <_Bfree>
 8005f50:	4641      	mov	r1, r8
 8005f52:	4650      	mov	r0, sl
 8005f54:	f000 fa87 	bl	8006466 <_Bfree>
 8005f58:	e001      	b.n	8005f5e <_dtoa_r+0xafe>
 8005f5a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005f5e:	9902      	ldr	r1, [sp, #8]
 8005f60:	4650      	mov	r0, sl
 8005f62:	f000 fa80 	bl	8006466 <_Bfree>
 8005f66:	2300      	movs	r3, #0
 8005f68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f6a:	7023      	strb	r3, [r4, #0]
 8005f6c:	f10b 0301 	add.w	r3, fp, #1
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f74:	b11b      	cbz	r3, 8005f7e <_dtoa_r+0xb1e>
 8005f76:	601c      	str	r4, [r3, #0]
 8005f78:	e001      	b.n	8005f7e <_dtoa_r+0xb1e>
 8005f7a:	4808      	ldr	r0, [pc, #32]	; (8005f9c <_dtoa_r+0xb3c>)
 8005f7c:	e00a      	b.n	8005f94 <_dtoa_r+0xb34>
 8005f7e:	9804      	ldr	r0, [sp, #16]
 8005f80:	e008      	b.n	8005f94 <_dtoa_r+0xb34>
 8005f82:	9b03      	ldr	r3, [sp, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f73f aee1 	bgt.w	8005d4c <_dtoa_r+0x8ec>
 8005f8a:	9b06      	ldr	r3, [sp, #24]
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	f77f aedd 	ble.w	8005d4c <_dtoa_r+0x8ec>
 8005f92:	e6b1      	b.n	8005cf8 <_dtoa_r+0x898>
 8005f94:	b017      	add	sp, #92	; 0x5c
 8005f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9a:	bf00      	nop
 8005f9c:	080072b9 	.word	0x080072b9

08005fa0 <_localeconv_r>:
 8005fa0:	4800      	ldr	r0, [pc, #0]	; (8005fa4 <_localeconv_r+0x4>)
 8005fa2:	4770      	bx	lr
 8005fa4:	20000114 	.word	0x20000114

08005fa8 <malloc>:
 8005fa8:	4b02      	ldr	r3, [pc, #8]	; (8005fb4 <malloc+0xc>)
 8005faa:	4601      	mov	r1, r0
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	f000 b803 	b.w	8005fb8 <_malloc_r>
 8005fb2:	bf00      	nop
 8005fb4:	20000110 	.word	0x20000110

08005fb8 <_malloc_r>:
 8005fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fbc:	f101 040b 	add.w	r4, r1, #11
 8005fc0:	2c16      	cmp	r4, #22
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	4681      	mov	r9, r0
 8005fc6:	d903      	bls.n	8005fd0 <_malloc_r+0x18>
 8005fc8:	f034 0407 	bics.w	r4, r4, #7
 8005fcc:	d501      	bpl.n	8005fd2 <_malloc_r+0x1a>
 8005fce:	e002      	b.n	8005fd6 <_malloc_r+0x1e>
 8005fd0:	2410      	movs	r4, #16
 8005fd2:	428c      	cmp	r4, r1
 8005fd4:	d203      	bcs.n	8005fde <_malloc_r+0x26>
 8005fd6:	230c      	movs	r3, #12
 8005fd8:	f8c9 3000 	str.w	r3, [r9]
 8005fdc:	e1ea      	b.n	80063b4 <_malloc_r+0x3fc>
 8005fde:	4648      	mov	r0, r9
 8005fe0:	f000 fa0a 	bl	80063f8 <__malloc_lock>
 8005fe4:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8005fe8:	4d9e      	ldr	r5, [pc, #632]	; (8006264 <_malloc_r+0x2ac>)
 8005fea:	d217      	bcs.n	800601c <_malloc_r+0x64>
 8005fec:	f104 0208 	add.w	r2, r4, #8
 8005ff0:	442a      	add	r2, r5
 8005ff2:	f1a2 0108 	sub.w	r1, r2, #8
 8005ff6:	6856      	ldr	r6, [r2, #4]
 8005ff8:	428e      	cmp	r6, r1
 8005ffa:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8005ffe:	d102      	bne.n	8006006 <_malloc_r+0x4e>
 8006000:	68d6      	ldr	r6, [r2, #12]
 8006002:	42b2      	cmp	r2, r6
 8006004:	d008      	beq.n	8006018 <_malloc_r+0x60>
 8006006:	6873      	ldr	r3, [r6, #4]
 8006008:	68f2      	ldr	r2, [r6, #12]
 800600a:	68b1      	ldr	r1, [r6, #8]
 800600c:	f023 0303 	bic.w	r3, r3, #3
 8006010:	60ca      	str	r2, [r1, #12]
 8006012:	4433      	add	r3, r6
 8006014:	6091      	str	r1, [r2, #8]
 8006016:	e02f      	b.n	8006078 <_malloc_r+0xc0>
 8006018:	3302      	adds	r3, #2
 800601a:	e03d      	b.n	8006098 <_malloc_r+0xe0>
 800601c:	0a63      	lsrs	r3, r4, #9
 800601e:	d01a      	beq.n	8006056 <_malloc_r+0x9e>
 8006020:	2b04      	cmp	r3, #4
 8006022:	d802      	bhi.n	800602a <_malloc_r+0x72>
 8006024:	09a3      	lsrs	r3, r4, #6
 8006026:	3338      	adds	r3, #56	; 0x38
 8006028:	e018      	b.n	800605c <_malloc_r+0xa4>
 800602a:	2b14      	cmp	r3, #20
 800602c:	d801      	bhi.n	8006032 <_malloc_r+0x7a>
 800602e:	335b      	adds	r3, #91	; 0x5b
 8006030:	e014      	b.n	800605c <_malloc_r+0xa4>
 8006032:	2b54      	cmp	r3, #84	; 0x54
 8006034:	d802      	bhi.n	800603c <_malloc_r+0x84>
 8006036:	0b23      	lsrs	r3, r4, #12
 8006038:	336e      	adds	r3, #110	; 0x6e
 800603a:	e00f      	b.n	800605c <_malloc_r+0xa4>
 800603c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006040:	d802      	bhi.n	8006048 <_malloc_r+0x90>
 8006042:	0be3      	lsrs	r3, r4, #15
 8006044:	3377      	adds	r3, #119	; 0x77
 8006046:	e009      	b.n	800605c <_malloc_r+0xa4>
 8006048:	f240 5254 	movw	r2, #1364	; 0x554
 800604c:	4293      	cmp	r3, r2
 800604e:	d804      	bhi.n	800605a <_malloc_r+0xa2>
 8006050:	0ca3      	lsrs	r3, r4, #18
 8006052:	337c      	adds	r3, #124	; 0x7c
 8006054:	e002      	b.n	800605c <_malloc_r+0xa4>
 8006056:	233f      	movs	r3, #63	; 0x3f
 8006058:	e000      	b.n	800605c <_malloc_r+0xa4>
 800605a:	237e      	movs	r3, #126	; 0x7e
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8006062:	f1a2 0008 	sub.w	r0, r2, #8
 8006066:	6856      	ldr	r6, [r2, #4]
 8006068:	e00c      	b.n	8006084 <_malloc_r+0xcc>
 800606a:	2900      	cmp	r1, #0
 800606c:	68f1      	ldr	r1, [r6, #12]
 800606e:	db08      	blt.n	8006082 <_malloc_r+0xca>
 8006070:	68b3      	ldr	r3, [r6, #8]
 8006072:	60d9      	str	r1, [r3, #12]
 8006074:	608b      	str	r3, [r1, #8]
 8006076:	18b3      	adds	r3, r6, r2
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	f042 0201 	orr.w	r2, r2, #1
 800607e:	605a      	str	r2, [r3, #4]
 8006080:	e1a3      	b.n	80063ca <_malloc_r+0x412>
 8006082:	460e      	mov	r6, r1
 8006084:	4286      	cmp	r6, r0
 8006086:	d006      	beq.n	8006096 <_malloc_r+0xde>
 8006088:	6872      	ldr	r2, [r6, #4]
 800608a:	f022 0203 	bic.w	r2, r2, #3
 800608e:	1b11      	subs	r1, r2, r4
 8006090:	290f      	cmp	r1, #15
 8006092:	ddea      	ble.n	800606a <_malloc_r+0xb2>
 8006094:	3b01      	subs	r3, #1
 8006096:	3301      	adds	r3, #1
 8006098:	4a72      	ldr	r2, [pc, #456]	; (8006264 <_malloc_r+0x2ac>)
 800609a:	692e      	ldr	r6, [r5, #16]
 800609c:	f102 0708 	add.w	r7, r2, #8
 80060a0:	42be      	cmp	r6, r7
 80060a2:	4639      	mov	r1, r7
 80060a4:	d079      	beq.n	800619a <_malloc_r+0x1e2>
 80060a6:	6870      	ldr	r0, [r6, #4]
 80060a8:	f020 0003 	bic.w	r0, r0, #3
 80060ac:	ebc4 0e00 	rsb	lr, r4, r0
 80060b0:	f1be 0f0f 	cmp.w	lr, #15
 80060b4:	dd0d      	ble.n	80060d2 <_malloc_r+0x11a>
 80060b6:	1933      	adds	r3, r6, r4
 80060b8:	f044 0401 	orr.w	r4, r4, #1
 80060bc:	6074      	str	r4, [r6, #4]
 80060be:	6153      	str	r3, [r2, #20]
 80060c0:	6113      	str	r3, [r2, #16]
 80060c2:	f04e 0201 	orr.w	r2, lr, #1
 80060c6:	60df      	str	r7, [r3, #12]
 80060c8:	609f      	str	r7, [r3, #8]
 80060ca:	605a      	str	r2, [r3, #4]
 80060cc:	f843 e00e 	str.w	lr, [r3, lr]
 80060d0:	e17b      	b.n	80063ca <_malloc_r+0x412>
 80060d2:	f1be 0f00 	cmp.w	lr, #0
 80060d6:	6157      	str	r7, [r2, #20]
 80060d8:	6117      	str	r7, [r2, #16]
 80060da:	db05      	blt.n	80060e8 <_malloc_r+0x130>
 80060dc:	4430      	add	r0, r6
 80060de:	6843      	ldr	r3, [r0, #4]
 80060e0:	f043 0301 	orr.w	r3, r3, #1
 80060e4:	6043      	str	r3, [r0, #4]
 80060e6:	e170      	b.n	80063ca <_malloc_r+0x412>
 80060e8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80060ec:	d215      	bcs.n	800611a <_malloc_r+0x162>
 80060ee:	08c0      	lsrs	r0, r0, #3
 80060f0:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 80060f4:	2701      	movs	r7, #1
 80060f6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80060fa:	6857      	ldr	r7, [r2, #4]
 80060fc:	3001      	adds	r0, #1
 80060fe:	ea4e 0707 	orr.w	r7, lr, r7
 8006102:	6057      	str	r7, [r2, #4]
 8006104:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8006108:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 800610c:	f8c6 e008 	str.w	lr, [r6, #8]
 8006110:	3f08      	subs	r7, #8
 8006112:	60f7      	str	r7, [r6, #12]
 8006114:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8006118:	e03d      	b.n	8006196 <_malloc_r+0x1de>
 800611a:	0a42      	lsrs	r2, r0, #9
 800611c:	2a04      	cmp	r2, #4
 800611e:	d802      	bhi.n	8006126 <_malloc_r+0x16e>
 8006120:	0982      	lsrs	r2, r0, #6
 8006122:	3238      	adds	r2, #56	; 0x38
 8006124:	e015      	b.n	8006152 <_malloc_r+0x19a>
 8006126:	2a14      	cmp	r2, #20
 8006128:	d801      	bhi.n	800612e <_malloc_r+0x176>
 800612a:	325b      	adds	r2, #91	; 0x5b
 800612c:	e011      	b.n	8006152 <_malloc_r+0x19a>
 800612e:	2a54      	cmp	r2, #84	; 0x54
 8006130:	d802      	bhi.n	8006138 <_malloc_r+0x180>
 8006132:	0b02      	lsrs	r2, r0, #12
 8006134:	326e      	adds	r2, #110	; 0x6e
 8006136:	e00c      	b.n	8006152 <_malloc_r+0x19a>
 8006138:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800613c:	d802      	bhi.n	8006144 <_malloc_r+0x18c>
 800613e:	0bc2      	lsrs	r2, r0, #15
 8006140:	3277      	adds	r2, #119	; 0x77
 8006142:	e006      	b.n	8006152 <_malloc_r+0x19a>
 8006144:	f240 5754 	movw	r7, #1364	; 0x554
 8006148:	42ba      	cmp	r2, r7
 800614a:	bf9a      	itte	ls
 800614c:	0c82      	lsrls	r2, r0, #18
 800614e:	327c      	addls	r2, #124	; 0x7c
 8006150:	227e      	movhi	r2, #126	; 0x7e
 8006152:	1c57      	adds	r7, r2, #1
 8006154:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8006158:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800615c:	f8df c104 	ldr.w	ip, [pc, #260]	; 8006264 <_malloc_r+0x2ac>
 8006160:	45be      	cmp	lr, r7
 8006162:	d10d      	bne.n	8006180 <_malloc_r+0x1c8>
 8006164:	2001      	movs	r0, #1
 8006166:	1092      	asrs	r2, r2, #2
 8006168:	fa00 f202 	lsl.w	r2, r0, r2
 800616c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8006170:	4310      	orrs	r0, r2
 8006172:	f8cc 0004 	str.w	r0, [ip, #4]
 8006176:	4672      	mov	r2, lr
 8006178:	e009      	b.n	800618e <_malloc_r+0x1d6>
 800617a:	68bf      	ldr	r7, [r7, #8]
 800617c:	45be      	cmp	lr, r7
 800617e:	d004      	beq.n	800618a <_malloc_r+0x1d2>
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	f022 0203 	bic.w	r2, r2, #3
 8006186:	4290      	cmp	r0, r2
 8006188:	d3f7      	bcc.n	800617a <_malloc_r+0x1c2>
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	46be      	mov	lr, r7
 800618e:	60f2      	str	r2, [r6, #12]
 8006190:	f8c6 e008 	str.w	lr, [r6, #8]
 8006194:	6096      	str	r6, [r2, #8]
 8006196:	f8ce 600c 	str.w	r6, [lr, #12]
 800619a:	2001      	movs	r0, #1
 800619c:	109a      	asrs	r2, r3, #2
 800619e:	fa00 f202 	lsl.w	r2, r0, r2
 80061a2:	6868      	ldr	r0, [r5, #4]
 80061a4:	4282      	cmp	r2, r0
 80061a6:	d85f      	bhi.n	8006268 <_malloc_r+0x2b0>
 80061a8:	4202      	tst	r2, r0
 80061aa:	d106      	bne.n	80061ba <_malloc_r+0x202>
 80061ac:	f023 0303 	bic.w	r3, r3, #3
 80061b0:	0052      	lsls	r2, r2, #1
 80061b2:	4202      	tst	r2, r0
 80061b4:	f103 0304 	add.w	r3, r3, #4
 80061b8:	d0fa      	beq.n	80061b0 <_malloc_r+0x1f8>
 80061ba:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 80061be:	46c2      	mov	sl, r8
 80061c0:	469c      	mov	ip, r3
 80061c2:	f8da 600c 	ldr.w	r6, [sl, #12]
 80061c6:	4556      	cmp	r6, sl
 80061c8:	d02c      	beq.n	8006224 <_malloc_r+0x26c>
 80061ca:	6870      	ldr	r0, [r6, #4]
 80061cc:	68f7      	ldr	r7, [r6, #12]
 80061ce:	f020 0003 	bic.w	r0, r0, #3
 80061d2:	ebc4 0e00 	rsb	lr, r4, r0
 80061d6:	f1be 0f0f 	cmp.w	lr, #15
 80061da:	dd11      	ble.n	8006200 <_malloc_r+0x248>
 80061dc:	1933      	adds	r3, r6, r4
 80061de:	f044 0401 	orr.w	r4, r4, #1
 80061e2:	6074      	str	r4, [r6, #4]
 80061e4:	f856 2f08 	ldr.w	r2, [r6, #8]!
 80061e8:	60d7      	str	r7, [r2, #12]
 80061ea:	60ba      	str	r2, [r7, #8]
 80061ec:	f04e 0201 	orr.w	r2, lr, #1
 80061f0:	616b      	str	r3, [r5, #20]
 80061f2:	612b      	str	r3, [r5, #16]
 80061f4:	60d9      	str	r1, [r3, #12]
 80061f6:	6099      	str	r1, [r3, #8]
 80061f8:	605a      	str	r2, [r3, #4]
 80061fa:	f843 e00e 	str.w	lr, [r3, lr]
 80061fe:	e00b      	b.n	8006218 <_malloc_r+0x260>
 8006200:	f1be 0f00 	cmp.w	lr, #0
 8006204:	db0c      	blt.n	8006220 <_malloc_r+0x268>
 8006206:	1833      	adds	r3, r6, r0
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	605a      	str	r2, [r3, #4]
 8006210:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8006214:	60df      	str	r7, [r3, #12]
 8006216:	60bb      	str	r3, [r7, #8]
 8006218:	4648      	mov	r0, r9
 800621a:	f000 f8ee 	bl	80063fa <__malloc_unlock>
 800621e:	e0d8      	b.n	80063d2 <_malloc_r+0x41a>
 8006220:	463e      	mov	r6, r7
 8006222:	e7d0      	b.n	80061c6 <_malloc_r+0x20e>
 8006224:	f10c 0c01 	add.w	ip, ip, #1
 8006228:	f01c 0f03 	tst.w	ip, #3
 800622c:	f10a 0a08 	add.w	sl, sl, #8
 8006230:	d1c7      	bne.n	80061c2 <_malloc_r+0x20a>
 8006232:	0798      	lsls	r0, r3, #30
 8006234:	d104      	bne.n	8006240 <_malloc_r+0x288>
 8006236:	686b      	ldr	r3, [r5, #4]
 8006238:	ea23 0302 	bic.w	r3, r3, r2
 800623c:	606b      	str	r3, [r5, #4]
 800623e:	e005      	b.n	800624c <_malloc_r+0x294>
 8006240:	f858 0908 	ldr.w	r0, [r8], #-8
 8006244:	4580      	cmp	r8, r0
 8006246:	f103 33ff 	add.w	r3, r3, #4294967295
 800624a:	d0f2      	beq.n	8006232 <_malloc_r+0x27a>
 800624c:	6868      	ldr	r0, [r5, #4]
 800624e:	0052      	lsls	r2, r2, #1
 8006250:	4282      	cmp	r2, r0
 8006252:	d809      	bhi.n	8006268 <_malloc_r+0x2b0>
 8006254:	b142      	cbz	r2, 8006268 <_malloc_r+0x2b0>
 8006256:	4663      	mov	r3, ip
 8006258:	4202      	tst	r2, r0
 800625a:	d1ae      	bne.n	80061ba <_malloc_r+0x202>
 800625c:	3304      	adds	r3, #4
 800625e:	0052      	lsls	r2, r2, #1
 8006260:	e7fa      	b.n	8006258 <_malloc_r+0x2a0>
 8006262:	bf00      	nop
 8006264:	2000014c 	.word	0x2000014c
 8006268:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800626c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8006270:	f026 0603 	bic.w	r6, r6, #3
 8006274:	42b4      	cmp	r4, r6
 8006276:	d803      	bhi.n	8006280 <_malloc_r+0x2c8>
 8006278:	1b33      	subs	r3, r6, r4
 800627a:	2b0f      	cmp	r3, #15
 800627c:	f300 809c 	bgt.w	80063b8 <_malloc_r+0x400>
 8006280:	4a56      	ldr	r2, [pc, #344]	; (80063dc <_malloc_r+0x424>)
 8006282:	4957      	ldr	r1, [pc, #348]	; (80063e0 <_malloc_r+0x428>)
 8006284:	6812      	ldr	r2, [r2, #0]
 8006286:	6808      	ldr	r0, [r1, #0]
 8006288:	9101      	str	r1, [sp, #4]
 800628a:	f102 0810 	add.w	r8, r2, #16
 800628e:	4a55      	ldr	r2, [pc, #340]	; (80063e4 <_malloc_r+0x42c>)
 8006290:	9203      	str	r2, [sp, #12]
 8006292:	3001      	adds	r0, #1
 8006294:	bf18      	it	ne
 8006296:	f102 31ff 	addne.w	r1, r2, #4294967295
 800629a:	44a0      	add	r8, r4
 800629c:	bf1e      	ittt	ne
 800629e:	4488      	addne	r8, r1
 80062a0:	4251      	negne	r1, r2
 80062a2:	ea01 0808 	andne.w	r8, r1, r8
 80062a6:	eb0b 0306 	add.w	r3, fp, r6
 80062aa:	4641      	mov	r1, r8
 80062ac:	4648      	mov	r0, r9
 80062ae:	9302      	str	r3, [sp, #8]
 80062b0:	f000 fb7a 	bl	80069a8 <_sbrk_r>
 80062b4:	1c42      	adds	r2, r0, #1
 80062b6:	4607      	mov	r7, r0
 80062b8:	d06f      	beq.n	800639a <_malloc_r+0x3e2>
 80062ba:	9b02      	ldr	r3, [sp, #8]
 80062bc:	9a03      	ldr	r2, [sp, #12]
 80062be:	4283      	cmp	r3, r0
 80062c0:	d901      	bls.n	80062c6 <_malloc_r+0x30e>
 80062c2:	45ab      	cmp	fp, r5
 80062c4:	d169      	bne.n	800639a <_malloc_r+0x3e2>
 80062c6:	f8df a128 	ldr.w	sl, [pc, #296]	; 80063f0 <_malloc_r+0x438>
 80062ca:	f8df c128 	ldr.w	ip, [pc, #296]	; 80063f4 <_malloc_r+0x43c>
 80062ce:	f8da 0000 	ldr.w	r0, [sl]
 80062d2:	42bb      	cmp	r3, r7
 80062d4:	4440      	add	r0, r8
 80062d6:	f8ca 0000 	str.w	r0, [sl]
 80062da:	d108      	bne.n	80062ee <_malloc_r+0x336>
 80062dc:	ea13 0f0c 	tst.w	r3, ip
 80062e0:	d105      	bne.n	80062ee <_malloc_r+0x336>
 80062e2:	68ab      	ldr	r3, [r5, #8]
 80062e4:	4446      	add	r6, r8
 80062e6:	f046 0601 	orr.w	r6, r6, #1
 80062ea:	605e      	str	r6, [r3, #4]
 80062ec:	e049      	b.n	8006382 <_malloc_r+0x3ca>
 80062ee:	9901      	ldr	r1, [sp, #4]
 80062f0:	f8d1 e000 	ldr.w	lr, [r1]
 80062f4:	f1be 3fff 	cmp.w	lr, #4294967295
 80062f8:	bf15      	itete	ne
 80062fa:	1afb      	subne	r3, r7, r3
 80062fc:	4b38      	ldreq	r3, [pc, #224]	; (80063e0 <_malloc_r+0x428>)
 80062fe:	181b      	addne	r3, r3, r0
 8006300:	601f      	streq	r7, [r3, #0]
 8006302:	bf18      	it	ne
 8006304:	f8ca 3000 	strne.w	r3, [sl]
 8006308:	f017 0307 	ands.w	r3, r7, #7
 800630c:	bf1c      	itt	ne
 800630e:	f1c3 0308 	rsbne	r3, r3, #8
 8006312:	18ff      	addne	r7, r7, r3
 8006314:	44b8      	add	r8, r7
 8006316:	441a      	add	r2, r3
 8006318:	ea08 080c 	and.w	r8, r8, ip
 800631c:	ebc8 0802 	rsb	r8, r8, r2
 8006320:	4641      	mov	r1, r8
 8006322:	4648      	mov	r0, r9
 8006324:	f000 fb40 	bl	80069a8 <_sbrk_r>
 8006328:	1c43      	adds	r3, r0, #1
 800632a:	bf04      	itt	eq
 800632c:	4638      	moveq	r0, r7
 800632e:	f04f 0800 	moveq.w	r8, #0
 8006332:	f8da 3000 	ldr.w	r3, [sl]
 8006336:	60af      	str	r7, [r5, #8]
 8006338:	1bc2      	subs	r2, r0, r7
 800633a:	4442      	add	r2, r8
 800633c:	4443      	add	r3, r8
 800633e:	f042 0201 	orr.w	r2, r2, #1
 8006342:	45ab      	cmp	fp, r5
 8006344:	f8ca 3000 	str.w	r3, [sl]
 8006348:	607a      	str	r2, [r7, #4]
 800634a:	d01a      	beq.n	8006382 <_malloc_r+0x3ca>
 800634c:	2e0f      	cmp	r6, #15
 800634e:	d802      	bhi.n	8006356 <_malloc_r+0x39e>
 8006350:	2301      	movs	r3, #1
 8006352:	607b      	str	r3, [r7, #4]
 8006354:	e021      	b.n	800639a <_malloc_r+0x3e2>
 8006356:	f8db 3004 	ldr.w	r3, [fp, #4]
 800635a:	3e0c      	subs	r6, #12
 800635c:	f026 0607 	bic.w	r6, r6, #7
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	4333      	orrs	r3, r6
 8006366:	f8cb 3004 	str.w	r3, [fp, #4]
 800636a:	eb0b 0306 	add.w	r3, fp, r6
 800636e:	2205      	movs	r2, #5
 8006370:	2e0f      	cmp	r6, #15
 8006372:	605a      	str	r2, [r3, #4]
 8006374:	609a      	str	r2, [r3, #8]
 8006376:	d904      	bls.n	8006382 <_malloc_r+0x3ca>
 8006378:	f10b 0108 	add.w	r1, fp, #8
 800637c:	4648      	mov	r0, r9
 800637e:	f000 fc25 	bl	8006bcc <_free_r>
 8006382:	4a19      	ldr	r2, [pc, #100]	; (80063e8 <_malloc_r+0x430>)
 8006384:	f8da 3000 	ldr.w	r3, [sl]
 8006388:	6811      	ldr	r1, [r2, #0]
 800638a:	428b      	cmp	r3, r1
 800638c:	bf88      	it	hi
 800638e:	6013      	strhi	r3, [r2, #0]
 8006390:	4a16      	ldr	r2, [pc, #88]	; (80063ec <_malloc_r+0x434>)
 8006392:	6811      	ldr	r1, [r2, #0]
 8006394:	428b      	cmp	r3, r1
 8006396:	bf88      	it	hi
 8006398:	6013      	strhi	r3, [r2, #0]
 800639a:	68ab      	ldr	r3, [r5, #8]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	f022 0203 	bic.w	r2, r2, #3
 80063a2:	4294      	cmp	r4, r2
 80063a4:	eba2 0304 	sub.w	r3, r2, r4
 80063a8:	d801      	bhi.n	80063ae <_malloc_r+0x3f6>
 80063aa:	2b0f      	cmp	r3, #15
 80063ac:	dc04      	bgt.n	80063b8 <_malloc_r+0x400>
 80063ae:	4648      	mov	r0, r9
 80063b0:	f000 f823 	bl	80063fa <__malloc_unlock>
 80063b4:	2600      	movs	r6, #0
 80063b6:	e00c      	b.n	80063d2 <_malloc_r+0x41a>
 80063b8:	68ae      	ldr	r6, [r5, #8]
 80063ba:	f044 0201 	orr.w	r2, r4, #1
 80063be:	4434      	add	r4, r6
 80063c0:	f043 0301 	orr.w	r3, r3, #1
 80063c4:	6072      	str	r2, [r6, #4]
 80063c6:	60ac      	str	r4, [r5, #8]
 80063c8:	6063      	str	r3, [r4, #4]
 80063ca:	4648      	mov	r0, r9
 80063cc:	f000 f815 	bl	80063fa <__malloc_unlock>
 80063d0:	3608      	adds	r6, #8
 80063d2:	4630      	mov	r0, r6
 80063d4:	b005      	add	sp, #20
 80063d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063da:	bf00      	nop
 80063dc:	200042c8 	.word	0x200042c8
 80063e0:	20000558 	.word	0x20000558
 80063e4:	00000080 	.word	0x00000080
 80063e8:	200042c4 	.word	0x200042c4
 80063ec:	200042c0 	.word	0x200042c0
 80063f0:	200042cc 	.word	0x200042cc
 80063f4:	0000007f 	.word	0x0000007f

080063f8 <__malloc_lock>:
 80063f8:	4770      	bx	lr

080063fa <__malloc_unlock>:
 80063fa:	4770      	bx	lr

080063fc <_Balloc>:
 80063fc:	b570      	push	{r4, r5, r6, lr}
 80063fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006400:	4604      	mov	r4, r0
 8006402:	460e      	mov	r6, r1
 8006404:	b93d      	cbnz	r5, 8006416 <_Balloc+0x1a>
 8006406:	2010      	movs	r0, #16
 8006408:	f7ff fdce 	bl	8005fa8 <malloc>
 800640c:	6260      	str	r0, [r4, #36]	; 0x24
 800640e:	6045      	str	r5, [r0, #4]
 8006410:	6085      	str	r5, [r0, #8]
 8006412:	6005      	str	r5, [r0, #0]
 8006414:	60c5      	str	r5, [r0, #12]
 8006416:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006418:	68eb      	ldr	r3, [r5, #12]
 800641a:	b143      	cbz	r3, 800642e <_Balloc+0x32>
 800641c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006424:	b178      	cbz	r0, 8006446 <_Balloc+0x4a>
 8006426:	6802      	ldr	r2, [r0, #0]
 8006428:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800642c:	e017      	b.n	800645e <_Balloc+0x62>
 800642e:	2221      	movs	r2, #33	; 0x21
 8006430:	2104      	movs	r1, #4
 8006432:	4620      	mov	r0, r4
 8006434:	f000 fb47 	bl	8006ac6 <_calloc_r>
 8006438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800643a:	60e8      	str	r0, [r5, #12]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1ec      	bne.n	800641c <_Balloc+0x20>
 8006442:	2000      	movs	r0, #0
 8006444:	bd70      	pop	{r4, r5, r6, pc}
 8006446:	2101      	movs	r1, #1
 8006448:	fa01 f506 	lsl.w	r5, r1, r6
 800644c:	1d6a      	adds	r2, r5, #5
 800644e:	0092      	lsls	r2, r2, #2
 8006450:	4620      	mov	r0, r4
 8006452:	f000 fb38 	bl	8006ac6 <_calloc_r>
 8006456:	2800      	cmp	r0, #0
 8006458:	d0f3      	beq.n	8006442 <_Balloc+0x46>
 800645a:	6046      	str	r6, [r0, #4]
 800645c:	6085      	str	r5, [r0, #8]
 800645e:	2300      	movs	r3, #0
 8006460:	6103      	str	r3, [r0, #16]
 8006462:	60c3      	str	r3, [r0, #12]
 8006464:	bd70      	pop	{r4, r5, r6, pc}

08006466 <_Bfree>:
 8006466:	b570      	push	{r4, r5, r6, lr}
 8006468:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800646a:	4606      	mov	r6, r0
 800646c:	460d      	mov	r5, r1
 800646e:	b93c      	cbnz	r4, 8006480 <_Bfree+0x1a>
 8006470:	2010      	movs	r0, #16
 8006472:	f7ff fd99 	bl	8005fa8 <malloc>
 8006476:	6270      	str	r0, [r6, #36]	; 0x24
 8006478:	6044      	str	r4, [r0, #4]
 800647a:	6084      	str	r4, [r0, #8]
 800647c:	6004      	str	r4, [r0, #0]
 800647e:	60c4      	str	r4, [r0, #12]
 8006480:	b13d      	cbz	r5, 8006492 <_Bfree+0x2c>
 8006482:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006484:	686a      	ldr	r2, [r5, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800648c:	6029      	str	r1, [r5, #0]
 800648e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006492:	bd70      	pop	{r4, r5, r6, pc}

08006494 <__multadd>:
 8006494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006498:	690d      	ldr	r5, [r1, #16]
 800649a:	461f      	mov	r7, r3
 800649c:	4606      	mov	r6, r0
 800649e:	460c      	mov	r4, r1
 80064a0:	f101 0e14 	add.w	lr, r1, #20
 80064a4:	2300      	movs	r3, #0
 80064a6:	f8de 0000 	ldr.w	r0, [lr]
 80064aa:	b281      	uxth	r1, r0
 80064ac:	fb02 7101 	mla	r1, r2, r1, r7
 80064b0:	0c0f      	lsrs	r7, r1, #16
 80064b2:	0c00      	lsrs	r0, r0, #16
 80064b4:	fb02 7000 	mla	r0, r2, r0, r7
 80064b8:	b289      	uxth	r1, r1
 80064ba:	3301      	adds	r3, #1
 80064bc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80064c0:	429d      	cmp	r5, r3
 80064c2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80064c6:	f84e 1b04 	str.w	r1, [lr], #4
 80064ca:	dcec      	bgt.n	80064a6 <__multadd+0x12>
 80064cc:	b1d7      	cbz	r7, 8006504 <__multadd+0x70>
 80064ce:	68a3      	ldr	r3, [r4, #8]
 80064d0:	429d      	cmp	r5, r3
 80064d2:	db12      	blt.n	80064fa <__multadd+0x66>
 80064d4:	6861      	ldr	r1, [r4, #4]
 80064d6:	4630      	mov	r0, r6
 80064d8:	3101      	adds	r1, #1
 80064da:	f7ff ff8f 	bl	80063fc <_Balloc>
 80064de:	6922      	ldr	r2, [r4, #16]
 80064e0:	3202      	adds	r2, #2
 80064e2:	f104 010c 	add.w	r1, r4, #12
 80064e6:	4680      	mov	r8, r0
 80064e8:	0092      	lsls	r2, r2, #2
 80064ea:	300c      	adds	r0, #12
 80064ec:	f7fd ff2a 	bl	8004344 <memcpy>
 80064f0:	4621      	mov	r1, r4
 80064f2:	4630      	mov	r0, r6
 80064f4:	f7ff ffb7 	bl	8006466 <_Bfree>
 80064f8:	4644      	mov	r4, r8
 80064fa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064fe:	3501      	adds	r5, #1
 8006500:	615f      	str	r7, [r3, #20]
 8006502:	6125      	str	r5, [r4, #16]
 8006504:	4620      	mov	r0, r4
 8006506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800650a <__hi0bits>:
 800650a:	0c03      	lsrs	r3, r0, #16
 800650c:	041b      	lsls	r3, r3, #16
 800650e:	b913      	cbnz	r3, 8006516 <__hi0bits+0xc>
 8006510:	0400      	lsls	r0, r0, #16
 8006512:	2310      	movs	r3, #16
 8006514:	e000      	b.n	8006518 <__hi0bits+0xe>
 8006516:	2300      	movs	r3, #0
 8006518:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800651c:	bf04      	itt	eq
 800651e:	0200      	lsleq	r0, r0, #8
 8006520:	3308      	addeq	r3, #8
 8006522:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006526:	bf04      	itt	eq
 8006528:	0100      	lsleq	r0, r0, #4
 800652a:	3304      	addeq	r3, #4
 800652c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006530:	bf04      	itt	eq
 8006532:	0080      	lsleq	r0, r0, #2
 8006534:	3302      	addeq	r3, #2
 8006536:	2800      	cmp	r0, #0
 8006538:	db03      	blt.n	8006542 <__hi0bits+0x38>
 800653a:	0042      	lsls	r2, r0, #1
 800653c:	d503      	bpl.n	8006546 <__hi0bits+0x3c>
 800653e:	1c58      	adds	r0, r3, #1
 8006540:	4770      	bx	lr
 8006542:	4618      	mov	r0, r3
 8006544:	4770      	bx	lr
 8006546:	2020      	movs	r0, #32
 8006548:	4770      	bx	lr

0800654a <__lo0bits>:
 800654a:	6803      	ldr	r3, [r0, #0]
 800654c:	f013 0207 	ands.w	r2, r3, #7
 8006550:	d00b      	beq.n	800656a <__lo0bits+0x20>
 8006552:	07d9      	lsls	r1, r3, #31
 8006554:	d422      	bmi.n	800659c <__lo0bits+0x52>
 8006556:	079a      	lsls	r2, r3, #30
 8006558:	bf4b      	itete	mi
 800655a:	085b      	lsrmi	r3, r3, #1
 800655c:	089b      	lsrpl	r3, r3, #2
 800655e:	6003      	strmi	r3, [r0, #0]
 8006560:	6003      	strpl	r3, [r0, #0]
 8006562:	bf4c      	ite	mi
 8006564:	2001      	movmi	r0, #1
 8006566:	2002      	movpl	r0, #2
 8006568:	4770      	bx	lr
 800656a:	b299      	uxth	r1, r3
 800656c:	b909      	cbnz	r1, 8006572 <__lo0bits+0x28>
 800656e:	0c1b      	lsrs	r3, r3, #16
 8006570:	2210      	movs	r2, #16
 8006572:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006576:	bf04      	itt	eq
 8006578:	0a1b      	lsreq	r3, r3, #8
 800657a:	3208      	addeq	r2, #8
 800657c:	0719      	lsls	r1, r3, #28
 800657e:	bf04      	itt	eq
 8006580:	091b      	lsreq	r3, r3, #4
 8006582:	3204      	addeq	r2, #4
 8006584:	0799      	lsls	r1, r3, #30
 8006586:	bf04      	itt	eq
 8006588:	089b      	lsreq	r3, r3, #2
 800658a:	3202      	addeq	r2, #2
 800658c:	07d9      	lsls	r1, r3, #31
 800658e:	d402      	bmi.n	8006596 <__lo0bits+0x4c>
 8006590:	085b      	lsrs	r3, r3, #1
 8006592:	d005      	beq.n	80065a0 <__lo0bits+0x56>
 8006594:	3201      	adds	r2, #1
 8006596:	6003      	str	r3, [r0, #0]
 8006598:	4610      	mov	r0, r2
 800659a:	4770      	bx	lr
 800659c:	2000      	movs	r0, #0
 800659e:	4770      	bx	lr
 80065a0:	2020      	movs	r0, #32
 80065a2:	4770      	bx	lr

080065a4 <__i2b>:
 80065a4:	b510      	push	{r4, lr}
 80065a6:	460c      	mov	r4, r1
 80065a8:	2101      	movs	r1, #1
 80065aa:	f7ff ff27 	bl	80063fc <_Balloc>
 80065ae:	2201      	movs	r2, #1
 80065b0:	6144      	str	r4, [r0, #20]
 80065b2:	6102      	str	r2, [r0, #16]
 80065b4:	bd10      	pop	{r4, pc}

080065b6 <__multiply>:
 80065b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ba:	4614      	mov	r4, r2
 80065bc:	690a      	ldr	r2, [r1, #16]
 80065be:	6923      	ldr	r3, [r4, #16]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	bfb8      	it	lt
 80065c4:	460b      	movlt	r3, r1
 80065c6:	4688      	mov	r8, r1
 80065c8:	bfbc      	itt	lt
 80065ca:	46a0      	movlt	r8, r4
 80065cc:	461c      	movlt	r4, r3
 80065ce:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80065d2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80065d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80065da:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80065de:	eb07 0609 	add.w	r6, r7, r9
 80065e2:	429e      	cmp	r6, r3
 80065e4:	bfc8      	it	gt
 80065e6:	3101      	addgt	r1, #1
 80065e8:	f7ff ff08 	bl	80063fc <_Balloc>
 80065ec:	f100 0514 	add.w	r5, r0, #20
 80065f0:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80065f4:	462b      	mov	r3, r5
 80065f6:	2200      	movs	r2, #0
 80065f8:	4563      	cmp	r3, ip
 80065fa:	d202      	bcs.n	8006602 <__multiply+0x4c>
 80065fc:	f843 2b04 	str.w	r2, [r3], #4
 8006600:	e7fa      	b.n	80065f8 <__multiply+0x42>
 8006602:	f104 0214 	add.w	r2, r4, #20
 8006606:	f108 0114 	add.w	r1, r8, #20
 800660a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800660e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	9b00      	ldr	r3, [sp, #0]
 8006616:	9201      	str	r2, [sp, #4]
 8006618:	4293      	cmp	r3, r2
 800661a:	d957      	bls.n	80066cc <__multiply+0x116>
 800661c:	f8b2 b000 	ldrh.w	fp, [r2]
 8006620:	f1bb 0f00 	cmp.w	fp, #0
 8006624:	d023      	beq.n	800666e <__multiply+0xb8>
 8006626:	4689      	mov	r9, r1
 8006628:	46ae      	mov	lr, r5
 800662a:	f04f 0800 	mov.w	r8, #0
 800662e:	f859 4b04 	ldr.w	r4, [r9], #4
 8006632:	f8be a000 	ldrh.w	sl, [lr]
 8006636:	b2a3      	uxth	r3, r4
 8006638:	fb0b a303 	mla	r3, fp, r3, sl
 800663c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006640:	f8de 4000 	ldr.w	r4, [lr]
 8006644:	4443      	add	r3, r8
 8006646:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800664a:	fb0b 840a 	mla	r4, fp, sl, r8
 800664e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006652:	46f2      	mov	sl, lr
 8006654:	b29b      	uxth	r3, r3
 8006656:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800665a:	454f      	cmp	r7, r9
 800665c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006660:	f84a 3b04 	str.w	r3, [sl], #4
 8006664:	d901      	bls.n	800666a <__multiply+0xb4>
 8006666:	46d6      	mov	lr, sl
 8006668:	e7e1      	b.n	800662e <__multiply+0x78>
 800666a:	f8ce 8004 	str.w	r8, [lr, #4]
 800666e:	9b01      	ldr	r3, [sp, #4]
 8006670:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006674:	3204      	adds	r2, #4
 8006676:	f1ba 0f00 	cmp.w	sl, #0
 800667a:	d021      	beq.n	80066c0 <__multiply+0x10a>
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	462c      	mov	r4, r5
 8006680:	4689      	mov	r9, r1
 8006682:	f04f 0800 	mov.w	r8, #0
 8006686:	f8b9 e000 	ldrh.w	lr, [r9]
 800668a:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800668e:	fb0a be0e 	mla	lr, sl, lr, fp
 8006692:	44f0      	add	r8, lr
 8006694:	46a3      	mov	fp, r4
 8006696:	b29b      	uxth	r3, r3
 8006698:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800669c:	f84b 3b04 	str.w	r3, [fp], #4
 80066a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80066a4:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80066a8:	0c1b      	lsrs	r3, r3, #16
 80066aa:	fb0a e303 	mla	r3, sl, r3, lr
 80066ae:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80066b2:	454f      	cmp	r7, r9
 80066b4:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80066b8:	d901      	bls.n	80066be <__multiply+0x108>
 80066ba:	465c      	mov	r4, fp
 80066bc:	e7e3      	b.n	8006686 <__multiply+0xd0>
 80066be:	6063      	str	r3, [r4, #4]
 80066c0:	3504      	adds	r5, #4
 80066c2:	e7a7      	b.n	8006614 <__multiply+0x5e>
 80066c4:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 80066c8:	b913      	cbnz	r3, 80066d0 <__multiply+0x11a>
 80066ca:	3e01      	subs	r6, #1
 80066cc:	2e00      	cmp	r6, #0
 80066ce:	dcf9      	bgt.n	80066c4 <__multiply+0x10e>
 80066d0:	6106      	str	r6, [r0, #16]
 80066d2:	b003      	add	sp, #12
 80066d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080066d8 <__pow5mult>:
 80066d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066dc:	4615      	mov	r5, r2
 80066de:	f012 0203 	ands.w	r2, r2, #3
 80066e2:	4606      	mov	r6, r0
 80066e4:	460f      	mov	r7, r1
 80066e6:	d007      	beq.n	80066f8 <__pow5mult+0x20>
 80066e8:	3a01      	subs	r2, #1
 80066ea:	4c21      	ldr	r4, [pc, #132]	; (8006770 <__pow5mult+0x98>)
 80066ec:	2300      	movs	r3, #0
 80066ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066f2:	f7ff fecf 	bl	8006494 <__multadd>
 80066f6:	4607      	mov	r7, r0
 80066f8:	10ad      	asrs	r5, r5, #2
 80066fa:	d036      	beq.n	800676a <__pow5mult+0x92>
 80066fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80066fe:	b93c      	cbnz	r4, 8006710 <__pow5mult+0x38>
 8006700:	2010      	movs	r0, #16
 8006702:	f7ff fc51 	bl	8005fa8 <malloc>
 8006706:	6270      	str	r0, [r6, #36]	; 0x24
 8006708:	6044      	str	r4, [r0, #4]
 800670a:	6084      	str	r4, [r0, #8]
 800670c:	6004      	str	r4, [r0, #0]
 800670e:	60c4      	str	r4, [r0, #12]
 8006710:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006714:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006718:	b94c      	cbnz	r4, 800672e <__pow5mult+0x56>
 800671a:	f240 2171 	movw	r1, #625	; 0x271
 800671e:	4630      	mov	r0, r6
 8006720:	f7ff ff40 	bl	80065a4 <__i2b>
 8006724:	2300      	movs	r3, #0
 8006726:	f8c8 0008 	str.w	r0, [r8, #8]
 800672a:	4604      	mov	r4, r0
 800672c:	6003      	str	r3, [r0, #0]
 800672e:	f04f 0800 	mov.w	r8, #0
 8006732:	07eb      	lsls	r3, r5, #31
 8006734:	d50a      	bpl.n	800674c <__pow5mult+0x74>
 8006736:	4639      	mov	r1, r7
 8006738:	4622      	mov	r2, r4
 800673a:	4630      	mov	r0, r6
 800673c:	f7ff ff3b 	bl	80065b6 <__multiply>
 8006740:	4639      	mov	r1, r7
 8006742:	4681      	mov	r9, r0
 8006744:	4630      	mov	r0, r6
 8006746:	f7ff fe8e 	bl	8006466 <_Bfree>
 800674a:	464f      	mov	r7, r9
 800674c:	106d      	asrs	r5, r5, #1
 800674e:	d00c      	beq.n	800676a <__pow5mult+0x92>
 8006750:	6820      	ldr	r0, [r4, #0]
 8006752:	b108      	cbz	r0, 8006758 <__pow5mult+0x80>
 8006754:	4604      	mov	r4, r0
 8006756:	e7ec      	b.n	8006732 <__pow5mult+0x5a>
 8006758:	4622      	mov	r2, r4
 800675a:	4621      	mov	r1, r4
 800675c:	4630      	mov	r0, r6
 800675e:	f7ff ff2a 	bl	80065b6 <__multiply>
 8006762:	6020      	str	r0, [r4, #0]
 8006764:	f8c0 8000 	str.w	r8, [r0]
 8006768:	e7f4      	b.n	8006754 <__pow5mult+0x7c>
 800676a:	4638      	mov	r0, r7
 800676c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006770:	080073d0 	.word	0x080073d0

08006774 <__lshift>:
 8006774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006778:	460c      	mov	r4, r1
 800677a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800677e:	6926      	ldr	r6, [r4, #16]
 8006780:	6849      	ldr	r1, [r1, #4]
 8006782:	68a3      	ldr	r3, [r4, #8]
 8006784:	4456      	add	r6, sl
 8006786:	4607      	mov	r7, r0
 8006788:	4691      	mov	r9, r2
 800678a:	1c75      	adds	r5, r6, #1
 800678c:	42ab      	cmp	r3, r5
 800678e:	da02      	bge.n	8006796 <__lshift+0x22>
 8006790:	3101      	adds	r1, #1
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	e7fa      	b.n	800678c <__lshift+0x18>
 8006796:	4638      	mov	r0, r7
 8006798:	f7ff fe30 	bl	80063fc <_Balloc>
 800679c:	2300      	movs	r3, #0
 800679e:	4680      	mov	r8, r0
 80067a0:	f100 0114 	add.w	r1, r0, #20
 80067a4:	461a      	mov	r2, r3
 80067a6:	4553      	cmp	r3, sl
 80067a8:	da03      	bge.n	80067b2 <__lshift+0x3e>
 80067aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80067ae:	3301      	adds	r3, #1
 80067b0:	e7f9      	b.n	80067a6 <__lshift+0x32>
 80067b2:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80067b6:	6920      	ldr	r0, [r4, #16]
 80067b8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80067bc:	f019 091f 	ands.w	r9, r9, #31
 80067c0:	f104 0114 	add.w	r1, r4, #20
 80067c4:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80067c8:	d014      	beq.n	80067f4 <__lshift+0x80>
 80067ca:	f1c9 0c20 	rsb	ip, r9, #32
 80067ce:	2200      	movs	r2, #0
 80067d0:	6808      	ldr	r0, [r1, #0]
 80067d2:	fa00 f009 	lsl.w	r0, r0, r9
 80067d6:	4302      	orrs	r2, r0
 80067d8:	469a      	mov	sl, r3
 80067da:	f843 2b04 	str.w	r2, [r3], #4
 80067de:	f851 2b04 	ldr.w	r2, [r1], #4
 80067e2:	458e      	cmp	lr, r1
 80067e4:	fa22 f20c 	lsr.w	r2, r2, ip
 80067e8:	d8f2      	bhi.n	80067d0 <__lshift+0x5c>
 80067ea:	f8ca 2004 	str.w	r2, [sl, #4]
 80067ee:	b142      	cbz	r2, 8006802 <__lshift+0x8e>
 80067f0:	1cb5      	adds	r5, r6, #2
 80067f2:	e006      	b.n	8006802 <__lshift+0x8e>
 80067f4:	3b04      	subs	r3, #4
 80067f6:	f851 2b04 	ldr.w	r2, [r1], #4
 80067fa:	f843 2f04 	str.w	r2, [r3, #4]!
 80067fe:	458e      	cmp	lr, r1
 8006800:	d8f9      	bhi.n	80067f6 <__lshift+0x82>
 8006802:	3d01      	subs	r5, #1
 8006804:	4638      	mov	r0, r7
 8006806:	f8c8 5010 	str.w	r5, [r8, #16]
 800680a:	4621      	mov	r1, r4
 800680c:	f7ff fe2b 	bl	8006466 <_Bfree>
 8006810:	4640      	mov	r0, r8
 8006812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006816 <__mcmp>:
 8006816:	6903      	ldr	r3, [r0, #16]
 8006818:	690a      	ldr	r2, [r1, #16]
 800681a:	1a9b      	subs	r3, r3, r2
 800681c:	b510      	push	{r4, lr}
 800681e:	d111      	bne.n	8006844 <__mcmp+0x2e>
 8006820:	0092      	lsls	r2, r2, #2
 8006822:	3014      	adds	r0, #20
 8006824:	3114      	adds	r1, #20
 8006826:	1883      	adds	r3, r0, r2
 8006828:	440a      	add	r2, r1
 800682a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800682e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006832:	428c      	cmp	r4, r1
 8006834:	d002      	beq.n	800683c <__mcmp+0x26>
 8006836:	d307      	bcc.n	8006848 <__mcmp+0x32>
 8006838:	2001      	movs	r0, #1
 800683a:	bd10      	pop	{r4, pc}
 800683c:	4298      	cmp	r0, r3
 800683e:	d3f4      	bcc.n	800682a <__mcmp+0x14>
 8006840:	2000      	movs	r0, #0
 8006842:	bd10      	pop	{r4, pc}
 8006844:	4618      	mov	r0, r3
 8006846:	bd10      	pop	{r4, pc}
 8006848:	f04f 30ff 	mov.w	r0, #4294967295
 800684c:	bd10      	pop	{r4, pc}

0800684e <__mdiff>:
 800684e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006852:	460c      	mov	r4, r1
 8006854:	4607      	mov	r7, r0
 8006856:	4611      	mov	r1, r2
 8006858:	4620      	mov	r0, r4
 800685a:	4615      	mov	r5, r2
 800685c:	f7ff ffdb 	bl	8006816 <__mcmp>
 8006860:	1e06      	subs	r6, r0, #0
 8006862:	d108      	bne.n	8006876 <__mdiff+0x28>
 8006864:	4631      	mov	r1, r6
 8006866:	4638      	mov	r0, r7
 8006868:	f7ff fdc8 	bl	80063fc <_Balloc>
 800686c:	2301      	movs	r3, #1
 800686e:	6103      	str	r3, [r0, #16]
 8006870:	6146      	str	r6, [r0, #20]
 8006872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006876:	bfbc      	itt	lt
 8006878:	4623      	movlt	r3, r4
 800687a:	462c      	movlt	r4, r5
 800687c:	4638      	mov	r0, r7
 800687e:	6861      	ldr	r1, [r4, #4]
 8006880:	bfba      	itte	lt
 8006882:	461d      	movlt	r5, r3
 8006884:	2601      	movlt	r6, #1
 8006886:	2600      	movge	r6, #0
 8006888:	f7ff fdb8 	bl	80063fc <_Balloc>
 800688c:	692b      	ldr	r3, [r5, #16]
 800688e:	60c6      	str	r6, [r0, #12]
 8006890:	6926      	ldr	r6, [r4, #16]
 8006892:	f105 0914 	add.w	r9, r5, #20
 8006896:	3414      	adds	r4, #20
 8006898:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 800689c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80068a0:	f100 0514 	add.w	r5, r0, #20
 80068a4:	f04f 0c00 	mov.w	ip, #0
 80068a8:	f854 3b04 	ldr.w	r3, [r4], #4
 80068ac:	f859 2b04 	ldr.w	r2, [r9], #4
 80068b0:	fa1c f183 	uxtah	r1, ip, r3
 80068b4:	fa1f fe82 	uxth.w	lr, r2
 80068b8:	0c12      	lsrs	r2, r2, #16
 80068ba:	ebce 0101 	rsb	r1, lr, r1
 80068be:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 80068c2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80068c6:	b289      	uxth	r1, r1
 80068c8:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80068cc:	45c8      	cmp	r8, r9
 80068ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80068d2:	46a6      	mov	lr, r4
 80068d4:	f845 3b04 	str.w	r3, [r5], #4
 80068d8:	d8e6      	bhi.n	80068a8 <__mdiff+0x5a>
 80068da:	45be      	cmp	lr, r7
 80068dc:	d20e      	bcs.n	80068fc <__mdiff+0xae>
 80068de:	f85e 1b04 	ldr.w	r1, [lr], #4
 80068e2:	fa1c f281 	uxtah	r2, ip, r1
 80068e6:	1413      	asrs	r3, r2, #16
 80068e8:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 80068ec:	b292      	uxth	r2, r2
 80068ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80068f2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80068f6:	f845 2b04 	str.w	r2, [r5], #4
 80068fa:	e7ee      	b.n	80068da <__mdiff+0x8c>
 80068fc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006900:	b90b      	cbnz	r3, 8006906 <__mdiff+0xb8>
 8006902:	3e01      	subs	r6, #1
 8006904:	e7fa      	b.n	80068fc <__mdiff+0xae>
 8006906:	6106      	str	r6, [r0, #16]
 8006908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800690c <__d2b>:
 800690c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006910:	460e      	mov	r6, r1
 8006912:	2101      	movs	r1, #1
 8006914:	ec59 8b10 	vmov	r8, r9, d0
 8006918:	4615      	mov	r5, r2
 800691a:	f7ff fd6f 	bl	80063fc <_Balloc>
 800691e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006922:	4607      	mov	r7, r0
 8006924:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006928:	b10c      	cbz	r4, 800692e <__d2b+0x22>
 800692a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800692e:	9301      	str	r3, [sp, #4]
 8006930:	f1b8 0f00 	cmp.w	r8, #0
 8006934:	d019      	beq.n	800696a <__d2b+0x5e>
 8006936:	a802      	add	r0, sp, #8
 8006938:	f840 8d08 	str.w	r8, [r0, #-8]!
 800693c:	f7ff fe05 	bl	800654a <__lo0bits>
 8006940:	9b00      	ldr	r3, [sp, #0]
 8006942:	b148      	cbz	r0, 8006958 <__d2b+0x4c>
 8006944:	9a01      	ldr	r2, [sp, #4]
 8006946:	f1c0 0120 	rsb	r1, r0, #32
 800694a:	fa02 f101 	lsl.w	r1, r2, r1
 800694e:	430b      	orrs	r3, r1
 8006950:	40c2      	lsrs	r2, r0
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	9201      	str	r2, [sp, #4]
 8006956:	e000      	b.n	800695a <__d2b+0x4e>
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	9b01      	ldr	r3, [sp, #4]
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	2b00      	cmp	r3, #0
 8006960:	bf14      	ite	ne
 8006962:	2102      	movne	r1, #2
 8006964:	2101      	moveq	r1, #1
 8006966:	6139      	str	r1, [r7, #16]
 8006968:	e007      	b.n	800697a <__d2b+0x6e>
 800696a:	a801      	add	r0, sp, #4
 800696c:	f7ff fded 	bl	800654a <__lo0bits>
 8006970:	9b01      	ldr	r3, [sp, #4]
 8006972:	617b      	str	r3, [r7, #20]
 8006974:	2101      	movs	r1, #1
 8006976:	6139      	str	r1, [r7, #16]
 8006978:	3020      	adds	r0, #32
 800697a:	b134      	cbz	r4, 800698a <__d2b+0x7e>
 800697c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006980:	4404      	add	r4, r0
 8006982:	6034      	str	r4, [r6, #0]
 8006984:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006988:	e009      	b.n	800699e <__d2b+0x92>
 800698a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800698e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006992:	6030      	str	r0, [r6, #0]
 8006994:	6918      	ldr	r0, [r3, #16]
 8006996:	f7ff fdb8 	bl	800650a <__hi0bits>
 800699a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800699e:	6028      	str	r0, [r5, #0]
 80069a0:	4638      	mov	r0, r7
 80069a2:	b003      	add	sp, #12
 80069a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080069a8 <_sbrk_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	4c06      	ldr	r4, [pc, #24]	; (80069c4 <_sbrk_r+0x1c>)
 80069ac:	2300      	movs	r3, #0
 80069ae:	4605      	mov	r5, r0
 80069b0:	4608      	mov	r0, r1
 80069b2:	6023      	str	r3, [r4, #0]
 80069b4:	f000 fb8c 	bl	80070d0 <_sbrk>
 80069b8:	1c43      	adds	r3, r0, #1
 80069ba:	d102      	bne.n	80069c2 <_sbrk_r+0x1a>
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	b103      	cbz	r3, 80069c2 <_sbrk_r+0x1a>
 80069c0:	602b      	str	r3, [r5, #0]
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	20004764 	.word	0x20004764

080069c8 <__ssprint_r>:
 80069c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069cc:	4693      	mov	fp, r2
 80069ce:	6892      	ldr	r2, [r2, #8]
 80069d0:	4681      	mov	r9, r0
 80069d2:	460c      	mov	r4, r1
 80069d4:	b34a      	cbz	r2, 8006a2a <__ssprint_r+0x62>
 80069d6:	2300      	movs	r3, #0
 80069d8:	f8db a000 	ldr.w	sl, [fp]
 80069dc:	9301      	str	r3, [sp, #4]
 80069de:	461f      	mov	r7, r3
 80069e0:	e006      	b.n	80069f0 <__ssprint_r+0x28>
 80069e2:	f8da 3000 	ldr.w	r3, [sl]
 80069e6:	f8da 7004 	ldr.w	r7, [sl, #4]
 80069ea:	9301      	str	r3, [sp, #4]
 80069ec:	f10a 0a08 	add.w	sl, sl, #8
 80069f0:	2f00      	cmp	r7, #0
 80069f2:	d0f6      	beq.n	80069e2 <__ssprint_r+0x1a>
 80069f4:	68a6      	ldr	r6, [r4, #8]
 80069f6:	42b7      	cmp	r7, r6
 80069f8:	d360      	bcc.n	8006abc <__ssprint_r+0xf4>
 80069fa:	89a0      	ldrh	r0, [r4, #12]
 80069fc:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8006a00:	d117      	bne.n	8006a32 <__ssprint_r+0x6a>
 8006a02:	42b7      	cmp	r7, r6
 8006a04:	d35a      	bcc.n	8006abc <__ssprint_r+0xf4>
 8006a06:	4632      	mov	r2, r6
 8006a08:	9901      	ldr	r1, [sp, #4]
 8006a0a:	6820      	ldr	r0, [r4, #0]
 8006a0c:	f000 f99c 	bl	8006d48 <memmove>
 8006a10:	68a2      	ldr	r2, [r4, #8]
 8006a12:	1b92      	subs	r2, r2, r6
 8006a14:	60a2      	str	r2, [r4, #8]
 8006a16:	6822      	ldr	r2, [r4, #0]
 8006a18:	4416      	add	r6, r2
 8006a1a:	f8db 2008 	ldr.w	r2, [fp, #8]
 8006a1e:	6026      	str	r6, [r4, #0]
 8006a20:	1bd7      	subs	r7, r2, r7
 8006a22:	f8cb 7008 	str.w	r7, [fp, #8]
 8006a26:	2f00      	cmp	r7, #0
 8006a28:	d1db      	bne.n	80069e2 <__ssprint_r+0x1a>
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	f8cb 0004 	str.w	r0, [fp, #4]
 8006a30:	e046      	b.n	8006ac0 <__ssprint_r+0xf8>
 8006a32:	6825      	ldr	r5, [r4, #0]
 8006a34:	6921      	ldr	r1, [r4, #16]
 8006a36:	ebc1 0805 	rsb	r8, r1, r5
 8006a3a:	f108 0201 	add.w	r2, r8, #1
 8006a3e:	6965      	ldr	r5, [r4, #20]
 8006a40:	443a      	add	r2, r7
 8006a42:	2302      	movs	r3, #2
 8006a44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a48:	fb95 f5f3 	sdiv	r5, r5, r3
 8006a4c:	4295      	cmp	r5, r2
 8006a4e:	bf38      	it	cc
 8006a50:	4615      	movcc	r5, r2
 8006a52:	0543      	lsls	r3, r0, #21
 8006a54:	d510      	bpl.n	8006a78 <__ssprint_r+0xb0>
 8006a56:	4629      	mov	r1, r5
 8006a58:	4648      	mov	r0, r9
 8006a5a:	f7ff faad 	bl	8005fb8 <_malloc_r>
 8006a5e:	4606      	mov	r6, r0
 8006a60:	b1a0      	cbz	r0, 8006a8c <__ssprint_r+0xc4>
 8006a62:	4642      	mov	r2, r8
 8006a64:	6921      	ldr	r1, [r4, #16]
 8006a66:	f7fd fc6d 	bl	8004344 <memcpy>
 8006a6a:	89a2      	ldrh	r2, [r4, #12]
 8006a6c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8006a70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a74:	81a2      	strh	r2, [r4, #12]
 8006a76:	e018      	b.n	8006aaa <__ssprint_r+0xe2>
 8006a78:	462a      	mov	r2, r5
 8006a7a:	4648      	mov	r0, r9
 8006a7c:	f000 f980 	bl	8006d80 <_realloc_r>
 8006a80:	4606      	mov	r6, r0
 8006a82:	b990      	cbnz	r0, 8006aaa <__ssprint_r+0xe2>
 8006a84:	6921      	ldr	r1, [r4, #16]
 8006a86:	4648      	mov	r0, r9
 8006a88:	f000 f8a0 	bl	8006bcc <_free_r>
 8006a8c:	220c      	movs	r2, #12
 8006a8e:	f8c9 2000 	str.w	r2, [r9]
 8006a92:	89a2      	ldrh	r2, [r4, #12]
 8006a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a98:	81a2      	strh	r2, [r4, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8cb 2008 	str.w	r2, [fp, #8]
 8006aa0:	f8cb 2004 	str.w	r2, [fp, #4]
 8006aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa8:	e00a      	b.n	8006ac0 <__ssprint_r+0xf8>
 8006aaa:	6126      	str	r6, [r4, #16]
 8006aac:	6165      	str	r5, [r4, #20]
 8006aae:	4446      	add	r6, r8
 8006ab0:	ebc8 0505 	rsb	r5, r8, r5
 8006ab4:	6026      	str	r6, [r4, #0]
 8006ab6:	60a5      	str	r5, [r4, #8]
 8006ab8:	463e      	mov	r6, r7
 8006aba:	e7a2      	b.n	8006a02 <__ssprint_r+0x3a>
 8006abc:	463e      	mov	r6, r7
 8006abe:	e7a2      	b.n	8006a06 <__ssprint_r+0x3e>
 8006ac0:	b003      	add	sp, #12
 8006ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ac6 <_calloc_r>:
 8006ac6:	b510      	push	{r4, lr}
 8006ac8:	4351      	muls	r1, r2
 8006aca:	f7ff fa75 	bl	8005fb8 <_malloc_r>
 8006ace:	4604      	mov	r4, r0
 8006ad0:	b320      	cbz	r0, 8006b1c <_calloc_r+0x56>
 8006ad2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006ad6:	f022 0203 	bic.w	r2, r2, #3
 8006ada:	3a04      	subs	r2, #4
 8006adc:	2a24      	cmp	r2, #36	; 0x24
 8006ade:	d81a      	bhi.n	8006b16 <_calloc_r+0x50>
 8006ae0:	2a13      	cmp	r2, #19
 8006ae2:	d912      	bls.n	8006b0a <_calloc_r+0x44>
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	2a1b      	cmp	r2, #27
 8006ae8:	6001      	str	r1, [r0, #0]
 8006aea:	6041      	str	r1, [r0, #4]
 8006aec:	d802      	bhi.n	8006af4 <_calloc_r+0x2e>
 8006aee:	f100 0308 	add.w	r3, r0, #8
 8006af2:	e00b      	b.n	8006b0c <_calloc_r+0x46>
 8006af4:	2a24      	cmp	r2, #36	; 0x24
 8006af6:	6081      	str	r1, [r0, #8]
 8006af8:	60c1      	str	r1, [r0, #12]
 8006afa:	bf11      	iteee	ne
 8006afc:	f100 0310 	addne.w	r3, r0, #16
 8006b00:	6101      	streq	r1, [r0, #16]
 8006b02:	f100 0318 	addeq.w	r3, r0, #24
 8006b06:	6141      	streq	r1, [r0, #20]
 8006b08:	e000      	b.n	8006b0c <_calloc_r+0x46>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]
 8006b10:	605a      	str	r2, [r3, #4]
 8006b12:	609a      	str	r2, [r3, #8]
 8006b14:	e002      	b.n	8006b1c <_calloc_r+0x56>
 8006b16:	2100      	movs	r1, #0
 8006b18:	f7fd fc1f 	bl	800435a <memset>
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	bd10      	pop	{r4, pc}

08006b20 <_malloc_trim_r>:
 8006b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b24:	4f25      	ldr	r7, [pc, #148]	; (8006bbc <_malloc_trim_r+0x9c>)
 8006b26:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8006bc8 <_malloc_trim_r+0xa8>
 8006b2a:	4689      	mov	r9, r1
 8006b2c:	4606      	mov	r6, r0
 8006b2e:	f7ff fc63 	bl	80063f8 <__malloc_lock>
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	685d      	ldr	r5, [r3, #4]
 8006b36:	f1a8 0411 	sub.w	r4, r8, #17
 8006b3a:	f025 0503 	bic.w	r5, r5, #3
 8006b3e:	442c      	add	r4, r5
 8006b40:	ebc9 0404 	rsb	r4, r9, r4
 8006b44:	fbb4 f4f8 	udiv	r4, r4, r8
 8006b48:	3c01      	subs	r4, #1
 8006b4a:	fb08 f404 	mul.w	r4, r8, r4
 8006b4e:	4544      	cmp	r4, r8
 8006b50:	da05      	bge.n	8006b5e <_malloc_trim_r+0x3e>
 8006b52:	4630      	mov	r0, r6
 8006b54:	f7ff fc51 	bl	80063fa <__malloc_unlock>
 8006b58:	2000      	movs	r0, #0
 8006b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b5e:	2100      	movs	r1, #0
 8006b60:	4630      	mov	r0, r6
 8006b62:	f7ff ff21 	bl	80069a8 <_sbrk_r>
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	442b      	add	r3, r5
 8006b6a:	4298      	cmp	r0, r3
 8006b6c:	d1f1      	bne.n	8006b52 <_malloc_trim_r+0x32>
 8006b6e:	4261      	negs	r1, r4
 8006b70:	4630      	mov	r0, r6
 8006b72:	f7ff ff19 	bl	80069a8 <_sbrk_r>
 8006b76:	3001      	adds	r0, #1
 8006b78:	d110      	bne.n	8006b9c <_malloc_trim_r+0x7c>
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	f7ff ff13 	bl	80069a8 <_sbrk_r>
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	1a83      	subs	r3, r0, r2
 8006b86:	2b0f      	cmp	r3, #15
 8006b88:	dde3      	ble.n	8006b52 <_malloc_trim_r+0x32>
 8006b8a:	490d      	ldr	r1, [pc, #52]	; (8006bc0 <_malloc_trim_r+0xa0>)
 8006b8c:	6809      	ldr	r1, [r1, #0]
 8006b8e:	1a40      	subs	r0, r0, r1
 8006b90:	490c      	ldr	r1, [pc, #48]	; (8006bc4 <_malloc_trim_r+0xa4>)
 8006b92:	f043 0301 	orr.w	r3, r3, #1
 8006b96:	6008      	str	r0, [r1, #0]
 8006b98:	6053      	str	r3, [r2, #4]
 8006b9a:	e7da      	b.n	8006b52 <_malloc_trim_r+0x32>
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	4a09      	ldr	r2, [pc, #36]	; (8006bc4 <_malloc_trim_r+0xa4>)
 8006ba0:	1b2d      	subs	r5, r5, r4
 8006ba2:	f045 0501 	orr.w	r5, r5, #1
 8006ba6:	605d      	str	r5, [r3, #4]
 8006ba8:	6813      	ldr	r3, [r2, #0]
 8006baa:	4630      	mov	r0, r6
 8006bac:	1b1c      	subs	r4, r3, r4
 8006bae:	6014      	str	r4, [r2, #0]
 8006bb0:	f7ff fc23 	bl	80063fa <__malloc_unlock>
 8006bb4:	2001      	movs	r0, #1
 8006bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bba:	bf00      	nop
 8006bbc:	2000014c 	.word	0x2000014c
 8006bc0:	20000558 	.word	0x20000558
 8006bc4:	200042cc 	.word	0x200042cc
 8006bc8:	00000080 	.word	0x00000080

08006bcc <_free_r>:
 8006bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd0:	4604      	mov	r4, r0
 8006bd2:	4688      	mov	r8, r1
 8006bd4:	2900      	cmp	r1, #0
 8006bd6:	f000 80ad 	beq.w	8006d34 <_free_r+0x168>
 8006bda:	f7ff fc0d 	bl	80063f8 <__malloc_lock>
 8006bde:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8006be2:	4d55      	ldr	r5, [pc, #340]	; (8006d38 <_free_r+0x16c>)
 8006be4:	f022 0001 	bic.w	r0, r2, #1
 8006be8:	f1a8 0308 	sub.w	r3, r8, #8
 8006bec:	181f      	adds	r7, r3, r0
 8006bee:	68a9      	ldr	r1, [r5, #8]
 8006bf0:	687e      	ldr	r6, [r7, #4]
 8006bf2:	428f      	cmp	r7, r1
 8006bf4:	f026 0603 	bic.w	r6, r6, #3
 8006bf8:	f002 0201 	and.w	r2, r2, #1
 8006bfc:	d11b      	bne.n	8006c36 <_free_r+0x6a>
 8006bfe:	4430      	add	r0, r6
 8006c00:	b93a      	cbnz	r2, 8006c12 <_free_r+0x46>
 8006c02:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8006c06:	1a9b      	subs	r3, r3, r2
 8006c08:	4410      	add	r0, r2
 8006c0a:	6899      	ldr	r1, [r3, #8]
 8006c0c:	68da      	ldr	r2, [r3, #12]
 8006c0e:	60ca      	str	r2, [r1, #12]
 8006c10:	6091      	str	r1, [r2, #8]
 8006c12:	f040 0201 	orr.w	r2, r0, #1
 8006c16:	605a      	str	r2, [r3, #4]
 8006c18:	60ab      	str	r3, [r5, #8]
 8006c1a:	4b48      	ldr	r3, [pc, #288]	; (8006d3c <_free_r+0x170>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4298      	cmp	r0, r3
 8006c20:	d304      	bcc.n	8006c2c <_free_r+0x60>
 8006c22:	4b47      	ldr	r3, [pc, #284]	; (8006d40 <_free_r+0x174>)
 8006c24:	4620      	mov	r0, r4
 8006c26:	6819      	ldr	r1, [r3, #0]
 8006c28:	f7ff ff7a 	bl	8006b20 <_malloc_trim_r>
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c32:	f7ff bbe2 	b.w	80063fa <__malloc_unlock>
 8006c36:	607e      	str	r6, [r7, #4]
 8006c38:	b97a      	cbnz	r2, 8006c5a <_free_r+0x8e>
 8006c3a:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8006c3e:	1a5b      	subs	r3, r3, r1
 8006c40:	4408      	add	r0, r1
 8006c42:	6899      	ldr	r1, [r3, #8]
 8006c44:	f105 0e08 	add.w	lr, r5, #8
 8006c48:	4571      	cmp	r1, lr
 8006c4a:	d008      	beq.n	8006c5e <_free_r+0x92>
 8006c4c:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8006c50:	f8c1 e00c 	str.w	lr, [r1, #12]
 8006c54:	f8ce 1008 	str.w	r1, [lr, #8]
 8006c58:	e002      	b.n	8006c60 <_free_r+0x94>
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	e000      	b.n	8006c60 <_free_r+0x94>
 8006c5e:	2201      	movs	r2, #1
 8006c60:	19b9      	adds	r1, r7, r6
 8006c62:	6849      	ldr	r1, [r1, #4]
 8006c64:	07c9      	lsls	r1, r1, #31
 8006c66:	d40e      	bmi.n	8006c86 <_free_r+0xba>
 8006c68:	4430      	add	r0, r6
 8006c6a:	68b9      	ldr	r1, [r7, #8]
 8006c6c:	b942      	cbnz	r2, 8006c80 <_free_r+0xb4>
 8006c6e:	4e35      	ldr	r6, [pc, #212]	; (8006d44 <_free_r+0x178>)
 8006c70:	42b1      	cmp	r1, r6
 8006c72:	d105      	bne.n	8006c80 <_free_r+0xb4>
 8006c74:	616b      	str	r3, [r5, #20]
 8006c76:	612b      	str	r3, [r5, #16]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	60d9      	str	r1, [r3, #12]
 8006c7c:	6099      	str	r1, [r3, #8]
 8006c7e:	e002      	b.n	8006c86 <_free_r+0xba>
 8006c80:	68fe      	ldr	r6, [r7, #12]
 8006c82:	60ce      	str	r6, [r1, #12]
 8006c84:	60b1      	str	r1, [r6, #8]
 8006c86:	f040 0101 	orr.w	r1, r0, #1
 8006c8a:	6059      	str	r1, [r3, #4]
 8006c8c:	5018      	str	r0, [r3, r0]
 8006c8e:	2a00      	cmp	r2, #0
 8006c90:	d1cc      	bne.n	8006c2c <_free_r+0x60>
 8006c92:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006c96:	d212      	bcs.n	8006cbe <_free_r+0xf2>
 8006c98:	08c0      	lsrs	r0, r0, #3
 8006c9a:	1081      	asrs	r1, r0, #2
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	fa02 f101 	lsl.w	r1, r2, r1
 8006ca2:	686a      	ldr	r2, [r5, #4]
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	606a      	str	r2, [r5, #4]
 8006caa:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8006cae:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8006cb2:	6099      	str	r1, [r3, #8]
 8006cb4:	3a08      	subs	r2, #8
 8006cb6:	60da      	str	r2, [r3, #12]
 8006cb8:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8006cbc:	e038      	b.n	8006d30 <_free_r+0x164>
 8006cbe:	0a42      	lsrs	r2, r0, #9
 8006cc0:	2a04      	cmp	r2, #4
 8006cc2:	d802      	bhi.n	8006cca <_free_r+0xfe>
 8006cc4:	0982      	lsrs	r2, r0, #6
 8006cc6:	3238      	adds	r2, #56	; 0x38
 8006cc8:	e015      	b.n	8006cf6 <_free_r+0x12a>
 8006cca:	2a14      	cmp	r2, #20
 8006ccc:	d801      	bhi.n	8006cd2 <_free_r+0x106>
 8006cce:	325b      	adds	r2, #91	; 0x5b
 8006cd0:	e011      	b.n	8006cf6 <_free_r+0x12a>
 8006cd2:	2a54      	cmp	r2, #84	; 0x54
 8006cd4:	d802      	bhi.n	8006cdc <_free_r+0x110>
 8006cd6:	0b02      	lsrs	r2, r0, #12
 8006cd8:	326e      	adds	r2, #110	; 0x6e
 8006cda:	e00c      	b.n	8006cf6 <_free_r+0x12a>
 8006cdc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006ce0:	d802      	bhi.n	8006ce8 <_free_r+0x11c>
 8006ce2:	0bc2      	lsrs	r2, r0, #15
 8006ce4:	3277      	adds	r2, #119	; 0x77
 8006ce6:	e006      	b.n	8006cf6 <_free_r+0x12a>
 8006ce8:	f240 5154 	movw	r1, #1364	; 0x554
 8006cec:	428a      	cmp	r2, r1
 8006cee:	bf9a      	itte	ls
 8006cf0:	0c82      	lsrls	r2, r0, #18
 8006cf2:	327c      	addls	r2, #124	; 0x7c
 8006cf4:	227e      	movhi	r2, #126	; 0x7e
 8006cf6:	1c51      	adds	r1, r2, #1
 8006cf8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8006cfc:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8006d00:	4f0d      	ldr	r7, [pc, #52]	; (8006d38 <_free_r+0x16c>)
 8006d02:	428e      	cmp	r6, r1
 8006d04:	d10b      	bne.n	8006d1e <_free_r+0x152>
 8006d06:	2101      	movs	r1, #1
 8006d08:	1092      	asrs	r2, r2, #2
 8006d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	4311      	orrs	r1, r2
 8006d12:	6079      	str	r1, [r7, #4]
 8006d14:	4631      	mov	r1, r6
 8006d16:	e008      	b.n	8006d2a <_free_r+0x15e>
 8006d18:	6889      	ldr	r1, [r1, #8]
 8006d1a:	428e      	cmp	r6, r1
 8006d1c:	d004      	beq.n	8006d28 <_free_r+0x15c>
 8006d1e:	684a      	ldr	r2, [r1, #4]
 8006d20:	f022 0203 	bic.w	r2, r2, #3
 8006d24:	4290      	cmp	r0, r2
 8006d26:	d3f7      	bcc.n	8006d18 <_free_r+0x14c>
 8006d28:	68ce      	ldr	r6, [r1, #12]
 8006d2a:	60de      	str	r6, [r3, #12]
 8006d2c:	6099      	str	r1, [r3, #8]
 8006d2e:	60b3      	str	r3, [r6, #8]
 8006d30:	60cb      	str	r3, [r1, #12]
 8006d32:	e77b      	b.n	8006c2c <_free_r+0x60>
 8006d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d38:	2000014c 	.word	0x2000014c
 8006d3c:	20000554 	.word	0x20000554
 8006d40:	200042c8 	.word	0x200042c8
 8006d44:	20000154 	.word	0x20000154

08006d48 <memmove>:
 8006d48:	4288      	cmp	r0, r1
 8006d4a:	b510      	push	{r4, lr}
 8006d4c:	eb01 0302 	add.w	r3, r1, r2
 8006d50:	d801      	bhi.n	8006d56 <memmove+0xe>
 8006d52:	1e42      	subs	r2, r0, #1
 8006d54:	e00b      	b.n	8006d6e <memmove+0x26>
 8006d56:	4298      	cmp	r0, r3
 8006d58:	d2fb      	bcs.n	8006d52 <memmove+0xa>
 8006d5a:	1881      	adds	r1, r0, r2
 8006d5c:	1ad2      	subs	r2, r2, r3
 8006d5e:	42d3      	cmn	r3, r2
 8006d60:	d004      	beq.n	8006d6c <memmove+0x24>
 8006d62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d66:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006d6a:	e7f8      	b.n	8006d5e <memmove+0x16>
 8006d6c:	bd10      	pop	{r4, pc}
 8006d6e:	4299      	cmp	r1, r3
 8006d70:	d004      	beq.n	8006d7c <memmove+0x34>
 8006d72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d76:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006d7a:	e7f8      	b.n	8006d6e <memmove+0x26>
 8006d7c:	bd10      	pop	{r4, pc}
	...

08006d80 <_realloc_r>:
 8006d80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d84:	4681      	mov	r9, r0
 8006d86:	460c      	mov	r4, r1
 8006d88:	b929      	cbnz	r1, 8006d96 <_realloc_r+0x16>
 8006d8a:	4611      	mov	r1, r2
 8006d8c:	b003      	add	sp, #12
 8006d8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d92:	f7ff b911 	b.w	8005fb8 <_malloc_r>
 8006d96:	9201      	str	r2, [sp, #4]
 8006d98:	f7ff fb2e 	bl	80063f8 <__malloc_lock>
 8006d9c:	9a01      	ldr	r2, [sp, #4]
 8006d9e:	f854 ec04 	ldr.w	lr, [r4, #-4]
 8006da2:	f102 080b 	add.w	r8, r2, #11
 8006da6:	f1b8 0f16 	cmp.w	r8, #22
 8006daa:	f1a4 0b08 	sub.w	fp, r4, #8
 8006dae:	f02e 0503 	bic.w	r5, lr, #3
 8006db2:	d903      	bls.n	8006dbc <_realloc_r+0x3c>
 8006db4:	f038 0807 	bics.w	r8, r8, #7
 8006db8:	d502      	bpl.n	8006dc0 <_realloc_r+0x40>
 8006dba:	e003      	b.n	8006dc4 <_realloc_r+0x44>
 8006dbc:	f04f 0810 	mov.w	r8, #16
 8006dc0:	4590      	cmp	r8, r2
 8006dc2:	d204      	bcs.n	8006dce <_realloc_r+0x4e>
 8006dc4:	230c      	movs	r3, #12
 8006dc6:	f8c9 3000 	str.w	r3, [r9]
 8006dca:	2000      	movs	r0, #0
 8006dcc:	e17d      	b.n	80070ca <_realloc_r+0x34a>
 8006dce:	45a8      	cmp	r8, r5
 8006dd0:	f340 8150 	ble.w	8007074 <_realloc_r+0x2f4>
 8006dd4:	4ba6      	ldr	r3, [pc, #664]	; (8007070 <_realloc_r+0x2f0>)
 8006dd6:	6898      	ldr	r0, [r3, #8]
 8006dd8:	eb0b 0105 	add.w	r1, fp, r5
 8006ddc:	4281      	cmp	r1, r0
 8006dde:	684f      	ldr	r7, [r1, #4]
 8006de0:	d005      	beq.n	8006dee <_realloc_r+0x6e>
 8006de2:	f027 0601 	bic.w	r6, r7, #1
 8006de6:	440e      	add	r6, r1
 8006de8:	6876      	ldr	r6, [r6, #4]
 8006dea:	07f6      	lsls	r6, r6, #31
 8006dec:	d426      	bmi.n	8006e3c <_realloc_r+0xbc>
 8006dee:	f027 0a03 	bic.w	sl, r7, #3
 8006df2:	4281      	cmp	r1, r0
 8006df4:	eb05 070a 	add.w	r7, r5, sl
 8006df8:	d118      	bne.n	8006e2c <_realloc_r+0xac>
 8006dfa:	f108 0610 	add.w	r6, r8, #16
 8006dfe:	42b7      	cmp	r7, r6
 8006e00:	db1f      	blt.n	8006e42 <_realloc_r+0xc2>
 8006e02:	eb0b 0008 	add.w	r0, fp, r8
 8006e06:	ebc8 0707 	rsb	r7, r8, r7
 8006e0a:	f047 0701 	orr.w	r7, r7, #1
 8006e0e:	6098      	str	r0, [r3, #8]
 8006e10:	6047      	str	r7, [r0, #4]
 8006e12:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	ea43 0308 	orr.w	r3, r3, r8
 8006e1e:	4648      	mov	r0, r9
 8006e20:	f844 3c04 	str.w	r3, [r4, #-4]
 8006e24:	f7ff fae9 	bl	80063fa <__malloc_unlock>
 8006e28:	4620      	mov	r0, r4
 8006e2a:	e14e      	b.n	80070ca <_realloc_r+0x34a>
 8006e2c:	45b8      	cmp	r8, r7
 8006e2e:	dc08      	bgt.n	8006e42 <_realloc_r+0xc2>
 8006e30:	68cb      	ldr	r3, [r1, #12]
 8006e32:	688a      	ldr	r2, [r1, #8]
 8006e34:	463d      	mov	r5, r7
 8006e36:	60d3      	str	r3, [r2, #12]
 8006e38:	609a      	str	r2, [r3, #8]
 8006e3a:	e11b      	b.n	8007074 <_realloc_r+0x2f4>
 8006e3c:	f04f 0a00 	mov.w	sl, #0
 8006e40:	4651      	mov	r1, sl
 8006e42:	f01e 0f01 	tst.w	lr, #1
 8006e46:	f040 80c3 	bne.w	8006fd0 <_realloc_r+0x250>
 8006e4a:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8006e4e:	ebc7 070b 	rsb	r7, r7, fp
 8006e52:	687e      	ldr	r6, [r7, #4]
 8006e54:	f026 0603 	bic.w	r6, r6, #3
 8006e58:	442e      	add	r6, r5
 8006e5a:	2900      	cmp	r1, #0
 8006e5c:	f000 8083 	beq.w	8006f66 <_realloc_r+0x1e6>
 8006e60:	4281      	cmp	r1, r0
 8006e62:	44b2      	add	sl, r6
 8006e64:	d147      	bne.n	8006ef6 <_realloc_r+0x176>
 8006e66:	f108 0110 	add.w	r1, r8, #16
 8006e6a:	458a      	cmp	sl, r1
 8006e6c:	db7b      	blt.n	8006f66 <_realloc_r+0x1e6>
 8006e6e:	463e      	mov	r6, r7
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8006e76:	60ca      	str	r2, [r1, #12]
 8006e78:	6091      	str	r1, [r2, #8]
 8006e7a:	1f2a      	subs	r2, r5, #4
 8006e7c:	2a24      	cmp	r2, #36	; 0x24
 8006e7e:	d825      	bhi.n	8006ecc <_realloc_r+0x14c>
 8006e80:	2a13      	cmp	r2, #19
 8006e82:	d91b      	bls.n	8006ebc <_realloc_r+0x13c>
 8006e84:	6821      	ldr	r1, [r4, #0]
 8006e86:	60b9      	str	r1, [r7, #8]
 8006e88:	6861      	ldr	r1, [r4, #4]
 8006e8a:	60f9      	str	r1, [r7, #12]
 8006e8c:	2a1b      	cmp	r2, #27
 8006e8e:	d803      	bhi.n	8006e98 <_realloc_r+0x118>
 8006e90:	f107 0210 	add.w	r2, r7, #16
 8006e94:	3408      	adds	r4, #8
 8006e96:	e012      	b.n	8006ebe <_realloc_r+0x13e>
 8006e98:	68a1      	ldr	r1, [r4, #8]
 8006e9a:	6139      	str	r1, [r7, #16]
 8006e9c:	68e1      	ldr	r1, [r4, #12]
 8006e9e:	6179      	str	r1, [r7, #20]
 8006ea0:	2a24      	cmp	r2, #36	; 0x24
 8006ea2:	bf01      	itttt	eq
 8006ea4:	6922      	ldreq	r2, [r4, #16]
 8006ea6:	61ba      	streq	r2, [r7, #24]
 8006ea8:	6961      	ldreq	r1, [r4, #20]
 8006eaa:	61f9      	streq	r1, [r7, #28]
 8006eac:	bf19      	ittee	ne
 8006eae:	f107 0218 	addne.w	r2, r7, #24
 8006eb2:	3410      	addne	r4, #16
 8006eb4:	f107 0220 	addeq.w	r2, r7, #32
 8006eb8:	3418      	addeq	r4, #24
 8006eba:	e000      	b.n	8006ebe <_realloc_r+0x13e>
 8006ebc:	4632      	mov	r2, r6
 8006ebe:	6821      	ldr	r1, [r4, #0]
 8006ec0:	6011      	str	r1, [r2, #0]
 8006ec2:	6861      	ldr	r1, [r4, #4]
 8006ec4:	6051      	str	r1, [r2, #4]
 8006ec6:	68a1      	ldr	r1, [r4, #8]
 8006ec8:	6091      	str	r1, [r2, #8]
 8006eca:	e005      	b.n	8006ed8 <_realloc_r+0x158>
 8006ecc:	4621      	mov	r1, r4
 8006ece:	4630      	mov	r0, r6
 8006ed0:	9301      	str	r3, [sp, #4]
 8006ed2:	f7ff ff39 	bl	8006d48 <memmove>
 8006ed6:	9b01      	ldr	r3, [sp, #4]
 8006ed8:	eb07 0208 	add.w	r2, r7, r8
 8006edc:	ebc8 0a0a 	rsb	sl, r8, sl
 8006ee0:	609a      	str	r2, [r3, #8]
 8006ee2:	f04a 0301 	orr.w	r3, sl, #1
 8006ee6:	6053      	str	r3, [r2, #4]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	ea43 0308 	orr.w	r3, r3, r8
 8006ef2:	607b      	str	r3, [r7, #4]
 8006ef4:	e0b6      	b.n	8007064 <_realloc_r+0x2e4>
 8006ef6:	45d0      	cmp	r8, sl
 8006ef8:	dc35      	bgt.n	8006f66 <_realloc_r+0x1e6>
 8006efa:	68cb      	ldr	r3, [r1, #12]
 8006efc:	688a      	ldr	r2, [r1, #8]
 8006efe:	4638      	mov	r0, r7
 8006f00:	60d3      	str	r3, [r2, #12]
 8006f02:	609a      	str	r2, [r3, #8]
 8006f04:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	60d3      	str	r3, [r2, #12]
 8006f0c:	609a      	str	r2, [r3, #8]
 8006f0e:	1f2a      	subs	r2, r5, #4
 8006f10:	2a24      	cmp	r2, #36	; 0x24
 8006f12:	d823      	bhi.n	8006f5c <_realloc_r+0x1dc>
 8006f14:	2a13      	cmp	r2, #19
 8006f16:	d91a      	bls.n	8006f4e <_realloc_r+0x1ce>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	60bb      	str	r3, [r7, #8]
 8006f1c:	6863      	ldr	r3, [r4, #4]
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	2a1b      	cmp	r2, #27
 8006f22:	d803      	bhi.n	8006f2c <_realloc_r+0x1ac>
 8006f24:	f107 0010 	add.w	r0, r7, #16
 8006f28:	3408      	adds	r4, #8
 8006f2a:	e010      	b.n	8006f4e <_realloc_r+0x1ce>
 8006f2c:	68a3      	ldr	r3, [r4, #8]
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	68e3      	ldr	r3, [r4, #12]
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	2a24      	cmp	r2, #36	; 0x24
 8006f36:	bf01      	itttt	eq
 8006f38:	6923      	ldreq	r3, [r4, #16]
 8006f3a:	61bb      	streq	r3, [r7, #24]
 8006f3c:	6963      	ldreq	r3, [r4, #20]
 8006f3e:	61fb      	streq	r3, [r7, #28]
 8006f40:	bf19      	ittee	ne
 8006f42:	f107 0018 	addne.w	r0, r7, #24
 8006f46:	3410      	addne	r4, #16
 8006f48:	f107 0020 	addeq.w	r0, r7, #32
 8006f4c:	3418      	addeq	r4, #24
 8006f4e:	6823      	ldr	r3, [r4, #0]
 8006f50:	6003      	str	r3, [r0, #0]
 8006f52:	6863      	ldr	r3, [r4, #4]
 8006f54:	6043      	str	r3, [r0, #4]
 8006f56:	68a3      	ldr	r3, [r4, #8]
 8006f58:	6083      	str	r3, [r0, #8]
 8006f5a:	e002      	b.n	8006f62 <_realloc_r+0x1e2>
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	f7ff fef3 	bl	8006d48 <memmove>
 8006f62:	4655      	mov	r5, sl
 8006f64:	e02e      	b.n	8006fc4 <_realloc_r+0x244>
 8006f66:	45b0      	cmp	r8, r6
 8006f68:	dc32      	bgt.n	8006fd0 <_realloc_r+0x250>
 8006f6a:	4638      	mov	r0, r7
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8006f72:	60d3      	str	r3, [r2, #12]
 8006f74:	609a      	str	r2, [r3, #8]
 8006f76:	1f2a      	subs	r2, r5, #4
 8006f78:	2a24      	cmp	r2, #36	; 0x24
 8006f7a:	d825      	bhi.n	8006fc8 <_realloc_r+0x248>
 8006f7c:	2a13      	cmp	r2, #19
 8006f7e:	d91a      	bls.n	8006fb6 <_realloc_r+0x236>
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	60bb      	str	r3, [r7, #8]
 8006f84:	6863      	ldr	r3, [r4, #4]
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	2a1b      	cmp	r2, #27
 8006f8a:	d803      	bhi.n	8006f94 <_realloc_r+0x214>
 8006f8c:	f107 0010 	add.w	r0, r7, #16
 8006f90:	3408      	adds	r4, #8
 8006f92:	e010      	b.n	8006fb6 <_realloc_r+0x236>
 8006f94:	68a3      	ldr	r3, [r4, #8]
 8006f96:	613b      	str	r3, [r7, #16]
 8006f98:	68e3      	ldr	r3, [r4, #12]
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	2a24      	cmp	r2, #36	; 0x24
 8006f9e:	bf01      	itttt	eq
 8006fa0:	6923      	ldreq	r3, [r4, #16]
 8006fa2:	61bb      	streq	r3, [r7, #24]
 8006fa4:	6963      	ldreq	r3, [r4, #20]
 8006fa6:	61fb      	streq	r3, [r7, #28]
 8006fa8:	bf19      	ittee	ne
 8006faa:	f107 0018 	addne.w	r0, r7, #24
 8006fae:	3410      	addne	r4, #16
 8006fb0:	f107 0020 	addeq.w	r0, r7, #32
 8006fb4:	3418      	addeq	r4, #24
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	6003      	str	r3, [r0, #0]
 8006fba:	6863      	ldr	r3, [r4, #4]
 8006fbc:	6043      	str	r3, [r0, #4]
 8006fbe:	68a3      	ldr	r3, [r4, #8]
 8006fc0:	6083      	str	r3, [r0, #8]
 8006fc2:	4635      	mov	r5, r6
 8006fc4:	46bb      	mov	fp, r7
 8006fc6:	e055      	b.n	8007074 <_realloc_r+0x2f4>
 8006fc8:	4621      	mov	r1, r4
 8006fca:	f7ff febd 	bl	8006d48 <memmove>
 8006fce:	e7f8      	b.n	8006fc2 <_realloc_r+0x242>
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	4648      	mov	r0, r9
 8006fd4:	f7fe fff0 	bl	8005fb8 <_malloc_r>
 8006fd8:	4606      	mov	r6, r0
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	d042      	beq.n	8007064 <_realloc_r+0x2e4>
 8006fde:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006fe2:	f023 0301 	bic.w	r3, r3, #1
 8006fe6:	f1a0 0208 	sub.w	r2, r0, #8
 8006fea:	445b      	add	r3, fp
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d105      	bne.n	8006ffc <_realloc_r+0x27c>
 8006ff0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006ff4:	f023 0303 	bic.w	r3, r3, #3
 8006ff8:	441d      	add	r5, r3
 8006ffa:	e03b      	b.n	8007074 <_realloc_r+0x2f4>
 8006ffc:	1f2a      	subs	r2, r5, #4
 8006ffe:	2a24      	cmp	r2, #36	; 0x24
 8007000:	d829      	bhi.n	8007056 <_realloc_r+0x2d6>
 8007002:	2a13      	cmp	r2, #19
 8007004:	d91e      	bls.n	8007044 <_realloc_r+0x2c4>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	6003      	str	r3, [r0, #0]
 800700a:	6863      	ldr	r3, [r4, #4]
 800700c:	6043      	str	r3, [r0, #4]
 800700e:	2a1b      	cmp	r2, #27
 8007010:	d804      	bhi.n	800701c <_realloc_r+0x29c>
 8007012:	f100 0308 	add.w	r3, r0, #8
 8007016:	f104 0208 	add.w	r2, r4, #8
 800701a:	e015      	b.n	8007048 <_realloc_r+0x2c8>
 800701c:	68a3      	ldr	r3, [r4, #8]
 800701e:	6083      	str	r3, [r0, #8]
 8007020:	68e3      	ldr	r3, [r4, #12]
 8007022:	60c3      	str	r3, [r0, #12]
 8007024:	2a24      	cmp	r2, #36	; 0x24
 8007026:	bf01      	itttt	eq
 8007028:	6923      	ldreq	r3, [r4, #16]
 800702a:	6103      	streq	r3, [r0, #16]
 800702c:	6961      	ldreq	r1, [r4, #20]
 800702e:	6141      	streq	r1, [r0, #20]
 8007030:	bf19      	ittee	ne
 8007032:	f100 0310 	addne.w	r3, r0, #16
 8007036:	f104 0210 	addne.w	r2, r4, #16
 800703a:	f100 0318 	addeq.w	r3, r0, #24
 800703e:	f104 0218 	addeq.w	r2, r4, #24
 8007042:	e001      	b.n	8007048 <_realloc_r+0x2c8>
 8007044:	4603      	mov	r3, r0
 8007046:	4622      	mov	r2, r4
 8007048:	6811      	ldr	r1, [r2, #0]
 800704a:	6019      	str	r1, [r3, #0]
 800704c:	6851      	ldr	r1, [r2, #4]
 800704e:	6059      	str	r1, [r3, #4]
 8007050:	6892      	ldr	r2, [r2, #8]
 8007052:	609a      	str	r2, [r3, #8]
 8007054:	e002      	b.n	800705c <_realloc_r+0x2dc>
 8007056:	4621      	mov	r1, r4
 8007058:	f7ff fe76 	bl	8006d48 <memmove>
 800705c:	4621      	mov	r1, r4
 800705e:	4648      	mov	r0, r9
 8007060:	f7ff fdb4 	bl	8006bcc <_free_r>
 8007064:	4648      	mov	r0, r9
 8007066:	f7ff f9c8 	bl	80063fa <__malloc_unlock>
 800706a:	4630      	mov	r0, r6
 800706c:	e02d      	b.n	80070ca <_realloc_r+0x34a>
 800706e:	bf00      	nop
 8007070:	2000014c 	.word	0x2000014c
 8007074:	ebc8 0205 	rsb	r2, r8, r5
 8007078:	2a0f      	cmp	r2, #15
 800707a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800707e:	d914      	bls.n	80070aa <_realloc_r+0x32a>
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	eb0b 0108 	add.w	r1, fp, r8
 8007088:	ea43 0308 	orr.w	r3, r3, r8
 800708c:	f8cb 3004 	str.w	r3, [fp, #4]
 8007090:	f042 0301 	orr.w	r3, r2, #1
 8007094:	440a      	add	r2, r1
 8007096:	604b      	str	r3, [r1, #4]
 8007098:	6853      	ldr	r3, [r2, #4]
 800709a:	f043 0301 	orr.w	r3, r3, #1
 800709e:	6053      	str	r3, [r2, #4]
 80070a0:	3108      	adds	r1, #8
 80070a2:	4648      	mov	r0, r9
 80070a4:	f7ff fd92 	bl	8006bcc <_free_r>
 80070a8:	e00a      	b.n	80070c0 <_realloc_r+0x340>
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	432b      	orrs	r3, r5
 80070b0:	eb0b 0205 	add.w	r2, fp, r5
 80070b4:	f8cb 3004 	str.w	r3, [fp, #4]
 80070b8:	6853      	ldr	r3, [r2, #4]
 80070ba:	f043 0301 	orr.w	r3, r3, #1
 80070be:	6053      	str	r3, [r2, #4]
 80070c0:	4648      	mov	r0, r9
 80070c2:	f7ff f99a 	bl	80063fa <__malloc_unlock>
 80070c6:	f10b 0008 	add.w	r0, fp, #8
 80070ca:	b003      	add	sp, #12
 80070cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080070d0 <_sbrk>:
 80070d0:	4b04      	ldr	r3, [pc, #16]	; (80070e4 <_sbrk+0x14>)
 80070d2:	6819      	ldr	r1, [r3, #0]
 80070d4:	4602      	mov	r2, r0
 80070d6:	b909      	cbnz	r1, 80070dc <_sbrk+0xc>
 80070d8:	4903      	ldr	r1, [pc, #12]	; (80070e8 <_sbrk+0x18>)
 80070da:	6019      	str	r1, [r3, #0]
 80070dc:	6818      	ldr	r0, [r3, #0]
 80070de:	4402      	add	r2, r0
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	4770      	bx	lr
 80070e4:	200042f4 	.word	0x200042f4
 80070e8:	20004768 	.word	0x20004768

080070ec <_init>:
 80070ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ee:	bf00      	nop
 80070f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070f2:	bc08      	pop	{r3}
 80070f4:	469e      	mov	lr, r3
 80070f6:	4770      	bx	lr

080070f8 <_fini>:
 80070f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fa:	bf00      	nop
 80070fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070fe:	bc08      	pop	{r3}
 8007100:	469e      	mov	lr, r3
 8007102:	4770      	bx	lr
