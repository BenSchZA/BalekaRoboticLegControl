
Baleka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003378  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08003500  08003500  00013500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003674  08003674  00013674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003678  08003678  00013678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  0800367c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00004254  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004260  20004260  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013669  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002eb9  00000000  00000000  000336a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000099fd  00000000  00000000  0003655e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000dd8  00000000  00000000  0003ff60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001138  00000000  00000000  00040d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006eb0  00000000  00000000  00041e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000534b  00000000  00000000  00048d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0004e06b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000288c  00000000  00000000  0004e0ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080034e8 	.word	0x080034e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080034e8 	.word	0x080034e8

080001c8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80001c8:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <prvResetNextTaskUnblockTime+0x1c>)
 80001ca:	6813      	ldr	r3, [r2, #0]
 80001cc:	6819      	ldr	r1, [r3, #0]
 80001ce:	4b06      	ldr	r3, [pc, #24]	; (80001e8 <prvResetNextTaskUnblockTime+0x20>)
 80001d0:	b911      	cbnz	r1, 80001d8 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80001d2:	f04f 32ff 	mov.w	r2, #4294967295
 80001d6:	e003      	b.n	80001e0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80001d8:	6812      	ldr	r2, [r2, #0]
 80001da:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 80001dc:	68d2      	ldr	r2, [r2, #12]
 80001de:	6852      	ldr	r2, [r2, #4]
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	4770      	bx	lr
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	200000f8 	.word	0x200000f8

080001ec <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80001ec:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <prvAddCurrentTaskToDelayedList+0x3c>)
 80001ee:	681a      	ldr	r2, [r3, #0]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80001f0:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80001f2:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
 80001f4:	4a0d      	ldr	r2, [pc, #52]	; (800022c <prvAddCurrentTaskToDelayedList+0x40>)
 80001f6:	6812      	ldr	r2, [r2, #0]
 80001f8:	4290      	cmp	r0, r2
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80001fa:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 80001fc:	d207      	bcs.n	800020e <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80001fe:	4a0c      	ldr	r2, [pc, #48]	; (8000230 <prvAddCurrentTaskToDelayedList+0x44>)
 8000200:	6810      	ldr	r0, [r2, #0]
 8000202:	6819      	ldr	r1, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8000208:	3104      	adds	r1, #4
 800020a:	f001 b845 	b.w	8001298 <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800020e:	4a09      	ldr	r2, [pc, #36]	; (8000234 <prvAddCurrentTaskToDelayedList+0x48>)
 8000210:	6810      	ldr	r0, [r2, #0]
 8000212:	6819      	ldr	r1, [r3, #0]
 8000214:	3104      	adds	r1, #4
 8000216:	f001 f83f 	bl	8001298 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 800021a:	4b07      	ldr	r3, [pc, #28]	; (8000238 <prvAddCurrentTaskToDelayedList+0x4c>)
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 8000220:	bf38      	it	cc
 8000222:	601c      	strcc	r4, [r3, #0]
 8000224:	bd10      	pop	{r4, pc}
 8000226:	bf00      	nop
 8000228:	200000f4 	.word	0x200000f4
 800022c:	200000fc 	.word	0x200000fc
 8000230:	20000100 	.word	0x20000100
 8000234:	2000002c 	.word	0x2000002c
 8000238:	200000f8 	.word	0x200000f8

0800023c <xTaskGenericCreate.part.5>:
	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 800023c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000240:	469a      	mov	sl, r3
 8000242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000244:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8000246:	4681      	mov	r9, r0
 8000248:	460e      	mov	r6, r1
 800024a:	4615      	mov	r5, r2
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800024c:	b93b      	cbnz	r3, 800025e <xTaskGenericCreate.part.5+0x22>
 800024e:	0090      	lsls	r0, r2, #2
 8000250:	f001 f86e 	bl	8001330 <pvPortMalloc>

		if( pxStack != NULL )
 8000254:	4683      	mov	fp, r0
 8000256:	2800      	cmp	r0, #0
 8000258:	f000 80b2 	beq.w	80003c0 <xTaskGenericCreate.part.5+0x184>
 800025c:	e000      	b.n	8000260 <xTaskGenericCreate.part.5+0x24>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800025e:	469b      	mov	fp, r3

		if( pxStack != NULL )
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8000260:	205c      	movs	r0, #92	; 0x5c
 8000262:	f001 f865 	bl	8001330 <pvPortMalloc>

			if( pxNewTCB != NULL )
 8000266:	4604      	mov	r4, r0
 8000268:	b188      	cbz	r0, 800028e <xTaskGenericCreate.part.5+0x52>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800026a:	00ad      	lsls	r5, r5, #2
 800026c:	462a      	mov	r2, r5
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 800026e:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8000272:	21a5      	movs	r1, #165	; 0xa5
 8000274:	4658      	mov	r0, fp
 8000276:	f003 f92e 	bl	80034d6 <memset>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800027a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800027c:	3d04      	subs	r5, #4
 800027e:	441d      	add	r5, r3
 8000280:	f025 0507 	bic.w	r5, r5, #7
 8000284:	1e73      	subs	r3, r6, #1
 8000286:	f104 0233 	add.w	r2, r4, #51	; 0x33
 800028a:	360f      	adds	r6, #15
 800028c:	e005      	b.n	800029a <xTaskGenericCreate.part.5+0x5e>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 800028e:	4658      	mov	r0, fp
 8000290:	f001 f8e0 	bl	8001454 <vPortFree>
 8000294:	e094      	b.n	80003c0 <xTaskGenericCreate.part.5+0x184>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000296:	429e      	cmp	r6, r3
 8000298:	d006      	beq.n	80002a8 <xTaskGenericCreate.part.5+0x6c>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800029a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800029e:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80002a2:	7819      	ldrb	r1, [r3, #0]
 80002a4:	2900      	cmp	r1, #0
 80002a6:	d1f6      	bne.n	8000296 <xTaskGenericCreate.part.5+0x5a>
 80002a8:	2f06      	cmp	r7, #6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80002aa:	f04f 0800 	mov.w	r8, #0
 80002ae:	46bb      	mov	fp, r7
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80002b0:	f104 0604 	add.w	r6, r4, #4
 80002b4:	bf28      	it	cs
 80002b6:	f04f 0b06 	movcs.w	fp, #6
 80002ba:	4630      	mov	r0, r6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80002bc:	f884 8043 	strb.w	r8, [r4, #67]	; 0x43
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 80002c0:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 80002c4:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 80002c8:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80002cc:	f000 ffd5 	bl	800127a <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80002d0:	f104 0018 	add.w	r0, r4, #24
 80002d4:	f000 ffd1 	bl	800127a <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80002d8:	f1cb 0307 	rsb	r3, fp, #7
 80002dc:	61a3      	str	r3, [r4, #24]
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 80002de:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80002e2:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80002e4:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
		pxTCB->eNotifyState = eNotWaitingNotification;
 80002e6:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80002ea:	4652      	mov	r2, sl
 80002ec:	4649      	mov	r1, r9
 80002ee:	4628      	mov	r0, r5
 80002f0:	f000 fe60 	bl	8000fb4 <pxPortInitialiseStack>
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 80002f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80002f6:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 80002f8:	b103      	cbz	r3, 80002fc <xTaskGenericCreate.part.5+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80002fa:	601c      	str	r4, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 80002fc:	f000 fe7c 	bl	8000ff8 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8000300:	4a31      	ldr	r2, [pc, #196]	; (80003c8 <xTaskGenericCreate.part.5+0x18c>)
			if( pxCurrentTCB == NULL )
 8000302:	4d32      	ldr	r5, [pc, #200]	; (80003cc <xTaskGenericCreate.part.5+0x190>)

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 8000304:	6813      	ldr	r3, [r2, #0]
 8000306:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 80003f4 <xTaskGenericCreate.part.5+0x1b8>
 800030a:	3301      	adds	r3, #1
 800030c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800030e:	682b      	ldr	r3, [r5, #0]
 8000310:	bb3b      	cbnz	r3, 8000362 <xTaskGenericCreate.part.5+0x126>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8000312:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000314:	6812      	ldr	r2, [r2, #0]
 8000316:	2a01      	cmp	r2, #1
 8000318:	d12b      	bne.n	8000372 <xTaskGenericCreate.part.5+0x136>
 800031a:	4698      	mov	r8, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800031c:	eb09 0008 	add.w	r0, r9, r8
 8000320:	f108 0814 	add.w	r8, r8, #20
 8000324:	f000 ff9e 	bl	8001264 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000328:	f1b8 0f8c 	cmp.w	r8, #140	; 0x8c
 800032c:	d1f6      	bne.n	800031c <xTaskGenericCreate.part.5+0xe0>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800032e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80003f8 <xTaskGenericCreate.part.5+0x1bc>
	vListInitialise( &xDelayedTaskList2 );
 8000332:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80003fc <xTaskGenericCreate.part.5+0x1c0>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8000336:	4650      	mov	r0, sl
 8000338:	f000 ff94 	bl	8001264 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800033c:	4640      	mov	r0, r8
 800033e:	f000 ff91 	bl	8001264 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8000342:	4823      	ldr	r0, [pc, #140]	; (80003d0 <xTaskGenericCreate.part.5+0x194>)
 8000344:	f000 ff8e 	bl	8001264 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8000348:	4822      	ldr	r0, [pc, #136]	; (80003d4 <xTaskGenericCreate.part.5+0x198>)
 800034a:	f000 ff8b 	bl	8001264 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800034e:	4822      	ldr	r0, [pc, #136]	; (80003d8 <xTaskGenericCreate.part.5+0x19c>)
 8000350:	f000 ff88 	bl	8001264 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <xTaskGenericCreate.part.5+0x1a0>)
 8000356:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800035a:	4b21      	ldr	r3, [pc, #132]	; (80003e0 <xTaskGenericCreate.part.5+0x1a4>)
 800035c:	f8c3 8000 	str.w	r8, [r3]
 8000360:	e007      	b.n	8000372 <xTaskGenericCreate.part.5+0x136>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8000362:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <xTaskGenericCreate.part.5+0x1a8>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	b923      	cbnz	r3, 8000372 <xTaskGenericCreate.part.5+0x136>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8000368:	682b      	ldr	r3, [r5, #0]
 800036a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800036c:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
 800036e:	bf28      	it	cs
 8000370:	602c      	strcs	r4, [r5, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8000372:	4a1d      	ldr	r2, [pc, #116]	; (80003e8 <xTaskGenericCreate.part.5+0x1ac>)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8000374:	491d      	ldr	r1, [pc, #116]	; (80003ec <xTaskGenericCreate.part.5+0x1b0>)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8000376:	6813      	ldr	r3, [r2, #0]
 8000378:	3301      	adds	r3, #1
 800037a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 800037c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			uxTaskNumber++;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800037e:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8000380:	680b      	ldr	r3, [r1, #0]
 8000382:	2401      	movs	r4, #1
 8000384:	fa04 f002 	lsl.w	r0, r4, r2
 8000388:	4303      	orrs	r3, r0
 800038a:	2014      	movs	r0, #20
 800038c:	600b      	str	r3, [r1, #0]
 800038e:	fb00 9002 	mla	r0, r0, r2, r9
 8000392:	4631      	mov	r1, r6
 8000394:	f000 ff74 	bl	8001280 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8000398:	f000 fe50 	bl	800103c <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <xTaskGenericCreate.part.5+0x1a8>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	b15b      	cbz	r3, 80003ba <xTaskGenericCreate.part.5+0x17e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80003a2:	682b      	ldr	r3, [r5, #0]
 80003a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003a6:	429f      	cmp	r7, r3
 80003a8:	d907      	bls.n	80003ba <xTaskGenericCreate.part.5+0x17e>
			{
				taskYIELD_IF_USING_PREEMPTION();
 80003aa:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <xTaskGenericCreate.part.5+0x1b4>)
 80003ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	f3bf 8f4f 	dsb	sy
 80003b6:	f3bf 8f6f 	isb	sy
	{
		if( xSchedulerRunning != pdFALSE )
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80003ba:	4620      	mov	r0, r4
 80003bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80003c0:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 80003c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003c8:	20000144 	.word	0x20000144
 80003cc:	200000f4 	.word	0x200000f4
 80003d0:	20000104 	.word	0x20000104
 80003d4:	20000038 	.word	0x20000038
 80003d8:	2000004c 	.word	0x2000004c
 80003dc:	2000002c 	.word	0x2000002c
 80003e0:	20000100 	.word	0x20000100
 80003e4:	20000030 	.word	0x20000030
 80003e8:	20000118 	.word	0x20000118
 80003ec:	20000148 	.word	0x20000148
 80003f0:	e000ed04 	.word	0xe000ed04
 80003f4:	20000064 	.word	0x20000064
 80003f8:	2000011c 	.word	0x2000011c
 80003fc:	20000130 	.word	0x20000130

08000400 <prvTaskIsTaskSuspended.part.0>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000404:	f383 8811 	msr	BASEPRI, r3
 8000408:	f3bf 8f6f 	isb	sy
 800040c:	f3bf 8f4f 	dsb	sy
 8000410:	e7fe      	b.n	8000410 <prvTaskIsTaskSuspended.part.0+0x10>

08000412 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8000412:	b470      	push	{r4, r5, r6}
 8000414:	ac03      	add	r4, sp, #12
 8000416:	cc70      	ldmia	r4, {r4, r5, r6}
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 8000418:	b940      	cbnz	r0, 800042c <xTaskGenericCreate+0x1a>
 800041a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800041e:	f383 8811 	msr	BASEPRI, r3
 8000422:	f3bf 8f6f 	isb	sy
 8000426:	f3bf 8f4f 	dsb	sy
 800042a:	e7fe      	b.n	800042a <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800042c:	2c06      	cmp	r4, #6
 800042e:	d908      	bls.n	8000442 <xTaskGenericCreate+0x30>
 8000430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000434:	f383 8811 	msr	BASEPRI, r3
 8000438:	f3bf 8f6f 	isb	sy
 800043c:	f3bf 8f4f 	dsb	sy
 8000440:	e7fe      	b.n	8000440 <xTaskGenericCreate+0x2e>
 8000442:	9605      	str	r6, [sp, #20]
 8000444:	9504      	str	r5, [sp, #16]
 8000446:	9403      	str	r4, [sp, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 8000448:	bc70      	pop	{r4, r5, r6}
 800044a:	f7ff bef7 	b.w	800023c <xTaskGenericCreate.part.5>
	...

08000450 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	2400      	movs	r4, #0
 8000454:	9402      	str	r4, [sp, #8]
 8000456:	9401      	str	r4, [sp, #4]
 8000458:	9400      	str	r4, [sp, #0]
 800045a:	4623      	mov	r3, r4
 800045c:	2280      	movs	r2, #128	; 0x80
 800045e:	4913      	ldr	r1, [pc, #76]	; (80004ac <vTaskStartScheduler+0x5c>)
 8000460:	4813      	ldr	r0, [pc, #76]	; (80004b0 <vTaskStartScheduler+0x60>)
 8000462:	f7ff feeb 	bl	800023c <xTaskGenericCreate.part.5>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000466:	2801      	cmp	r0, #1
 8000468:	d114      	bne.n	8000494 <vTaskStartScheduler+0x44>
 800046a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800046e:	f383 8811 	msr	BASEPRI, r3
 8000472:	f3bf 8f6f 	isb	sy
 8000476:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <vTaskStartScheduler+0x64>)
 800047c:	f04f 32ff 	mov.w	r2, #4294967295
 8000480:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000482:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <vTaskStartScheduler+0x68>)
 8000484:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8000486:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <vTaskStartScheduler+0x6c>)
 8000488:	601c      	str	r4, [r3, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 800048a:	b004      	add	sp, #16
 800048c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000490:	f000 be44 	b.w	800111c <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8000494:	b940      	cbnz	r0, 80004a8 <vTaskStartScheduler+0x58>
 8000496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800049a:	f383 8811 	msr	BASEPRI, r3
 800049e:	f3bf 8f6f 	isb	sy
 80004a2:	f3bf 8f4f 	dsb	sy
 80004a6:	e7fe      	b.n	80004a6 <vTaskStartScheduler+0x56>
	}
}
 80004a8:	b004      	add	sp, #16
 80004aa:	bd10      	pop	{r4, pc}
 80004ac:	080035f4 	.word	0x080035f4
 80004b0:	08000769 	.word	0x08000769
 80004b4:	200000f8 	.word	0x200000f8
 80004b8:	20000030 	.word	0x20000030
 80004bc:	200000fc 	.word	0x200000fc

080004c0 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80004c0:	4a02      	ldr	r2, [pc, #8]	; (80004cc <vTaskSuspendAll+0xc>)
 80004c2:	6813      	ldr	r3, [r2, #0]
 80004c4:	3301      	adds	r3, #1
 80004c6:	6013      	str	r3, [r2, #0]
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	200000f0 	.word	0x200000f0

080004d0 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80004d0:	4b40      	ldr	r3, [pc, #256]	; (80005d4 <xTaskIncrementTick+0x104>)
 80004d2:	681b      	ldr	r3, [r3, #0]

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80004d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d13c      	bne.n	8000556 <xTaskIncrementTick+0x86>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 80004dc:	4b3e      	ldr	r3, [pc, #248]	; (80005d8 <xTaskIncrementTick+0x108>)
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	3201      	adds	r2, #1
 80004e2:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80004e4:	681d      	ldr	r5, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
 80004e6:	b9bd      	cbnz	r5, 8000518 <xTaskIncrementTick+0x48>
			{
				taskSWITCH_DELAYED_LISTS();
 80004e8:	4b3c      	ldr	r3, [pc, #240]	; (80005dc <xTaskIncrementTick+0x10c>)
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	6812      	ldr	r2, [r2, #0]
 80004ee:	b142      	cbz	r2, 8000502 <xTaskIncrementTick+0x32>
 80004f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004f4:	f383 8811 	msr	BASEPRI, r3
 80004f8:	f3bf 8f6f 	isb	sy
 80004fc:	f3bf 8f4f 	dsb	sy
 8000500:	e7fe      	b.n	8000500 <xTaskIncrementTick+0x30>
 8000502:	4a37      	ldr	r2, [pc, #220]	; (80005e0 <xTaskIncrementTick+0x110>)
 8000504:	6819      	ldr	r1, [r3, #0]
 8000506:	6810      	ldr	r0, [r2, #0]
 8000508:	6018      	str	r0, [r3, #0]
 800050a:	6011      	str	r1, [r2, #0]
 800050c:	4a35      	ldr	r2, [pc, #212]	; (80005e4 <xTaskIncrementTick+0x114>)
 800050e:	6813      	ldr	r3, [r2, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	6013      	str	r3, [r2, #0]
 8000514:	f7ff fe58 	bl	80001c8 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8000518:	4c33      	ldr	r4, [pc, #204]	; (80005e8 <xTaskIncrementTick+0x118>)
 800051a:	9401      	str	r4, [sp, #4]
 800051c:	6823      	ldr	r3, [r4, #0]
 800051e:	4e33      	ldr	r6, [pc, #204]	; (80005ec <xTaskIncrementTick+0x11c>)
 8000520:	4f33      	ldr	r7, [pc, #204]	; (80005f0 <xTaskIncrementTick+0x120>)
 8000522:	429d      	cmp	r5, r3
 8000524:	f04f 0b00 	mov.w	fp, #0
 8000528:	d30b      	bcc.n	8000542 <xTaskIncrementTick+0x72>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800052a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80005dc <xTaskIncrementTick+0x10c>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 800052e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80005fc <xTaskIncrementTick+0x12c>
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000532:	f8d8 2000 	ldr.w	r2, [r8]
 8000536:	6812      	ldr	r2, [r2, #0]
 8000538:	b9a2      	cbnz	r2, 8000564 <xTaskIncrementTick+0x94>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 800053a:	9b01      	ldr	r3, [sp, #4]
 800053c:	f04f 32ff 	mov.w	r2, #4294967295
 8000540:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000542:	683a      	ldr	r2, [r7, #0]
 8000544:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000546:	2214      	movs	r2, #20
 8000548:	434a      	muls	r2, r1
 800054a:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 800054c:	2a02      	cmp	r2, #2
 800054e:	bf28      	it	cs
 8000550:	f04f 0b01 	movcs.w	fp, #1
 8000554:	e034      	b.n	80005c0 <xTaskIncrementTick+0xf0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000556:	4a27      	ldr	r2, [pc, #156]	; (80005f4 <xTaskIncrementTick+0x124>)
 8000558:	6813      	ldr	r3, [r2, #0]
 800055a:	3301      	adds	r3, #1
 800055c:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800055e:	f04f 0b00 	mov.w	fp, #0
 8000562:	e02d      	b.n	80005c0 <xTaskIncrementTick+0xf0>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000564:	f8d8 2000 	ldr.w	r2, [r8]
 8000568:	68d2      	ldr	r2, [r2, #12]
 800056a:	68d4      	ldr	r4, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800056c:	6861      	ldr	r1, [r4, #4]

						if( xConstTickCount < xItemValue )
 800056e:	428d      	cmp	r5, r1
 8000570:	d202      	bcs.n	8000578 <xTaskIncrementTick+0xa8>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8000572:	9b01      	ldr	r3, [sp, #4]
 8000574:	6019      	str	r1, [r3, #0]
							break;
 8000576:	e7e4      	b.n	8000542 <xTaskIncrementTick+0x72>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000578:	f104 0a04 	add.w	sl, r4, #4
 800057c:	4650      	mov	r0, sl
 800057e:	f000 fea3 	bl	80012c8 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000582:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000584:	b119      	cbz	r1, 800058e <xTaskIncrementTick+0xbe>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000586:	f104 0018 	add.w	r0, r4, #24
 800058a:	f000 fe9d 	bl	80012c8 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 800058e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000590:	f8d9 1000 	ldr.w	r1, [r9]
 8000594:	2301      	movs	r3, #1
 8000596:	fa03 fe00 	lsl.w	lr, r3, r0
 800059a:	ea4e 0101 	orr.w	r1, lr, r1
 800059e:	f04f 0e14 	mov.w	lr, #20
 80005a2:	f8c9 1000 	str.w	r1, [r9]
 80005a6:	fb0e 6000 	mla	r0, lr, r0, r6
 80005aa:	4651      	mov	r1, sl
 80005ac:	f000 fe68 	bl	8001280 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80005b0:	6838      	ldr	r0, [r7, #0]
 80005b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80005b4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 80005b6:	4291      	cmp	r1, r2
 80005b8:	bf28      	it	cs
 80005ba:	f04f 0b01 	movcs.w	fp, #1
 80005be:	e7b8      	b.n	8000532 <xTaskIncrementTick+0x62>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80005c0:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <xTaskIncrementTick+0x128>)
 80005c2:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 80005c4:	2a00      	cmp	r2, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 80005cc:	4658      	mov	r0, fp
 80005ce:	b003      	add	sp, #12
 80005d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005d4:	200000f0 	.word	0x200000f0
 80005d8:	200000fc 	.word	0x200000fc
 80005dc:	2000002c 	.word	0x2000002c
 80005e0:	20000100 	.word	0x20000100
 80005e4:	20000028 	.word	0x20000028
 80005e8:	200000f8 	.word	0x200000f8
 80005ec:	20000064 	.word	0x20000064
 80005f0:	200000f4 	.word	0x200000f4
 80005f4:	20000060 	.word	0x20000060
 80005f8:	2000014c 	.word	0x2000014c
 80005fc:	20000148 	.word	0x20000148

08000600 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000604:	4c30      	ldr	r4, [pc, #192]	; (80006c8 <xTaskResumeAll+0xc8>)
 8000606:	6823      	ldr	r3, [r4, #0]
 8000608:	b943      	cbnz	r3, 800061c <xTaskResumeAll+0x1c>
 800060a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060e:	f383 8811 	msr	BASEPRI, r3
 8000612:	f3bf 8f6f 	isb	sy
 8000616:	f3bf 8f4f 	dsb	sy
 800061a:	e7fe      	b.n	800061a <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800061c:	f000 fcec 	bl	8000ff8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000620:	6823      	ldr	r3, [r4, #0]
 8000622:	3b01      	subs	r3, #1
 8000624:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000626:	6823      	ldr	r3, [r4, #0]
 8000628:	b10b      	cbz	r3, 800062e <xTaskResumeAll+0x2e>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 800062a:	2400      	movs	r4, #0
 800062c:	e047      	b.n	80006be <xTaskResumeAll+0xbe>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800062e:	4b27      	ldr	r3, [pc, #156]	; (80006cc <xTaskResumeAll+0xcc>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0f9      	beq.n	800062a <xTaskResumeAll+0x2a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000636:	4d26      	ldr	r5, [pc, #152]	; (80006d0 <xTaskResumeAll+0xd0>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8000638:	4e26      	ldr	r6, [pc, #152]	; (80006d4 <xTaskResumeAll+0xd4>)
 800063a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80006e8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800063e:	682b      	ldr	r3, [r5, #0]
 8000640:	b303      	cbz	r3, 8000684 <xTaskResumeAll+0x84>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8000642:	68eb      	ldr	r3, [r5, #12]
 8000644:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000646:	f104 0904 	add.w	r9, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800064a:	f104 0018 	add.w	r0, r4, #24
 800064e:	f000 fe3b 	bl	80012c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000652:	4648      	mov	r0, r9
 8000654:	f000 fe38 	bl	80012c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000658:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800065a:	6833      	ldr	r3, [r6, #0]
 800065c:	2701      	movs	r7, #1
 800065e:	fa07 f102 	lsl.w	r1, r7, r2
 8000662:	2014      	movs	r0, #20
 8000664:	430b      	orrs	r3, r1
 8000666:	fb00 8002 	mla	r0, r0, r2, r8
 800066a:	4649      	mov	r1, r9
 800066c:	6033      	str	r3, [r6, #0]
 800066e:	f000 fe07 	bl	8001280 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000672:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <xTaskResumeAll+0xd8>)
 8000674:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067a:	429a      	cmp	r2, r3
 800067c:	d3df      	bcc.n	800063e <xTaskResumeAll+0x3e>
					{
						xYieldPending = pdTRUE;
 800067e:	4b17      	ldr	r3, [pc, #92]	; (80006dc <xTaskResumeAll+0xdc>)
 8000680:	601f      	str	r7, [r3, #0]
 8000682:	e7da      	b.n	800063a <xTaskResumeAll+0x3a>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8000684:	4c16      	ldr	r4, [pc, #88]	; (80006e0 <xTaskResumeAll+0xe0>)
 8000686:	6823      	ldr	r3, [r4, #0]
 8000688:	b963      	cbnz	r3, 80006a4 <xTaskResumeAll+0xa4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <xTaskResumeAll+0xdc>)
 800068c:	681c      	ldr	r4, [r3, #0]
 800068e:	2c01      	cmp	r4, #1
 8000690:	d1cb      	bne.n	800062a <xTaskResumeAll+0x2a>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <xTaskResumeAll+0xe4>)
 8000694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	f3bf 8f4f 	dsb	sy
 800069e:	f3bf 8f6f 	isb	sy
 80006a2:	e00c      	b.n	80006be <xTaskResumeAll+0xbe>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 80006a4:	4d0d      	ldr	r5, [pc, #52]	; (80006dc <xTaskResumeAll+0xdc>)
 80006a6:	2601      	movs	r6, #1
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 80006a8:	6823      	ldr	r3, [r4, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d0ed      	beq.n	800068a <xTaskResumeAll+0x8a>
					{
						if( xTaskIncrementTick() != pdFALSE )
 80006ae:	f7ff ff0f 	bl	80004d0 <xTaskIncrementTick>
 80006b2:	b100      	cbz	r0, 80006b6 <xTaskResumeAll+0xb6>
						{
							xYieldPending = pdTRUE;
 80006b4:	602e      	str	r6, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 80006b6:	6823      	ldr	r3, [r4, #0]
 80006b8:	3b01      	subs	r3, #1
 80006ba:	6023      	str	r3, [r4, #0]
 80006bc:	e7f4      	b.n	80006a8 <xTaskResumeAll+0xa8>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80006be:	f000 fcbd 	bl	800103c <vPortExitCritical>

	return xAlreadyYielded;
}
 80006c2:	4620      	mov	r0, r4
 80006c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006c8:	200000f0 	.word	0x200000f0
 80006cc:	20000144 	.word	0x20000144
 80006d0:	20000104 	.word	0x20000104
 80006d4:	20000148 	.word	0x20000148
 80006d8:	200000f4 	.word	0x200000f4
 80006dc:	2000014c 	.word	0x2000014c
 80006e0:	20000060 	.word	0x20000060
 80006e4:	e000ed04 	.word	0xe000ed04
 80006e8:	20000064 	.word	0x20000064

080006ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80006ec:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80006ee:	b940      	cbnz	r0, 8000702 <vTaskDelay+0x16>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <vTaskDelay+0x68>)
 80006f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	f3bf 8f4f 	dsb	sy
 80006fc:	f3bf 8f6f 	isb	sy
 8000700:	bd38      	pop	{r3, r4, r5, pc}


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <vTaskDelay+0x6c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	b143      	cbz	r3, 800071a <vTaskDelay+0x2e>
 8000708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070c:	f383 8811 	msr	BASEPRI, r3
 8000710:	f3bf 8f6f 	isb	sy
 8000714:	f3bf 8f4f 	dsb	sy
 8000718:	e7fe      	b.n	8000718 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800071a:	f7ff fed1 	bl	80004c0 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <vTaskDelay+0x70>)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8000720:	4d0f      	ldr	r5, [pc, #60]	; (8000760 <vTaskDelay+0x74>)
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	18c4      	adds	r4, r0, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8000726:	6828      	ldr	r0, [r5, #0]
 8000728:	3004      	adds	r0, #4
 800072a:	f000 fdcd 	bl	80012c8 <uxListRemove>
 800072e:	b940      	cbnz	r0, 8000742 <vTaskDelay+0x56>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8000730:	682b      	ldr	r3, [r5, #0]
 8000732:	490c      	ldr	r1, [pc, #48]	; (8000764 <vTaskDelay+0x78>)
 8000734:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000736:	680a      	ldr	r2, [r1, #0]
 8000738:	2301      	movs	r3, #1
 800073a:	4083      	lsls	r3, r0
 800073c:	ea22 0303 	bic.w	r3, r2, r3
 8000740:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8000742:	4620      	mov	r0, r4
 8000744:	f7ff fd52 	bl	80001ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000748:	f7ff ff5a 	bl	8000600 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800074c:	2800      	cmp	r0, #0
 800074e:	d0cf      	beq.n	80006f0 <vTaskDelay+0x4>
 8000750:	bd38      	pop	{r3, r4, r5, pc}
 8000752:	bf00      	nop
 8000754:	e000ed04 	.word	0xe000ed04
 8000758:	200000f0 	.word	0x200000f0
 800075c:	200000fc 	.word	0x200000fc
 8000760:	200000f4 	.word	0x200000f4
 8000764:	20000148 	.word	0x20000148

08000768 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000768:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800076a:	4d18      	ldr	r5, [pc, #96]	; (80007cc <prvIdleTask+0x64>)
 800076c:	462e      	mov	r6, r5
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800076e:	4f18      	ldr	r7, [pc, #96]	; (80007d0 <prvIdleTask+0x68>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8000770:	682b      	ldr	r3, [r5, #0]
 8000772:	b1f3      	cbz	r3, 80007b2 <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 8000774:	f7ff fea4 	bl	80004c0 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8000778:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 800077a:	f7ff ff41 	bl	8000600 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800077e:	2c00      	cmp	r4, #0
 8000780:	d0f6      	beq.n	8000770 <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8000782:	f000 fc39 	bl	8000ff8 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <prvIdleTask+0x68>)
 8000788:	68db      	ldr	r3, [r3, #12]
 800078a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800078c:	1d20      	adds	r0, r4, #4
 800078e:	f000 fd9b 	bl	80012c8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8000792:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <prvIdleTask+0x6c>)
 8000794:	6813      	ldr	r3, [r2, #0]
 8000796:	3b01      	subs	r3, #1
 8000798:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800079a:	6833      	ldr	r3, [r6, #0]
 800079c:	3b01      	subs	r3, #1
 800079e:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 80007a0:	f000 fc4c 	bl	800103c <vPortExitCritical>
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 80007a4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80007a6:	f000 fe55 	bl	8001454 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 80007aa:	4620      	mov	r0, r4
 80007ac:	f000 fe52 	bl	8001454 <vPortFree>
 80007b0:	e7de      	b.n	8000770 <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <prvIdleTask+0x70>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d9d9      	bls.n	800076e <prvIdleTask+0x6>
			{
				taskYIELD();
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <prvIdleTask+0x74>)
 80007bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	f3bf 8f4f 	dsb	sy
 80007c6:	f3bf 8f6f 	isb	sy
 80007ca:	e7d0      	b.n	800076e <prvIdleTask+0x6>
 80007cc:	20000034 	.word	0x20000034
 80007d0:	20000038 	.word	0x20000038
 80007d4:	20000144 	.word	0x20000144
 80007d8:	20000064 	.word	0x20000064
 80007dc:	e000ed04 	.word	0xe000ed04

080007e0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <vTaskSwitchContext+0x60>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <vTaskSwitchContext+0x64>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80007e6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80007e8:	b10a      	cbz	r2, 80007ee <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80007ea:	2201      	movs	r2, #1
 80007ec:	e025      	b.n	800083a <vTaskSwitchContext+0x5a>
	}
	else
	{
		xYieldPending = pdFALSE;
 80007ee:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <vTaskSwitchContext+0x68>)
 80007f2:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80007f4:	fab3 f383 	clz	r3, r3
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	f1c3 031f 	rsb	r3, r3, #31
 80007fe:	2214      	movs	r2, #20
 8000800:	4912      	ldr	r1, [pc, #72]	; (800084c <vTaskSwitchContext+0x6c>)
 8000802:	435a      	muls	r2, r3
 8000804:	1888      	adds	r0, r1, r2
 8000806:	588c      	ldr	r4, [r1, r2]
 8000808:	b944      	cbnz	r4, 800081c <vTaskSwitchContext+0x3c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800080a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800080e:	f383 8811 	msr	BASEPRI, r3
 8000812:	f3bf 8f6f 	isb	sy
 8000816:	f3bf 8f4f 	dsb	sy
 800081a:	e7fe      	b.n	800081a <vTaskSwitchContext+0x3a>
 800081c:	6844      	ldr	r4, [r0, #4]
 800081e:	3208      	adds	r2, #8
 8000820:	6864      	ldr	r4, [r4, #4]
 8000822:	6044      	str	r4, [r0, #4]
 8000824:	440a      	add	r2, r1
 8000826:	4294      	cmp	r4, r2
 8000828:	bf04      	itt	eq
 800082a:	6862      	ldreq	r2, [r4, #4]
 800082c:	6042      	streq	r2, [r0, #4]
 800082e:	2214      	movs	r2, #20
 8000830:	fb02 1303 	mla	r3, r2, r3, r1
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	68da      	ldr	r2, [r3, #12]
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <vTaskSwitchContext+0x70>)
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	bd10      	pop	{r4, pc}
 800083e:	bf00      	nop
 8000840:	200000f0 	.word	0x200000f0
 8000844:	2000014c 	.word	0x2000014c
 8000848:	20000148 	.word	0x20000148
 800084c:	20000064 	.word	0x20000064
 8000850:	200000f4 	.word	0x200000f4

08000854 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8000854:	b538      	push	{r3, r4, r5, lr}
 8000856:	460d      	mov	r5, r1
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 8000858:	b940      	cbnz	r0, 800086c <vTaskPlaceOnEventList+0x18>
 800085a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800085e:	f383 8811 	msr	BASEPRI, r3
 8000862:	f3bf 8f6f 	isb	sy
 8000866:	f3bf 8f4f 	dsb	sy
 800086a:	e7fe      	b.n	800086a <vTaskPlaceOnEventList+0x16>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800086c:	4c11      	ldr	r4, [pc, #68]	; (80008b4 <vTaskPlaceOnEventList+0x60>)
 800086e:	6821      	ldr	r1, [r4, #0]
 8000870:	3118      	adds	r1, #24
 8000872:	f000 fd11 	bl	8001298 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8000876:	6820      	ldr	r0, [r4, #0]
 8000878:	3004      	adds	r0, #4
 800087a:	f000 fd25 	bl	80012c8 <uxListRemove>
 800087e:	b940      	cbnz	r0, 8000892 <vTaskPlaceOnEventList+0x3e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8000880:	6823      	ldr	r3, [r4, #0]
 8000882:	490d      	ldr	r1, [pc, #52]	; (80008b8 <vTaskPlaceOnEventList+0x64>)
 8000884:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000886:	680a      	ldr	r2, [r1, #0]
 8000888:	2301      	movs	r3, #1
 800088a:	4083      	lsls	r3, r0
 800088c:	ea22 0303 	bic.w	r3, r2, r3
 8000890:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8000892:	1c6b      	adds	r3, r5, #1
 8000894:	d106      	bne.n	80008a4 <vTaskPlaceOnEventList+0x50>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8000896:	6821      	ldr	r1, [r4, #0]
 8000898:	4808      	ldr	r0, [pc, #32]	; (80008bc <vTaskPlaceOnEventList+0x68>)
 800089a:	3104      	adds	r1, #4
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800089c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80008a0:	f000 bcee 	b.w	8001280 <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <vTaskPlaceOnEventList+0x6c>)
 80008a6:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80008a8:	4428      	add	r0, r5
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80008aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80008ae:	f7ff bc9d 	b.w	80001ec <prvAddCurrentTaskToDelayedList>
 80008b2:	bf00      	nop
 80008b4:	200000f4 	.word	0x200000f4
 80008b8:	20000148 	.word	0x20000148
 80008bc:	2000004c 	.word	0x2000004c
 80008c0:	200000fc 	.word	0x200000fc

080008c4 <xTaskRemoveFromEventList>:
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80008c4:	68c3      	ldr	r3, [r0, #12]

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80008c6:	b570      	push	{r4, r5, r6, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80008c8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80008ca:	b944      	cbnz	r4, 80008de <xTaskRemoveFromEventList+0x1a>
 80008cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008d0:	f383 8811 	msr	BASEPRI, r3
 80008d4:	f3bf 8f6f 	isb	sy
 80008d8:	f3bf 8f4f 	dsb	sy
 80008dc:	e7fe      	b.n	80008dc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80008de:	f104 0518 	add.w	r5, r4, #24
 80008e2:	4628      	mov	r0, r5
 80008e4:	f000 fcf0 	bl	80012c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <xTaskRemoveFromEventList+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	b983      	cbnz	r3, 8000910 <xTaskRemoveFromEventList+0x4c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80008ee:	1d26      	adds	r6, r4, #4
 80008f0:	4630      	mov	r0, r6
 80008f2:	f000 fce9 	bl	80012c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80008f6:	490f      	ldr	r1, [pc, #60]	; (8000934 <xTaskRemoveFromEventList+0x70>)
 80008f8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80008fa:	680a      	ldr	r2, [r1, #0]
 80008fc:	2301      	movs	r3, #1
 80008fe:	40ab      	lsls	r3, r5
 8000900:	4313      	orrs	r3, r2
 8000902:	600b      	str	r3, [r1, #0]
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <xTaskRemoveFromEventList+0x74>)
 8000906:	2014      	movs	r0, #20
 8000908:	4631      	mov	r1, r6
 800090a:	fb00 3005 	mla	r0, r0, r5, r3
 800090e:	e001      	b.n	8000914 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8000910:	480a      	ldr	r0, [pc, #40]	; (800093c <xTaskRemoveFromEventList+0x78>)
 8000912:	4629      	mov	r1, r5
 8000914:	f000 fcb4 	bl	8001280 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <xTaskRemoveFromEventList+0x7c>)
 800091a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000920:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8000922:	bf83      	ittte	hi
 8000924:	4b07      	ldrhi	r3, [pc, #28]	; (8000944 <xTaskRemoveFromEventList+0x80>)
 8000926:	2001      	movhi	r0, #1
 8000928:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
 800092a:	2000      	movls	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 800092c:	bd70      	pop	{r4, r5, r6, pc}
 800092e:	bf00      	nop
 8000930:	200000f0 	.word	0x200000f0
 8000934:	20000148 	.word	0x20000148
 8000938:	20000064 	.word	0x20000064
 800093c:	20000104 	.word	0x20000104
 8000940:	200000f4 	.word	0x200000f4
 8000944:	2000014c 	.word	0x2000014c

08000948 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8000948:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 800094a:	b908      	cbnz	r0, 8000950 <vTaskSetTimeOutState+0x8>
 800094c:	f7ff fd58 	bl	8000400 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <vTaskSetTimeOutState+0x18>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8000956:	4b03      	ldr	r3, [pc, #12]	; (8000964 <vTaskSetTimeOutState+0x1c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	6043      	str	r3, [r0, #4]
 800095c:	bd08      	pop	{r3, pc}
 800095e:	bf00      	nop
 8000960:	20000028 	.word	0x20000028
 8000964:	200000fc 	.word	0x200000fc

08000968 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8000968:	b538      	push	{r3, r4, r5, lr}
 800096a:	460d      	mov	r5, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800096c:	4604      	mov	r4, r0
 800096e:	b940      	cbnz	r0, 8000982 <xTaskCheckForTimeOut+0x1a>
 8000970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000974:	f383 8811 	msr	BASEPRI, r3
 8000978:	f3bf 8f6f 	isb	sy
 800097c:	f3bf 8f4f 	dsb	sy
 8000980:	e7fe      	b.n	8000980 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8000982:	b941      	cbnz	r1, 8000996 <xTaskCheckForTimeOut+0x2e>
 8000984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000988:	f383 8811 	msr	BASEPRI, r3
 800098c:	f3bf 8f6f 	isb	sy
 8000990:	f3bf 8f4f 	dsb	sy
 8000994:	e7fe      	b.n	8000994 <xTaskCheckForTimeOut+0x2c>

	taskENTER_CRITICAL();
 8000996:	f000 fb2f 	bl	8000ff8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <xTaskCheckForTimeOut+0x6c>)
 800099c:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 800099e:	682b      	ldr	r3, [r5, #0]
 80009a0:	1c5a      	adds	r2, r3, #1
 80009a2:	d010      	beq.n	80009c6 <xTaskCheckForTimeOut+0x5e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80009a4:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <xTaskCheckForTimeOut+0x70>)
 80009a6:	6820      	ldr	r0, [r4, #0]
 80009a8:	6812      	ldr	r2, [r2, #0]
 80009aa:	4290      	cmp	r0, r2
 80009ac:	6862      	ldr	r2, [r4, #4]
 80009ae:	d001      	beq.n	80009b4 <xTaskCheckForTimeOut+0x4c>
 80009b0:	4291      	cmp	r1, r2
 80009b2:	d20a      	bcs.n	80009ca <xTaskCheckForTimeOut+0x62>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 80009b4:	1a88      	subs	r0, r1, r2
 80009b6:	4283      	cmp	r3, r0
 80009b8:	d907      	bls.n	80009ca <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 80009ba:	1a52      	subs	r2, r2, r1
 80009bc:	4413      	add	r3, r2
 80009be:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80009c0:	4620      	mov	r0, r4
 80009c2:	f7ff ffc1 	bl	8000948 <vTaskSetTimeOutState>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
 80009c6:	2400      	movs	r4, #0
 80009c8:	e000      	b.n	80009cc <xTaskCheckForTimeOut+0x64>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 80009ca:	2401      	movs	r4, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 80009cc:	f000 fb36 	bl	800103c <vPortExitCritical>

	return xReturn;
}
 80009d0:	4620      	mov	r0, r4
 80009d2:	bd38      	pop	{r3, r4, r5, pc}
 80009d4:	200000fc 	.word	0x200000fc
 80009d8:	20000028 	.word	0x20000028

080009dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 80009dc:	4b01      	ldr	r3, [pc, #4]	; (80009e4 <vTaskMissedYield+0x8>)
 80009de:	2201      	movs	r2, #1
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	4770      	bx	lr
 80009e4:	2000014c 	.word	0x2000014c

080009e8 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <xTaskGetSchedulerState+0x18>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	b133      	cbz	r3, 80009fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <xTaskGetSchedulerState+0x1c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80009f4:	bf0c      	ite	eq
 80009f6:	2002      	moveq	r0, #2
 80009f8:	2000      	movne	r0, #0
 80009fa:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80009fc:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 80009fe:	4770      	bx	lr
 8000a00:	20000030 	.word	0x20000030
 8000a04:	200000f0 	.word	0x200000f0

08000a08 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8000a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8000a0c:	4604      	mov	r4, r0
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	d038      	beq.n	8000a84 <vTaskPriorityInherit+0x7c>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8000a12:	4d1d      	ldr	r5, [pc, #116]	; (8000a88 <vTaskPriorityInherit+0x80>)
 8000a14:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a16:	682a      	ldr	r2, [r5, #0]
 8000a18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d232      	bcs.n	8000a84 <vTaskPriorityInherit+0x7c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8000a1e:	6982      	ldr	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8000a20:	4e1a      	ldr	r6, [pc, #104]	; (8000a8c <vTaskPriorityInherit+0x84>)
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8000a22:	2a00      	cmp	r2, #0
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a24:	bfa1      	itttt	ge
 8000a26:	682a      	ldrge	r2, [r5, #0]
 8000a28:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8000a2a:	f1c2 0207 	rsbge	r2, r2, #7
 8000a2e:	6182      	strge	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8000a30:	2714      	movs	r7, #20
 8000a32:	6942      	ldr	r2, [r0, #20]
 8000a34:	fb07 6303 	mla	r3, r7, r3, r6
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d120      	bne.n	8000a7e <vTaskPriorityInherit+0x76>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8000a3c:	f100 0804 	add.w	r8, r0, #4
 8000a40:	4640      	mov	r0, r8
 8000a42:	f000 fc41 	bl	80012c8 <uxListRemove>
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <vTaskPriorityInherit+0x88>)
 8000a48:	b948      	cbnz	r0, 8000a5e <vTaskPriorityInherit+0x56>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000a4a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000a4c:	4347      	muls	r7, r0
 8000a4e:	59f2      	ldr	r2, [r6, r7]
 8000a50:	b92a      	cbnz	r2, 8000a5e <vTaskPriorityInherit+0x56>
 8000a52:	6819      	ldr	r1, [r3, #0]
 8000a54:	2201      	movs	r2, #1
 8000a56:	4082      	lsls	r2, r0
 8000a58:	ea21 0202 	bic.w	r2, r1, r2
 8000a5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8000a5e:	682a      	ldr	r2, [r5, #0]
 8000a60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000a62:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8000a64:	2001      	movs	r0, #1
 8000a66:	681c      	ldr	r4, [r3, #0]
 8000a68:	4090      	lsls	r0, r2
 8000a6a:	4320      	orrs	r0, r4
 8000a6c:	6018      	str	r0, [r3, #0]
 8000a6e:	2014      	movs	r0, #20
 8000a70:	4641      	mov	r1, r8
 8000a72:	fb00 6002 	mla	r0, r0, r2, r6
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8000a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 8000a7a:	f000 bc01 	b.w	8001280 <vListInsertEnd>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8000a7e:	682b      	ldr	r3, [r5, #0]
 8000a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a82:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a88:	200000f4 	.word	0x200000f4
 8000a8c:	20000064 	.word	0x20000064
 8000a90:	20000148 	.word	0x20000148

08000a94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8000a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 8000a96:	4604      	mov	r4, r0
 8000a98:	b908      	cbnz	r0, 8000a9e <xTaskPriorityDisinherit+0xa>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8000a9e:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <xTaskPriorityDisinherit+0x94>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4298      	cmp	r0, r3
 8000aa4:	d008      	beq.n	8000ab8 <xTaskPriorityDisinherit+0x24>
 8000aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aaa:	f383 8811 	msr	BASEPRI, r3
 8000aae:	f3bf 8f6f 	isb	sy
 8000ab2:	f3bf 8f4f 	dsb	sy
 8000ab6:	e7fe      	b.n	8000ab6 <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
 8000ab8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000aba:	b943      	cbnz	r3, 8000ace <xTaskPriorityDisinherit+0x3a>
 8000abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ac0:	f383 8811 	msr	BASEPRI, r3
 8000ac4:	f3bf 8f6f 	isb	sy
 8000ac8:	f3bf 8f4f 	dsb	sy
 8000acc:	e7fe      	b.n	8000acc <xTaskPriorityDisinherit+0x38>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8000ace:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8000ad0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8000ad2:	3b01      	subs	r3, #1

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8000ad4:	4291      	cmp	r1, r2
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8000ad6:	6503      	str	r3, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8000ad8:	d0df      	beq.n	8000a9a <xTaskPriorityDisinherit+0x6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1dd      	bne.n	8000a9a <xTaskPriorityDisinherit+0x6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8000ade:	1d05      	adds	r5, r0, #4
 8000ae0:	4628      	mov	r0, r5
 8000ae2:	f000 fbf1 	bl	80012c8 <uxListRemove>
 8000ae6:	4e11      	ldr	r6, [pc, #68]	; (8000b2c <xTaskPriorityDisinherit+0x98>)
 8000ae8:	4a11      	ldr	r2, [pc, #68]	; (8000b30 <xTaskPriorityDisinherit+0x9c>)
 8000aea:	b950      	cbnz	r0, 8000b02 <xTaskPriorityDisinherit+0x6e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000aec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8000aee:	2114      	movs	r1, #20
 8000af0:	4379      	muls	r1, r7
 8000af2:	5873      	ldr	r3, [r6, r1]
 8000af4:	b92b      	cbnz	r3, 8000b02 <xTaskPriorityDisinherit+0x6e>
 8000af6:	6810      	ldr	r0, [r2, #0]
 8000af8:	2301      	movs	r3, #1
 8000afa:	40bb      	lsls	r3, r7
 8000afc:	ea20 0303 	bic.w	r3, r0, r3
 8000b00:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8000b02:	6ce3      	ldr	r3, [r4, #76]	; 0x4c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
 8000b04:	6810      	ldr	r0, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8000b06:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b08:	f1c3 0107 	rsb	r1, r3, #7
 8000b0c:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8000b0e:	2401      	movs	r4, #1
 8000b10:	fa04 f103 	lsl.w	r1, r4, r3
 8000b14:	4308      	orrs	r0, r1
 8000b16:	6010      	str	r0, [r2, #0]
 8000b18:	2014      	movs	r0, #20
 8000b1a:	fb00 6003 	mla	r0, r0, r3, r6
 8000b1e:	4629      	mov	r1, r5
 8000b20:	f000 fbae 	bl	8001280 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8000b24:	4620      	mov	r0, r4
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8000b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b28:	200000f4 	.word	0x200000f4
 8000b2c:	20000064 	.word	0x20000064
 8000b30:	20000148 	.word	0x20000148

08000b34 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <pvTaskIncrementMutexHeldCount+0x14>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	b11a      	cbz	r2, 8000b42 <pvTaskIncrementMutexHeldCount+0xe>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8000b3a:	6819      	ldr	r1, [r3, #0]
 8000b3c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8000b3e:	3201      	adds	r2, #1
 8000b40:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 8000b42:	6818      	ldr	r0, [r3, #0]
	}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	200000f4 	.word	0x200000f4

08000b4c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000b4c:	b538      	push	{r3, r4, r5, lr}
 8000b4e:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000b50:	6c02      	ldr	r2, [r0, #64]	; 0x40

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000b52:	4604      	mov	r4, r0
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000b54:	b932      	cbnz	r2, 8000b64 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000b56:	6805      	ldr	r5, [r0, #0]
 8000b58:	bb45      	cbnz	r5, 8000bac <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8000b5a:	6840      	ldr	r0, [r0, #4]
 8000b5c:	f7ff ff9a 	bl	8000a94 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8000b60:	6065      	str	r5, [r4, #4]
 8000b62:	e024      	b.n	8000bae <prvCopyDataToQueue+0x62>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000b64:	b96d      	cbnz	r5, 8000b82 <prvCopyDataToQueue+0x36>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8000b66:	6880      	ldr	r0, [r0, #8]
 8000b68:	f002 fcaa 	bl	80034c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000b6c:	68a2      	ldr	r2, [r4, #8]
 8000b6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b70:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000b72:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000b74:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d318      	bcc.n	8000bac <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b7a:	6823      	ldr	r3, [r4, #0]
 8000b7c:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 8000b7e:	4628      	mov	r0, r5
 8000b80:	e015      	b.n	8000bae <prvCopyDataToQueue+0x62>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b82:	68c0      	ldr	r0, [r0, #12]
 8000b84:	f002 fc9c 	bl	80034c0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8000b88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b8a:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000b8c:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8000b8e:	425b      	negs	r3, r3
 8000b90:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000b92:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8000b94:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8000b96:	bf3e      	ittt	cc
 8000b98:	6862      	ldrcc	r2, [r4, #4]
 8000b9a:	189b      	addcc	r3, r3, r2
 8000b9c:	60e3      	strcc	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8000b9e:	2d02      	cmp	r5, #2
 8000ba0:	d104      	bne.n	8000bac <prvCopyDataToQueue+0x60>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ba2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ba4:	b113      	cbz	r3, 8000bac <prvCopyDataToQueue+0x60>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8000ba6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 8000bac:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8000bae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 8000bb4:	bd38      	pop	{r3, r4, r5, pc}

08000bb6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000bba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000bbc:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000bbe:	b162      	cbz	r2, 8000bda <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000bc0:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000bc2:	685c      	ldr	r4, [r3, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000bc4:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000bc6:	42a1      	cmp	r1, r4

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000bc8:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8000bca:	bf24      	itt	cs
 8000bcc:	6819      	ldrcs	r1, [r3, #0]
 8000bce:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8000bd0:	68d9      	ldr	r1, [r3, #12]
	}
}
 8000bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8000bd6:	f002 bc73 	b.w	80034c0 <memcpy>
	}
}
 8000bda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000be0:	b538      	push	{r3, r4, r5, lr}
 8000be2:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000be4:	f000 fa08 	bl	8000ff8 <vPortEnterCritical>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000be8:	f104 0524 	add.w	r5, r4, #36	; 0x24
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8000bec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	dd0b      	ble.n	8000c0a <prvUnlockQueue+0x2a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bf4:	b14b      	cbz	r3, 8000c0a <prvUnlockQueue+0x2a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000bf6:	4628      	mov	r0, r5
 8000bf8:	f7ff fe64 	bl	80008c4 <xTaskRemoveFromEventList>
 8000bfc:	b108      	cbz	r0, 8000c02 <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8000bfe:	f7ff feed 	bl	80009dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8000c02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c04:	3b01      	subs	r3, #1
 8000c06:	64a3      	str	r3, [r4, #72]	; 0x48
 8000c08:	e7f0      	b.n	8000bec <prvUnlockQueue+0xc>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8000c10:	f000 fa14 	bl	800103c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8000c14:	f000 f9f0 	bl	8000ff8 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c18:	f104 0510 	add.w	r5, r4, #16
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8000c1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	dd0b      	ble.n	8000c3a <prvUnlockQueue+0x5a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c22:	6923      	ldr	r3, [r4, #16]
 8000c24:	b14b      	cbz	r3, 8000c3a <prvUnlockQueue+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c26:	4628      	mov	r0, r5
 8000c28:	f7ff fe4c 	bl	80008c4 <xTaskRemoveFromEventList>
 8000c2c:	b108      	cbz	r0, 8000c32 <prvUnlockQueue+0x52>
				{
					vTaskMissedYield();
 8000c2e:	f7ff fed5 	bl	80009dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 8000c32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c34:	3b01      	subs	r3, #1
 8000c36:	6463      	str	r3, [r4, #68]	; 0x44
 8000c38:	e7f0      	b.n	8000c1c <prvUnlockQueue+0x3c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8000c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 8000c44:	f000 b9fa 	b.w	800103c <vPortExitCritical>

08000c48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000c48:	b538      	push	{r3, r4, r5, lr}
 8000c4a:	460d      	mov	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	b940      	cbnz	r0, 8000c62 <xQueueGenericReset+0x1a>
 8000c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c54:	f383 8811 	msr	BASEPRI, r3
 8000c58:	f3bf 8f6f 	isb	sy
 8000c5c:	f3bf 8f4f 	dsb	sy
 8000c60:	e7fe      	b.n	8000c60 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8000c62:	f000 f9c9 	bl	8000ff8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000c66:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000c68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c6a:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000c6c:	60a2      	str	r2, [r4, #8]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000c6e:	4343      	muls	r3, r0
 8000c70:	18d1      	adds	r1, r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000c72:	1a1b      	subs	r3, r3, r0
 8000c74:	4413      	add	r3, r2

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000c76:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000c78:	60e3      	str	r3, [r4, #12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000c7a:	2100      	movs	r1, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000c80:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8000c82:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8000c84:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8000c86:	b985      	cbnz	r5, 8000caa <xQueueGenericReset+0x62>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c88:	6923      	ldr	r3, [r4, #16]
 8000c8a:	b1b3      	cbz	r3, 8000cba <xQueueGenericReset+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8000c8c:	f104 0010 	add.w	r0, r4, #16
 8000c90:	f7ff fe18 	bl	80008c4 <xTaskRemoveFromEventList>
 8000c94:	2801      	cmp	r0, #1
 8000c96:	d110      	bne.n	8000cba <xQueueGenericReset+0x72>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000c98:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <xQueueGenericReset+0x7c>)
 8000c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	f3bf 8f4f 	dsb	sy
 8000ca4:	f3bf 8f6f 	isb	sy
 8000ca8:	e007      	b.n	8000cba <xQueueGenericReset+0x72>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000caa:	f104 0010 	add.w	r0, r4, #16
 8000cae:	f000 fad9 	bl	8001264 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000cb2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000cb6:	f000 fad5 	bl	8001264 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000cba:	f000 f9bf 	bl	800103c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	bd38      	pop	{r3, r4, r5, pc}
 8000cc2:	bf00      	nop
 8000cc4:	e000ed04 	.word	0xe000ed04

08000cc8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8000cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cca:	460d      	mov	r5, r1
 8000ccc:	4617      	mov	r7, r2

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000cce:	4606      	mov	r6, r0
 8000cd0:	b940      	cbnz	r0, 8000ce4 <xQueueGenericCreate+0x1c>
 8000cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cd6:	f383 8811 	msr	BASEPRI, r3
 8000cda:	f3bf 8f6f 	isb	sy
 8000cde:	f3bf 8f4f 	dsb	sy
 8000ce2:	e7fe      	b.n	8000ce2 <xQueueGenericCreate+0x1a>

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000ce4:	b111      	cbz	r1, 8000cec <xQueueGenericCreate+0x24>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ce6:	4348      	muls	r0, r1
 8000ce8:	3001      	adds	r0, #1
 8000cea:	e000      	b.n	8000cee <xQueueGenericCreate+0x26>
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
 8000cec:	4608      	mov	r0, r1
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8000cee:	3054      	adds	r0, #84	; 0x54
 8000cf0:	f000 fb1e 	bl	8001330 <pvPortMalloc>

	if( pxNewQueue != NULL )
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	b130      	cbz	r0, 8000d06 <xQueueGenericCreate+0x3e>
	{
		if( uxItemSize == ( UBaseType_t ) 0 )
 8000cf8:	b90d      	cbnz	r5, 8000cfe <xQueueGenericCreate+0x36>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000cfa:	6020      	str	r0, [r4, #0]
 8000cfc:	e00c      	b.n	8000d18 <xQueueGenericCreate+0x50>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000cfe:	f100 0354 	add.w	r3, r0, #84	; 0x54
 8000d02:	6003      	str	r3, [r0, #0]
 8000d04:	e008      	b.n	8000d18 <xQueueGenericCreate+0x50>
 8000d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d0a:	f383 8811 	msr	BASEPRI, r3
 8000d0e:	f3bf 8f6f 	isb	sy
 8000d12:	f3bf 8f4f 	dsb	sy
 8000d16:	e7fe      	b.n	8000d16 <xQueueGenericCreate+0x4e>
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
 8000d18:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 8000d1a:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f7ff ff92 	bl	8000c48 <xQueueGenericReset>

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
 8000d24:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
	}

	configASSERT( xReturn );

	return xReturn;
}
 8000d28:	4620      	mov	r0, r4
 8000d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000d2c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d30:	460e      	mov	r6, r1
 8000d32:	4690      	mov	r8, r2
 8000d34:	461d      	mov	r5, r3
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8000d36:	4604      	mov	r4, r0
 8000d38:	b940      	cbnz	r0, 8000d4c <xQueueGenericSendFromISR+0x20>
 8000d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d3e:	f383 8811 	msr	BASEPRI, r3
 8000d42:	f3bf 8f6f 	isb	sy
 8000d46:	f3bf 8f4f 	dsb	sy
 8000d4a:	e7fe      	b.n	8000d4a <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d4c:	b951      	cbnz	r1, 8000d64 <xQueueGenericSendFromISR+0x38>
 8000d4e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000d50:	b143      	cbz	r3, 8000d64 <xQueueGenericSendFromISR+0x38>
 8000d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d56:	f383 8811 	msr	BASEPRI, r3
 8000d5a:	f3bf 8f6f 	isb	sy
 8000d5e:	f3bf 8f4f 	dsb	sy
 8000d62:	e7fe      	b.n	8000d62 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d64:	2d02      	cmp	r5, #2
 8000d66:	d10b      	bne.n	8000d80 <xQueueGenericSendFromISR+0x54>
 8000d68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d008      	beq.n	8000d80 <xQueueGenericSendFromISR+0x54>
 8000d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d72:	f383 8811 	msr	BASEPRI, r3
 8000d76:	f3bf 8f6f 	isb	sy
 8000d7a:	f3bf 8f4f 	dsb	sy
 8000d7e:	e7fe      	b.n	8000d7e <xQueueGenericSendFromISR+0x52>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000d80:	f000 fa42 	bl	8001208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000d84:	f3ef 8711 	mrs	r7, BASEPRI
 8000d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d8c:	f383 8811 	msr	BASEPRI, r3
 8000d90:	f3bf 8f6f 	isb	sy
 8000d94:	f3bf 8f4f 	dsb	sy
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000d98:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000d9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d301      	bcc.n	8000da4 <xQueueGenericSendFromISR+0x78>
 8000da0:	2d02      	cmp	r5, #2
 8000da2:	d11a      	bne.n	8000dda <xQueueGenericSendFromISR+0xae>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000da4:	462a      	mov	r2, r5
 8000da6:	4631      	mov	r1, r6
 8000da8:	4620      	mov	r0, r4
 8000daa:	f7ff fecf 	bl	8000b4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8000dae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000db0:	3301      	adds	r3, #1
 8000db2:	d10d      	bne.n	8000dd0 <xQueueGenericSendFromISR+0xa4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000db4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000db6:	b173      	cbz	r3, 8000dd6 <xQueueGenericSendFromISR+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000db8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000dbc:	f7ff fd82 	bl	80008c4 <xTaskRemoveFromEventList>
 8000dc0:	b148      	cbz	r0, 8000dd6 <xQueueGenericSendFromISR+0xaa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000dc2:	f1b8 0f00 	cmp.w	r8, #0
 8000dc6:	d006      	beq.n	8000dd6 <xQueueGenericSendFromISR+0xaa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f8c8 0000 	str.w	r0, [r8]
 8000dce:	e005      	b.n	8000ddc <xQueueGenericSendFromISR+0xb0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8000dd0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	e000      	b.n	8000ddc <xQueueGenericSendFromISR+0xb0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000dda:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000ddc:	f387 8811 	msr	BASEPRI, r7
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 8000de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000de4 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	4688      	mov	r8, r1
 8000dea:	9201      	str	r2, [sp, #4]
 8000dec:	469a      	mov	sl, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8000dee:	4604      	mov	r4, r0
 8000df0:	b940      	cbnz	r0, 8000e04 <xQueueGenericReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df6:	f383 8811 	msr	BASEPRI, r3
 8000dfa:	f3bf 8f6f 	isb	sy
 8000dfe:	f3bf 8f4f 	dsb	sy
 8000e02:	e7fe      	b.n	8000e02 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000e04:	b951      	cbnz	r1, 8000e1c <xQueueGenericReceive+0x38>
 8000e06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000e08:	b143      	cbz	r3, 8000e1c <xQueueGenericReceive+0x38>
 8000e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e0e:	f383 8811 	msr	BASEPRI, r3
 8000e12:	f3bf 8f6f 	isb	sy
 8000e16:	f3bf 8f4f 	dsb	sy
 8000e1a:	e7fe      	b.n	8000e1a <xQueueGenericReceive+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000e1c:	f7ff fde4 	bl	80009e8 <xTaskGetSchedulerState>
 8000e20:	b910      	cbnz	r0, 8000e28 <xQueueGenericReceive+0x44>
 8000e22:	9e01      	ldr	r6, [sp, #4]
 8000e24:	b10e      	cbz	r6, 8000e2a <xQueueGenericReceive+0x46>
 8000e26:	e085      	b.n	8000f34 <xQueueGenericReceive+0x150>
 8000e28:	2600      	movs	r6, #0

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 8000e2a:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8000f4c <xQueueGenericReceive+0x168>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8000e2e:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8000e30:	f000 f8e2 	bl	8000ff8 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e36:	b363      	cbz	r3, 8000e92 <xQueueGenericReceive+0xae>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000e38:	4641      	mov	r1, r8
 8000e3a:	4620      	mov	r0, r4
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8000e3c:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000e3e:	f7ff feba 	bl	8000bb6 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8000e42:	f1ba 0f00 	cmp.w	sl, #0
 8000e46:	d110      	bne.n	8000e6a <xQueueGenericReceive+0x86>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8000e48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e4e:	6823      	ldr	r3, [r4, #0]
 8000e50:	b913      	cbnz	r3, 8000e58 <xQueueGenericReceive+0x74>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8000e52:	f7ff fe6f 	bl	8000b34 <pvTaskIncrementMutexHeldCount>
 8000e56:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e58:	6923      	ldr	r3, [r4, #16]
 8000e5a:	b1b3      	cbz	r3, 8000e8a <xQueueGenericReceive+0xa6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8000e5c:	f104 0010 	add.w	r0, r4, #16
 8000e60:	f7ff fd30 	bl	80008c4 <xTaskRemoveFromEventList>
 8000e64:	2801      	cmp	r0, #1
 8000e66:	d110      	bne.n	8000e8a <xQueueGenericReceive+0xa6>
 8000e68:	e007      	b.n	8000e7a <xQueueGenericReceive+0x96>
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8000e6c:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e6e:	b163      	cbz	r3, 8000e8a <xQueueGenericReceive+0xa6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e70:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000e74:	f7ff fd26 	bl	80008c4 <xTaskRemoveFromEventList>
 8000e78:	b138      	cbz	r0, 8000e8a <xQueueGenericReceive+0xa6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8000e7a:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <xQueueGenericReceive+0x168>)
 8000e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	f3bf 8f4f 	dsb	sy
 8000e86:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8000e8a:	f000 f8d7 	bl	800103c <vPortExitCritical>
				return pdPASS;
 8000e8e:	2001      	movs	r0, #1
 8000e90:	e059      	b.n	8000f46 <xQueueGenericReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e92:	9d01      	ldr	r5, [sp, #4]
 8000e94:	b91d      	cbnz	r5, 8000e9e <xQueueGenericReceive+0xba>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e96:	f000 f8d1 	bl	800103c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	e053      	b.n	8000f46 <xQueueGenericReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e9e:	b916      	cbnz	r6, 8000ea6 <xQueueGenericReceive+0xc2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000ea0:	a802      	add	r0, sp, #8
 8000ea2:	f7ff fd51 	bl	8000948 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000ea6:	f000 f8c9 	bl	800103c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000eaa:	f7ff fb09 	bl	80004c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000eae:	f000 f8a3 	bl	8000ff8 <vPortEnterCritical>
 8000eb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	bf08      	it	eq
 8000eb8:	6467      	streq	r7, [r4, #68]	; 0x44
 8000eba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	bf08      	it	eq
 8000ec0:	64a7      	streq	r7, [r4, #72]	; 0x48
 8000ec2:	f000 f8bb 	bl	800103c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ec6:	a901      	add	r1, sp, #4
 8000ec8:	a802      	add	r0, sp, #8
 8000eca:	f7ff fd4d 	bl	8000968 <xTaskCheckForTimeOut>
 8000ece:	bb50      	cbnz	r0, 8000f26 <xQueueGenericReceive+0x142>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000ed0:	f000 f892 	bl	8000ff8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000ed4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8000ed6:	f000 f8b1 	bl	800103c <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000eda:	b9f5      	cbnz	r5, 8000f1a <xQueueGenericReceive+0x136>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000edc:	6823      	ldr	r3, [r4, #0]
 8000ede:	b933      	cbnz	r3, 8000eee <xQueueGenericReceive+0x10a>
					{
						taskENTER_CRITICAL();
 8000ee0:	f000 f88a 	bl	8000ff8 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8000ee4:	6860      	ldr	r0, [r4, #4]
 8000ee6:	f7ff fd8f 	bl	8000a08 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8000eea:	f000 f8a7 	bl	800103c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000eee:	9901      	ldr	r1, [sp, #4]
 8000ef0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000ef4:	f7ff fcae 	bl	8000854 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000ef8:	4620      	mov	r0, r4
 8000efa:	f7ff fe71 	bl	8000be0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000efe:	f7ff fb7f 	bl	8000600 <xTaskResumeAll>
 8000f02:	b108      	cbz	r0, 8000f08 <xQueueGenericReceive+0x124>
 8000f04:	2601      	movs	r6, #1
 8000f06:	e793      	b.n	8000e30 <xQueueGenericReceive+0x4c>
				{
					portYIELD_WITHIN_API();
 8000f08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f0c:	f8c9 3000 	str.w	r3, [r9]
 8000f10:	f3bf 8f4f 	dsb	sy
 8000f14:	f3bf 8f6f 	isb	sy
 8000f18:	e7f4      	b.n	8000f04 <xQueueGenericReceive+0x120>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	f7ff fe60 	bl	8000be0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000f20:	f7ff fb6e 	bl	8000600 <xTaskResumeAll>
 8000f24:	e7ee      	b.n	8000f04 <xQueueGenericReceive+0x120>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8000f26:	4620      	mov	r0, r4
 8000f28:	f7ff fe5a 	bl	8000be0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000f2c:	f7ff fb68 	bl	8000600 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8000f30:	2000      	movs	r0, #0
 8000f32:	e008      	b.n	8000f46 <xQueueGenericReceive+0x162>
 8000f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f38:	f383 8811 	msr	BASEPRI, r3
 8000f3c:	f3bf 8f6f 	isb	sy
 8000f40:	f3bf 8f4f 	dsb	sy
 8000f44:	e7fe      	b.n	8000f44 <xQueueGenericReceive+0x160>
		}
	}
}
 8000f46:	b004      	add	sp, #16
 8000f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4c:	e000ed04 	.word	0xe000ed04

08000f50 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <prvTaskExitError+0x2c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	d008      	beq.n	8000f6a <prvTaskExitError+0x1a>
 8000f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f5c:	f383 8811 	msr	BASEPRI, r3
 8000f60:	f3bf 8f6f 	isb	sy
 8000f64:	f3bf 8f4f 	dsb	sy
 8000f68:	e7fe      	b.n	8000f68 <prvTaskExitError+0x18>
 8000f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f6e:	f383 8811 	msr	BASEPRI, r3
 8000f72:	f3bf 8f6f 	isb	sy
 8000f76:	f3bf 8f4f 	dsb	sy
 8000f7a:	e7fe      	b.n	8000f7a <prvTaskExitError+0x2a>
 8000f7c:	20000000 	.word	0x20000000

08000f80 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000f80:	4806      	ldr	r0, [pc, #24]	; (8000f9c <prvPortStartFirstTask+0x1c>)
 8000f82:	6800      	ldr	r0, [r0, #0]
 8000f84:	6800      	ldr	r0, [r0, #0]
 8000f86:	f380 8808 	msr	MSP, r0
 8000f8a:	b662      	cpsie	i
 8000f8c:	b661      	cpsie	f
 8000f8e:	f3bf 8f4f 	dsb	sy
 8000f92:	f3bf 8f6f 	isb	sy
 8000f96:	df00      	svc	0
 8000f98:	bf00      	nop
 8000f9a:	0000      	.short	0x0000
 8000f9c:	e000ed08 	.word	0xe000ed08

08000fa0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000fa0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000fb0 <vPortEnableVFP+0x10>
 8000fa4:	6801      	ldr	r1, [r0, #0]
 8000fa6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000faa:	6001      	str	r1, [r0, #0]
 8000fac:	4770      	bx	lr
 8000fae:	0000      	.short	0x0000
 8000fb0:	e000ed88 	.word	0xe000ed88

08000fb4 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000fb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8000fb8:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <pxPortInitialiseStack+0x20>)
 8000fbe:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000fc2:	f06f 0302 	mvn.w	r3, #2
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000fc6:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000fca:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8000fce:	3844      	subs	r0, #68	; 0x44
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	08000f51 	.word	0x08000f51

08000fd8 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <pxCurrentTCBConst2>)
 8000fda:	6819      	ldr	r1, [r3, #0]
 8000fdc:	6808      	ldr	r0, [r1, #0]
 8000fde:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fe2:	f380 8809 	msr	PSP, r0
 8000fe6:	f3bf 8f6f 	isb	sy
 8000fea:	f04f 0000 	mov.w	r0, #0
 8000fee:	f380 8811 	msr	BASEPRI, r0
 8000ff2:	4770      	bx	lr

08000ff4 <pxCurrentTCBConst2>:
 8000ff4:	200000f4 	.word	0x200000f4

08000ff8 <vPortEnterCritical>:
 8000ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ffc:	f383 8811 	msr	BASEPRI, r3
 8001000:	f3bf 8f6f 	isb	sy
 8001004:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <vPortEnterCritical+0x3c>)
 800100a:	6813      	ldr	r3, [r2, #0]
 800100c:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800100e:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001010:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001012:	d10d      	bne.n	8001030 <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <vPortEnterCritical+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f013 0fff 	tst.w	r3, #255	; 0xff
 800101c:	d008      	beq.n	8001030 <vPortEnterCritical+0x38>
 800101e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001022:	f383 8811 	msr	BASEPRI, r3
 8001026:	f3bf 8f6f 	isb	sy
 800102a:	f3bf 8f4f 	dsb	sy
 800102e:	e7fe      	b.n	800102e <vPortEnterCritical+0x36>
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000000 	.word	0x20000000
 8001038:	e000ed04 	.word	0xe000ed04

0800103c <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800103c:	4a08      	ldr	r2, [pc, #32]	; (8001060 <vPortExitCritical+0x24>)
 800103e:	6813      	ldr	r3, [r2, #0]
 8001040:	b943      	cbnz	r3, 8001054 <vPortExitCritical+0x18>
 8001042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001046:	f383 8811 	msr	BASEPRI, r3
 800104a:	f3bf 8f6f 	isb	sy
 800104e:	f3bf 8f4f 	dsb	sy
 8001052:	e7fe      	b.n	8001052 <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001054:	3b01      	subs	r3, #1
 8001056:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001058:	b90b      	cbnz	r3, 800105e <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800105a:	f383 8811 	msr	BASEPRI, r3
 800105e:	4770      	bx	lr
 8001060:	20000000 	.word	0x20000000

08001064 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001064:	f3ef 8009 	mrs	r0, PSP
 8001068:	f3bf 8f6f 	isb	sy
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <pxCurrentTCBConst>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	f01e 0f10 	tst.w	lr, #16
 8001074:	bf08      	it	eq
 8001076:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800107a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800107e:	6010      	str	r0, [r2, #0]
 8001080:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001084:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001088:	f380 8811 	msr	BASEPRI, r0
 800108c:	f3bf 8f4f 	dsb	sy
 8001090:	f3bf 8f6f 	isb	sy
 8001094:	f7ff fba4 	bl	80007e0 <vTaskSwitchContext>
 8001098:	f04f 0000 	mov.w	r0, #0
 800109c:	f380 8811 	msr	BASEPRI, r0
 80010a0:	bc08      	pop	{r3}
 80010a2:	6819      	ldr	r1, [r3, #0]
 80010a4:	6808      	ldr	r0, [r1, #0]
 80010a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010aa:	f01e 0f10 	tst.w	lr, #16
 80010ae:	bf08      	it	eq
 80010b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80010b4:	f380 8809 	msr	PSP, r0
 80010b8:	f3bf 8f6f 	isb	sy
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <pxCurrentTCBConst>:
 80010c0:	200000f4 	.word	0x200000f4

080010c4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80010c4:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80010c6:	f3ef 8311 	mrs	r3, BASEPRI
 80010ca:	f04f 0250 	mov.w	r2, #80	; 0x50
 80010ce:	f382 8811 	msr	BASEPRI, r2
 80010d2:	f3bf 8f6f 	isb	sy
 80010d6:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80010da:	f7ff f9f9 	bl	80004d0 <xTaskIncrementTick>
 80010de:	b118      	cbz	r0, 80010e8 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <xPortSysTickHandler+0x2c>)
 80010e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010e6:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80010e8:	2300      	movs	r3, #0
 80010ea:	f383 8811 	msr	BASEPRI, r3
 80010ee:	bd08      	pop	{r3, pc}
 80010f0:	e000ed04 	.word	0xe000ed04

080010f4 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <vPortSetupTimerInterrupt+0x1c>)
 80010f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <vPortSetupTimerInterrupt+0x20>)
 8001102:	3b01      	subs	r3, #1
 8001104:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <vPortSetupTimerInterrupt+0x24>)
 8001108:	2207      	movs	r2, #7
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000004 	.word	0x20000004
 8001114:	e000e014 	.word	0xe000e014
 8001118:	e000e010 	.word	0xe000e010

0800111c <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800111c:	4b31      	ldr	r3, [pc, #196]	; (80011e4 <xPortStartScheduler+0xc8>)
 800111e:	4a32      	ldr	r2, [pc, #200]	; (80011e8 <xPortStartScheduler+0xcc>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001120:	b513      	push	{r0, r1, r4, lr}
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001122:	6819      	ldr	r1, [r3, #0]
 8001124:	4291      	cmp	r1, r2
 8001126:	d108      	bne.n	800113a <xPortStartScheduler+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800112c:	f383 8811 	msr	BASEPRI, r3
 8001130:	f3bf 8f6f 	isb	sy
 8001134:	f3bf 8f4f 	dsb	sy
 8001138:	e7fe      	b.n	8001138 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <xPortStartScheduler+0xd0>)
 800113e:	429a      	cmp	r2, r3
 8001140:	d108      	bne.n	8001154 <xPortStartScheduler+0x38>
 8001142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001146:	f383 8811 	msr	BASEPRI, r3
 800114a:	f3bf 8f6f 	isb	sy
 800114e:	f3bf 8f4f 	dsb	sy
 8001152:	e7fe      	b.n	8001152 <xPortStartScheduler+0x36>
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <xPortStartScheduler+0xd4>)
 8001156:	781a      	ldrb	r2, [r3, #0]
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800115c:	22ff      	movs	r2, #255	; 0xff
 800115e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001160:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001162:	4a24      	ldr	r2, [pc, #144]	; (80011f4 <xPortStartScheduler+0xd8>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001164:	b2db      	uxtb	r3, r3
 8001166:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800116a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800116e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001172:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001174:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <xPortStartScheduler+0xdc>)
 8001176:	2207      	movs	r2, #7
 8001178:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800117a:	2100      	movs	r1, #0
 800117c:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001180:	0600      	lsls	r0, r0, #24
 8001182:	f102 34ff 	add.w	r4, r2, #4294967295
 8001186:	d508      	bpl.n	800119a <xPortStartScheduler+0x7e>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001188:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800118c:	0052      	lsls	r2, r2, #1
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	f88d 2003 	strb.w	r2, [sp, #3]
 8001194:	2101      	movs	r1, #1
 8001196:	4622      	mov	r2, r4
 8001198:	e7f0      	b.n	800117c <xPortStartScheduler+0x60>
 800119a:	b101      	cbz	r1, 800119e <xPortStartScheduler+0x82>
 800119c:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	0212      	lsls	r2, r2, #8
 80011a2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80011a6:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80011a8:	9b01      	ldr	r3, [sp, #4]
 80011aa:	4a11      	ldr	r2, [pc, #68]	; (80011f0 <xPortStartScheduler+0xd4>)
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <xPortStartScheduler+0xe0>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80011b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80011c0:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80011c2:	f7ff ff97 	bl	80010f4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <xPortStartScheduler+0xe4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80011cc:	f7ff fee8 	bl	8000fa0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80011d0:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <xPortStartScheduler+0xe8>)
 80011d2:	6813      	ldr	r3, [r2, #0]
 80011d4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80011d8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80011da:	f7ff fed1 	bl	8000f80 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80011de:	f7ff feb7 	bl	8000f50 <prvTaskExitError>
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00
 80011e8:	410fc271 	.word	0x410fc271
 80011ec:	410fc270 	.word	0x410fc270
 80011f0:	e000e400 	.word	0xe000e400
 80011f4:	20000150 	.word	0x20000150
 80011f8:	20000154 	.word	0x20000154
 80011fc:	e000ed20 	.word	0xe000ed20
 8001200:	20000000 	.word	0x20000000
 8001204:	e000ef34 	.word	0xe000ef34

08001208 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8001208:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d90e      	bls.n	800122e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001210:	4a10      	ldr	r2, [pc, #64]	; (8001254 <vPortValidateInterruptPriority+0x4c>)
 8001212:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001214:	4a10      	ldr	r2, [pc, #64]	; (8001258 <vPortValidateInterruptPriority+0x50>)
 8001216:	7812      	ldrb	r2, [r2, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d908      	bls.n	800122e <vPortValidateInterruptPriority+0x26>
 800121c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001220:	f383 8811 	msr	BASEPRI, r3
 8001224:	f3bf 8f6f 	isb	sy
 8001228:	f3bf 8f4f 	dsb	sy
 800122c:	e7fe      	b.n	800122c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <vPortValidateInterruptPriority+0x54>)
 8001230:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <vPortValidateInterruptPriority+0x58>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6812      	ldr	r2, [r2, #0]
 8001236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800123a:	4293      	cmp	r3, r2
 800123c:	d908      	bls.n	8001250 <vPortValidateInterruptPriority+0x48>
 800123e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001242:	f383 8811 	msr	BASEPRI, r3
 8001246:	f3bf 8f6f 	isb	sy
 800124a:	f3bf 8f4f 	dsb	sy
 800124e:	e7fe      	b.n	800124e <vPortValidateInterruptPriority+0x46>
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000e3f0 	.word	0xe000e3f0
 8001258:	20000150 	.word	0x20000150
 800125c:	e000ed0c 	.word	0xe000ed0c
 8001260:	20000154 	.word	0x20000154

08001264 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001264:	f100 0308 	add.w	r3, r0, #8
 8001268:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800126a:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800126e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001270:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001272:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001274:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001276:	6003      	str	r3, [r0, #0]
 8001278:	4770      	bx	lr

0800127a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800127a:	2300      	movs	r3, #0
 800127c:	6103      	str	r3, [r0, #16]
 800127e:	4770      	bx	lr

08001280 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001280:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001282:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800128c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800128e:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001290:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001292:	3301      	adds	r3, #1
 8001294:	6003      	str	r3, [r0, #0]
 8001296:	4770      	bx	lr

08001298 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001298:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800129a:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800129c:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800129e:	d101      	bne.n	80012a4 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80012a0:	6903      	ldr	r3, [r0, #16]
 80012a2:	e007      	b.n	80012b4 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80012a4:	f100 0308 	add.w	r3, r0, #8
 80012a8:	685c      	ldr	r4, [r3, #4]
 80012aa:	6825      	ldr	r5, [r4, #0]
 80012ac:	42aa      	cmp	r2, r5
 80012ae:	d301      	bcc.n	80012b4 <vListInsert+0x1c>
 80012b0:	4623      	mov	r3, r4
 80012b2:	e7f9      	b.n	80012a8 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80012b8:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80012ba:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80012bc:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80012be:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80012c0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80012c2:	3301      	adds	r3, #1
 80012c4:	6003      	str	r3, [r0, #0]
 80012c6:	bd30      	pop	{r4, r5, pc}

080012c8 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80012c8:	6841      	ldr	r1, [r0, #4]
 80012ca:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80012cc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80012ce:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80012d0:	6882      	ldr	r2, [r0, #8]
 80012d2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80012d4:	6859      	ldr	r1, [r3, #4]
 80012d6:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80012d8:	bf08      	it	eq
 80012da:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80012dc:	2200      	movs	r2, #0
 80012de:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80012e0:	6818      	ldr	r0, [r3, #0]
 80012e2:	3801      	subs	r0, #1
 80012e4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80012e6:	4770      	bx	lr

080012e8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80012e8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <prvInsertBlockIntoFreeList+0x40>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4282      	cmp	r2, r0
 80012f0:	d201      	bcs.n	80012f6 <prvInsertBlockIntoFreeList+0xe>
 80012f2:	4613      	mov	r3, r2
 80012f4:	e7fa      	b.n	80012ec <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80012f6:	6859      	ldr	r1, [r3, #4]
 80012f8:	185c      	adds	r4, r3, r1
 80012fa:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80012fc:	bf01      	itttt	eq
 80012fe:	6840      	ldreq	r0, [r0, #4]
 8001300:	1809      	addeq	r1, r1, r0
 8001302:	4618      	moveq	r0, r3
 8001304:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001306:	6841      	ldr	r1, [r0, #4]
 8001308:	1844      	adds	r4, r0, r1
 800130a:	42a2      	cmp	r2, r4
 800130c:	d107      	bne.n	800131e <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800130e:	4c07      	ldr	r4, [pc, #28]	; (800132c <prvInsertBlockIntoFreeList+0x44>)
 8001310:	6824      	ldr	r4, [r4, #0]
 8001312:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001314:	bf1f      	itttt	ne
 8001316:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001318:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800131a:	1909      	addne	r1, r1, r4
 800131c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800131e:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001320:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001322:	bf18      	it	ne
 8001324:	6018      	strne	r0, [r3, #0]
 8001326:	bd10      	pop	{r4, pc}
 8001328:	20000160 	.word	0x20000160
 800132c:	2000015c 	.word	0x2000015c

08001330 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001334:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8001336:	f7ff f8c3 	bl	80004c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800133a:	4940      	ldr	r1, [pc, #256]	; (800143c <pvPortMalloc+0x10c>)
 800133c:	4d40      	ldr	r5, [pc, #256]	; (8001440 <pvPortMalloc+0x110>)
 800133e:	680b      	ldr	r3, [r1, #0]
 8001340:	bb0b      	cbnz	r3, 8001386 <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001342:	4a40      	ldr	r2, [pc, #256]	; (8001444 <pvPortMalloc+0x114>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001344:	0756      	lsls	r6, r2, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001346:	bf1f      	itttt	ne
 8001348:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800134a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800134e:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8001352:	1a1b      	subne	r3, r3, r0
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001354:	bf14      	ite	ne
 8001356:	4602      	movne	r2, r0
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001358:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800135c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800135e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001360:	f023 0307 	bic.w	r3, r3, #7

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001364:	4e38      	ldr	r6, [pc, #224]	; (8001448 <pvPortMalloc+0x118>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 8001366:	600b      	str	r3, [r1, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 8001368:	2000      	movs	r0, #0
 800136a:	6070      	str	r0, [r6, #4]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800136c:	6032      	str	r2, [r6, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 800136e:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001370:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001372:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001374:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001376:	4b35      	ldr	r3, [pc, #212]	; (800144c <pvPortMalloc+0x11c>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001378:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800137a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800137c:	4b34      	ldr	r3, [pc, #208]	; (8001450 <pvPortMalloc+0x120>)
 800137e:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001380:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001384:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001386:	682f      	ldr	r7, [r5, #0]
 8001388:	4227      	tst	r7, r4
 800138a:	d146      	bne.n	800141a <pvPortMalloc+0xea>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800138c:	2c00      	cmp	r4, #0
 800138e:	d045      	beq.n	800141c <pvPortMalloc+0xec>
			{
				xWantedSize += xHeapStructSize;
 8001390:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001394:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001396:	bf1c      	itt	ne
 8001398:	f023 0307 	bicne.w	r3, r3, #7
 800139c:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d039      	beq.n	8001416 <pvPortMalloc+0xe6>
 80013a2:	4a2b      	ldr	r2, [pc, #172]	; (8001450 <pvPortMalloc+0x120>)
 80013a4:	6816      	ldr	r6, [r2, #0]
 80013a6:	42b3      	cmp	r3, r6
 80013a8:	4690      	mov	r8, r2
 80013aa:	d836      	bhi.n	800141a <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 80013ac:	4a26      	ldr	r2, [pc, #152]	; (8001448 <pvPortMalloc+0x118>)
 80013ae:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80013b0:	6868      	ldr	r0, [r5, #4]
 80013b2:	4283      	cmp	r3, r0
 80013b4:	d803      	bhi.n	80013be <pvPortMalloc+0x8e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80013b6:	6809      	ldr	r1, [r1, #0]
 80013b8:	428d      	cmp	r5, r1
 80013ba:	d106      	bne.n	80013ca <pvPortMalloc+0x9a>
 80013bc:	e02d      	b.n	800141a <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80013be:	682c      	ldr	r4, [r5, #0]
 80013c0:	2c00      	cmp	r4, #0
 80013c2:	d0f8      	beq.n	80013b6 <pvPortMalloc+0x86>
 80013c4:	462a      	mov	r2, r5
 80013c6:	4625      	mov	r5, r4
 80013c8:	e7f2      	b.n	80013b0 <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80013ca:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80013cc:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80013ce:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80013d0:	1ac2      	subs	r2, r0, r3
 80013d2:	2a10      	cmp	r2, #16
 80013d4:	d90f      	bls.n	80013f6 <pvPortMalloc+0xc6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80013d6:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80013d8:	0741      	lsls	r1, r0, #29
 80013da:	d008      	beq.n	80013ee <pvPortMalloc+0xbe>
 80013dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013e0:	f383 8811 	msr	BASEPRI, r3
 80013e4:	f3bf 8f6f 	isb	sy
 80013e8:	f3bf 8f4f 	dsb	sy
 80013ec:	e7fe      	b.n	80013ec <pvPortMalloc+0xbc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80013ee:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80013f0:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80013f2:	f7ff ff79 	bl	80012e8 <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80013f6:	4915      	ldr	r1, [pc, #84]	; (800144c <pvPortMalloc+0x11c>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80013f8:	686b      	ldr	r3, [r5, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80013fa:	6808      	ldr	r0, [r1, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80013fc:	1af2      	subs	r2, r6, r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80013fe:	431f      	orrs	r7, r3
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001400:	4282      	cmp	r2, r0
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 8001402:	f04f 0300 	mov.w	r3, #0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001406:	f8c8 2000 	str.w	r2, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800140a:	bf38      	it	cc
 800140c:	600a      	strcc	r2, [r1, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800140e:	3408      	adds	r4, #8
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001410:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001412:	602b      	str	r3, [r5, #0]
 8001414:	e002      	b.n	800141c <pvPortMalloc+0xec>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001416:	461c      	mov	r4, r3
 8001418:	e000      	b.n	800141c <pvPortMalloc+0xec>
 800141a:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800141c:	f7ff f8f0 	bl	8000600 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001420:	0763      	lsls	r3, r4, #29
 8001422:	d008      	beq.n	8001436 <pvPortMalloc+0x106>
 8001424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001428:	f383 8811 	msr	BASEPRI, r3
 800142c:	f3bf 8f6f 	isb	sy
 8001430:	f3bf 8f4f 	dsb	sy
 8001434:	e7fe      	b.n	8001434 <pvPortMalloc+0x104>
	return pvReturn;
}
 8001436:	4620      	mov	r0, r4
 8001438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800143c:	2000015c 	.word	0x2000015c
 8001440:	20003d68 	.word	0x20003d68
 8001444:	20000168 	.word	0x20000168
 8001448:	20000160 	.word	0x20000160
 800144c:	20003d6c 	.word	0x20003d6c
 8001450:	20000158 	.word	0x20000158

08001454 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001454:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8001456:	4604      	mov	r4, r0
 8001458:	b370      	cbz	r0, 80014b8 <vPortFree+0x64>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800145a:	4a18      	ldr	r2, [pc, #96]	; (80014bc <vPortFree+0x68>)
 800145c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	4213      	tst	r3, r2
 8001464:	d108      	bne.n	8001478 <vPortFree+0x24>
 8001466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800146a:	f383 8811 	msr	BASEPRI, r3
 800146e:	f3bf 8f6f 	isb	sy
 8001472:	f3bf 8f4f 	dsb	sy
 8001476:	e7fe      	b.n	8001476 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001478:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800147c:	b141      	cbz	r1, 8001490 <vPortFree+0x3c>
 800147e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001482:	f383 8811 	msr	BASEPRI, r3
 8001486:	f3bf 8f6f 	isb	sy
 800148a:	f3bf 8f4f 	dsb	sy
 800148e:	e7fe      	b.n	800148e <vPortFree+0x3a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001490:	ea23 0302 	bic.w	r3, r3, r2
 8001494:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 8001498:	f7ff f812 	bl	80004c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800149c:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <vPortFree+0x6c>)
 800149e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80014a2:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80014a4:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80014a8:	440b      	add	r3, r1
 80014aa:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80014ac:	f7ff ff1c 	bl	80012e8 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80014b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 80014b4:	f7ff b8a4 	b.w	8000600 <xTaskResumeAll>
 80014b8:	bd10      	pop	{r4, pc}
 80014ba:	bf00      	nop
 80014bc:	20003d68 	.word	0x20003d68
 80014c0:	20000158 	.word	0x20000158

080014c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80014c4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80014c6:	f7fe ffc3 	bl	8000450 <vTaskStartScheduler>
  
  return osOK;
}
 80014ca:	2000      	movs	r0, #0
 80014cc:	bd08      	pop	{r3, pc}

080014ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80014ce:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80014d0:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80014d4:	8a02      	ldrh	r2, [r0, #16]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80014d6:	460b      	mov	r3, r1
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80014d8:	e890 0042 	ldmia.w	r0, {r1, r6}
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80014dc:	b086      	sub	sp, #24
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80014de:	2c84      	cmp	r4, #132	; 0x84
 80014e0:	f04f 0500 	mov.w	r5, #0
    fpriority += (priority - osPriorityIdle);
 80014e4:	bf14      	ite	ne
 80014e6:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80014e8:	462c      	moveq	r4, r5
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80014ea:	a805      	add	r0, sp, #20
 80014ec:	9001      	str	r0, [sp, #4]
 80014ee:	9503      	str	r5, [sp, #12]
 80014f0:	9502      	str	r5, [sp, #8]
 80014f2:	9400      	str	r4, [sp, #0]
 80014f4:	4630      	mov	r0, r6
 80014f6:	f7fe ff8c 	bl	8000412 <xTaskGenericCreate>
 80014fa:	2801      	cmp	r0, #1
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
  }
  
  return handle;
 80014fc:	bf0c      	ite	eq
 80014fe:	9805      	ldreq	r0, [sp, #20]
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
 8001500:	2000      	movne	r0, #0
  }
  
  return handle;
}
 8001502:	b006      	add	sp, #24
 8001504:	bd70      	pop	{r4, r5, r6, pc}

08001506 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001506:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001508:	2800      	cmp	r0, #0
 800150a:	bf08      	it	eq
 800150c:	2001      	moveq	r0, #1
 800150e:	f7ff f8ed 	bl	80006ec <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001512:	2000      	movs	r0, #0
 8001514:	bd08      	pop	{r3, pc}

08001516 <osMessageCreate>:
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
  (void) thread_id;
  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001516:	2200      	movs	r2, #0
 8001518:	c803      	ldmia	r0, {r0, r1}
 800151a:	f7ff bbd5 	b.w	8000cc8 <xQueueGenericCreate>

0800151e <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800151e:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001520:	f7ff fa62 	bl	80009e8 <xTaskGetSchedulerState>
 8001524:	2801      	cmp	r0, #1
 8001526:	d003      	beq.n	8001530 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001528:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800152c:	f7ff bdca 	b.w	80010c4 <xPortSysTickHandler>
 8001530:	bd08      	pop	{r3, pc}

08001532 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001532:	6803      	ldr	r3, [r0, #0]
 8001534:	68da      	ldr	r2, [r3, #12]
 8001536:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800153a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800153c:	695a      	ldr	r2, [r3, #20]
 800153e:	f022 0201 	bic.w	r2, r2, #1
 8001542:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001544:	2320      	movs	r3, #32
 8001546:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800154a:	4770      	bx	lr

0800154c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800154c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001550:	6807      	ldr	r7, [r0, #0]
 8001552:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001554:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001556:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800155a:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800155c:	68a1      	ldr	r1, [r4, #8]
 800155e:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001560:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001562:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001564:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001566:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001568:	4311      	orrs	r1, r2
 800156a:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800156c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001570:	430a      	orrs	r2, r1
 8001572:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001574:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001578:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800157a:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800157c:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800157e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001582:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001584:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001588:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	4b7c      	ldr	r3, [pc, #496]	; (8001780 <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001590:	d17c      	bne.n	800168c <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001592:	429f      	cmp	r7, r3
 8001594:	d003      	beq.n	800159e <UART_SetConfig+0x52>
 8001596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800159a:	429f      	cmp	r7, r3
 800159c:	d131      	bne.n	8001602 <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800159e:	f000 fe2f 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 80015a2:	6863      	ldr	r3, [r4, #4]
 80015a4:	2519      	movs	r5, #25
 80015a6:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80015aa:	4368      	muls	r0, r5
 80015ac:	fbb0 f8f8 	udiv	r8, r0, r8
 80015b0:	f000 fe26 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 80015b4:	6866      	ldr	r6, [r4, #4]
 80015b6:	4368      	muls	r0, r5
 80015b8:	0076      	lsls	r6, r6, #1
 80015ba:	fbb0 f6f6 	udiv	r6, r0, r6
 80015be:	f000 fe1f 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 80015c2:	6863      	ldr	r3, [r4, #4]
 80015c4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4368      	muls	r0, r5
 80015cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80015d0:	fbb0 f0f9 	udiv	r0, r0, r9
 80015d4:	fb09 6610 	mls	r6, r9, r0, r6
 80015d8:	f000 fe12 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 80015dc:	fbb8 f8f9 	udiv	r8, r8, r9
 80015e0:	6861      	ldr	r1, [r4, #4]
 80015e2:	00f6      	lsls	r6, r6, #3
 80015e4:	3632      	adds	r6, #50	; 0x32
 80015e6:	fbb6 f6f9 	udiv	r6, r6, r9
 80015ea:	0076      	lsls	r6, r6, #1
 80015ec:	4368      	muls	r0, r5
 80015ee:	0049      	lsls	r1, r1, #1
 80015f0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80015f4:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 80015f8:	fbb0 faf1 	udiv	sl, r0, r1
 80015fc:	f000 fe00 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 8001600:	e030      	b.n	8001664 <UART_SetConfig+0x118>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001602:	f000 fde5 	bl	80021d0 <HAL_RCC_GetPCLK1Freq>
 8001606:	6863      	ldr	r3, [r4, #4]
 8001608:	2519      	movs	r5, #25
 800160a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800160e:	4368      	muls	r0, r5
 8001610:	fbb0 f8f8 	udiv	r8, r0, r8
 8001614:	f000 fddc 	bl	80021d0 <HAL_RCC_GetPCLK1Freq>
 8001618:	6866      	ldr	r6, [r4, #4]
 800161a:	4368      	muls	r0, r5
 800161c:	0076      	lsls	r6, r6, #1
 800161e:	fbb0 f6f6 	udiv	r6, r0, r6
 8001622:	f000 fdd5 	bl	80021d0 <HAL_RCC_GetPCLK1Freq>
 8001626:	6863      	ldr	r3, [r4, #4]
 8001628:	f04f 0964 	mov.w	r9, #100	; 0x64
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4368      	muls	r0, r5
 8001630:	fbb0 f0f3 	udiv	r0, r0, r3
 8001634:	fbb0 f0f9 	udiv	r0, r0, r9
 8001638:	fb09 6610 	mls	r6, r9, r0, r6
 800163c:	f000 fdc8 	bl	80021d0 <HAL_RCC_GetPCLK1Freq>
 8001640:	fbb8 f8f9 	udiv	r8, r8, r9
 8001644:	00f6      	lsls	r6, r6, #3
 8001646:	6861      	ldr	r1, [r4, #4]
 8001648:	3632      	adds	r6, #50	; 0x32
 800164a:	fbb6 f6f9 	udiv	r6, r6, r9
 800164e:	0076      	lsls	r6, r6, #1
 8001650:	4368      	muls	r0, r5
 8001652:	0049      	lsls	r1, r1, #1
 8001654:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001658:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 800165c:	fbb0 faf1 	udiv	sl, r0, r1
 8001660:	f000 fdb6 	bl	80021d0 <HAL_RCC_GetPCLK1Freq>
 8001664:	4345      	muls	r5, r0
 8001666:	6860      	ldr	r0, [r4, #4]
 8001668:	0040      	lsls	r0, r0, #1
 800166a:	fbb5 f0f0 	udiv	r0, r5, r0
 800166e:	fbb0 f0f9 	udiv	r0, r0, r9
 8001672:	fb09 a210 	mls	r2, r9, r0, sl
 8001676:	00d2      	lsls	r2, r2, #3
 8001678:	3232      	adds	r2, #50	; 0x32
 800167a:	fbb2 f3f9 	udiv	r3, r2, r9
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	4443      	add	r3, r8
 8001684:	441e      	add	r6, r3
 8001686:	60be      	str	r6, [r7, #8]
 8001688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800168c:	429f      	cmp	r7, r3
 800168e:	d002      	beq.n	8001696 <UART_SetConfig+0x14a>
 8001690:	4b3c      	ldr	r3, [pc, #240]	; (8001784 <UART_SetConfig+0x238>)
 8001692:	429f      	cmp	r7, r3
 8001694:	d130      	bne.n	80016f8 <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001696:	f000 fdb3 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 800169a:	6863      	ldr	r3, [r4, #4]
 800169c:	2519      	movs	r5, #25
 800169e:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80016a2:	4368      	muls	r0, r5
 80016a4:	fbb0 f8f8 	udiv	r8, r0, r8
 80016a8:	f000 fdaa 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 80016ac:	6866      	ldr	r6, [r4, #4]
 80016ae:	4368      	muls	r0, r5
 80016b0:	00b6      	lsls	r6, r6, #2
 80016b2:	fbb0 f6f6 	udiv	r6, r0, r6
 80016b6:	f000 fda3 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 80016ba:	6863      	ldr	r3, [r4, #4]
 80016bc:	f04f 0964 	mov.w	r9, #100	; 0x64
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4368      	muls	r0, r5
 80016c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80016c8:	fbb0 f0f9 	udiv	r0, r0, r9
 80016cc:	fb09 6610 	mls	r6, r9, r0, r6
 80016d0:	f000 fd96 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 80016d4:	fbb8 f8f9 	udiv	r8, r8, r9
 80016d8:	6861      	ldr	r1, [r4, #4]
 80016da:	0136      	lsls	r6, r6, #4
 80016dc:	4368      	muls	r0, r5
 80016de:	0089      	lsls	r1, r1, #2
 80016e0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80016e4:	3632      	adds	r6, #50	; 0x32
 80016e6:	fbb0 faf1 	udiv	sl, r0, r1
 80016ea:	fbb6 f6f9 	udiv	r6, r6, r9
 80016ee:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 80016f2:	f000 fd85 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 80016f6:	e02f      	b.n	8001758 <UART_SetConfig+0x20c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80016f8:	f000 fd6a 	bl	80021d0 <HAL_RCC_GetPCLK1Freq>
 80016fc:	6863      	ldr	r3, [r4, #4]
 80016fe:	2519      	movs	r5, #25
 8001700:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001704:	4368      	muls	r0, r5
 8001706:	fbb0 f8f8 	udiv	r8, r0, r8
 800170a:	f000 fd61 	bl	80021d0 <HAL_RCC_GetPCLK1Freq>
 800170e:	6866      	ldr	r6, [r4, #4]
 8001710:	4368      	muls	r0, r5
 8001712:	00b6      	lsls	r6, r6, #2
 8001714:	fbb0 f6f6 	udiv	r6, r0, r6
 8001718:	f000 fd5a 	bl	80021d0 <HAL_RCC_GetPCLK1Freq>
 800171c:	6863      	ldr	r3, [r4, #4]
 800171e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4368      	muls	r0, r5
 8001726:	fbb0 f0f3 	udiv	r0, r0, r3
 800172a:	fbb0 f0f9 	udiv	r0, r0, r9
 800172e:	fb09 6610 	mls	r6, r9, r0, r6
 8001732:	f000 fd4d 	bl	80021d0 <HAL_RCC_GetPCLK1Freq>
 8001736:	fbb8 f8f9 	udiv	r8, r8, r9
 800173a:	6861      	ldr	r1, [r4, #4]
 800173c:	0136      	lsls	r6, r6, #4
 800173e:	3632      	adds	r6, #50	; 0x32
 8001740:	4368      	muls	r0, r5
 8001742:	fbb6 f6f9 	udiv	r6, r6, r9
 8001746:	0089      	lsls	r1, r1, #2
 8001748:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800174c:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8001750:	fbb0 faf1 	udiv	sl, r0, r1
 8001754:	f000 fd3c 	bl	80021d0 <HAL_RCC_GetPCLK1Freq>
 8001758:	4345      	muls	r5, r0
 800175a:	6860      	ldr	r0, [r4, #4]
 800175c:	0080      	lsls	r0, r0, #2
 800175e:	fbb5 f0f0 	udiv	r0, r5, r0
 8001762:	fbb0 f0f9 	udiv	r0, r0, r9
 8001766:	fb09 a210 	mls	r2, r9, r0, sl
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	3232      	adds	r2, #50	; 0x32
 800176e:	fbb2 f3f9 	udiv	r3, r2, r9
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	4433      	add	r3, r6
 8001778:	4443      	add	r3, r8
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001780:	40011000 	.word	0x40011000
 8001784:	40011400 	.word	0x40011400

08001788 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001788:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 800178a:	4604      	mov	r4, r0
 800178c:	b340      	cbz	r0, 80017e0 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800178e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001792:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001796:	b91b      	cbnz	r3, 80017a0 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001798:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800179c:	f001 f95c 	bl	8002a58 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017a0:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017a2:	2324      	movs	r3, #36	; 0x24
 80017a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017a8:	68d3      	ldr	r3, [r2, #12]
 80017aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017ae:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017b0:	4620      	mov	r0, r4
 80017b2:	f7ff fecb 	bl	800154c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017b6:	6823      	ldr	r3, [r4, #0]
 80017b8:	691a      	ldr	r2, [r3, #16]
 80017ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017c6:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017ce:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017d0:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80017d2:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017d4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80017d6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80017da:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 80017de:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 80017e0:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 80017e2:	bd10      	pop	{r4, pc}

080017e4 <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80017e4:	b538      	push	{r3, r4, r5, lr}
 80017e6:	4604      	mov	r4, r0
 80017e8:	4613      	mov	r3, r2
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80017ea:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80017ee:	2a20      	cmp	r2, #32
 80017f0:	d12a      	bne.n	8001848 <HAL_UART_Transmit_DMA+0x64>
  {
    if((pData == NULL ) || (Size == 0U))
 80017f2:	b339      	cbz	r1, 8001844 <HAL_UART_Transmit_DMA+0x60>
 80017f4:	b333      	cbz	r3, 8001844 <HAL_UART_Transmit_DMA+0x60>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80017f6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80017fa:	2a01      	cmp	r2, #1
 80017fc:	d024      	beq.n	8001848 <HAL_UART_Transmit_DMA+0x64>
 80017fe:	2201      	movs	r2, #1
 8001800:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001804:	6b20      	ldr	r0, [r4, #48]	; 0x30

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
 8001806:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001808:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800180a:	2221      	movs	r2, #33	; 0x21

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800180c:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800180e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001812:	4a0e      	ldr	r2, [pc, #56]	; (800184c <HAL_UART_Transmit_DMA+0x68>)
    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 8001814:	84e3      	strh	r3, [r4, #38]	; 0x26
    }

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pTxBuffPtr = pData;
 8001816:	6221      	str	r1, [r4, #32]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001818:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800181a:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <HAL_UART_Transmit_DMA+0x6c>)
 800181c:	6402      	str	r2, [r0, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800181e:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <HAL_UART_Transmit_DMA+0x70>)
 8001820:	64c2      	str	r2, [r0, #76]	; 0x4c
    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001822:	6822      	ldr	r2, [r4, #0]

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001824:	6505      	str	r5, [r0, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001826:	3204      	adds	r2, #4
 8001828:	f000 fe94 	bl	8002554 <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800182c:	6823      	ldr	r3, [r4, #0]
 800182e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001832:	601a      	str	r2, [r3, #0]
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001834:	695a      	ldr	r2, [r3, #20]
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001836:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800183a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800183e:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 8001840:	4628      	mov	r0, r5
 8001842:	bd38      	pop	{r3, r4, r5, pc}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
    {
      return HAL_ERROR;
 8001844:	2001      	movs	r0, #1
 8001846:	bd38      	pop	{r3, r4, r5, pc}
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001848:	2002      	movs	r0, #2
  }
}
 800184a:	bd38      	pop	{r3, r4, r5, pc}
 800184c:	08001859 	.word	0x08001859
 8001850:	08001887 	.word	0x08001887
 8001854:	0800190d 	.word	0x0800190d

08001858 <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001858:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800185a:	6803      	ldr	r3, [r0, #0]
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800185c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001864:	d10a      	bne.n	800187c <UART_DMATransmitCplt+0x24>
  {
    huart->TxXferCount = 0U;
 8001866:	84d3      	strh	r3, [r2, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001868:	6813      	ldr	r3, [r2, #0]
 800186a:	695a      	ldr	r2, [r3, #20]
 800186c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001870:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	bd08      	pop	{r3, pc}

  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 800187c:	4610      	mov	r0, r2
 800187e:	f001 fda1 	bl	80033c4 <HAL_UART_TxCpltCallback>
 8001882:	bd08      	pop	{r3, pc}

08001884 <HAL_UART_TxHalfCpltCallback>:
 8001884:	4770      	bx	lr

08001886 <UART_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001886:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8001888:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800188a:	f7ff fffb 	bl	8001884 <HAL_UART_TxHalfCpltCallback>
 800188e:	bd08      	pop	{r3, pc}

08001890 <HAL_UART_RxCpltCallback>:
 8001890:	4770      	bx	lr

08001892 <UART_Receive_IT>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001892:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001896:	2b22      	cmp	r3, #34	; 0x22
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001898:	b510      	push	{r4, lr}
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800189a:	d132      	bne.n	8001902 <UART_Receive_IT+0x70>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800189c:	6883      	ldr	r3, [r0, #8]
 800189e:	6901      	ldr	r1, [r0, #16]
 80018a0:	6802      	ldr	r2, [r0, #0]
 80018a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80018a8:	d10b      	bne.n	80018c2 <UART_Receive_IT+0x30>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 80018aa:	6852      	ldr	r2, [r2, #4]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 80018ac:	b921      	cbnz	r1, 80018b8 <UART_Receive_IT+0x26>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 80018ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018b2:	f823 2b02 	strh.w	r2, [r3], #2
 80018b6:	e002      	b.n	80018be <UART_Receive_IT+0x2c>
        huart->pRxBuffPtr += 2U;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 80018be:	6283      	str	r3, [r0, #40]	; 0x28
 80018c0:	e00a      	b.n	80018d8 <UART_Receive_IT+0x46>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80018c2:	b919      	cbnz	r1, 80018cc <UART_Receive_IT+0x3a>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 80018c4:	1c59      	adds	r1, r3, #1
 80018c6:	6281      	str	r1, [r0, #40]	; 0x28
 80018c8:	6852      	ldr	r2, [r2, #4]
 80018ca:	e004      	b.n	80018d6 <UART_Receive_IT+0x44>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 80018cc:	6852      	ldr	r2, [r2, #4]
 80018ce:	1c59      	adds	r1, r3, #1
 80018d0:	6281      	str	r1, [r0, #40]	; 0x28
 80018d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018d6:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80018d8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80018da:	3c01      	subs	r4, #1
 80018dc:	b2a4      	uxth	r4, r4
 80018de:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80018e0:	b98c      	cbnz	r4, 8001906 <UART_Receive_IT+0x74>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80018e2:	6803      	ldr	r3, [r0, #0]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80018ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018ec:	695a      	ldr	r2, [r3, #20]
 80018ee:	f022 0201 	bic.w	r2, r2, #1
 80018f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80018f4:	2320      	movs	r3, #32
 80018f6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 80018fa:	f7ff ffc9 	bl	8001890 <HAL_UART_RxCpltCallback>
 80018fe:	4620      	mov	r0, r4
 8001900:	bd10      	pop	{r4, pc}
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001902:	2002      	movs	r0, #2
 8001904:	bd10      	pop	{r4, pc}
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
      }
    }

    if(--huart->RxXferCount == 0U)
 8001906:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001908:	bd10      	pop	{r4, pc}

0800190a <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800190a:	4770      	bx	lr

0800190c <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800190c:	6b81      	ldr	r1, [r0, #56]	; 0x38
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800190e:	b508      	push	{r3, lr}
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001910:	680b      	ldr	r3, [r1, #0]
 8001912:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001914:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8001918:	2821      	cmp	r0, #33	; 0x21
 800191a:	d10a      	bne.n	8001932 <UART_DMAError+0x26>
 800191c:	0612      	lsls	r2, r2, #24
 800191e:	d508      	bpl.n	8001932 <UART_DMAError+0x26>
  {
    huart->TxXferCount = 0U;
 8001920:	2200      	movs	r2, #0
 8001922:	84ca      	strh	r2, [r1, #38]	; 0x26
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800192a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800192c:	2220      	movs	r2, #32
 800192e:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8001932:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001934:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8001938:	2a22      	cmp	r2, #34	; 0x22
 800193a:	d106      	bne.n	800194a <UART_DMAError+0x3e>
 800193c:	065b      	lsls	r3, r3, #25
 800193e:	d504      	bpl.n	800194a <UART_DMAError+0x3e>
  {
    huart->RxXferCount = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001944:	4608      	mov	r0, r1
 8001946:	f7ff fdf4 	bl	8001532 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800194a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800194c:	f043 0310 	orr.w	r3, r3, #16
 8001950:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001952:	4608      	mov	r0, r1
 8001954:	f7ff ffd9 	bl	800190a <HAL_UART_ErrorCallback>
 8001958:	bd08      	pop	{r3, pc}
	...

0800195c <HAL_UART_IRQHandler>:
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800195c:	6803      	ldr	r3, [r0, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001960:	68d9      	ldr	r1, [r3, #12]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001962:	b570      	push	{r4, r5, r6, lr}
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 8001964:	0716      	lsls	r6, r2, #28
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001966:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001968:	695d      	ldr	r5, [r3, #20]
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 800196a:	d107      	bne.n	800197c <HAL_UART_IRQHandler+0x20>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800196c:	0696      	lsls	r6, r2, #26
 800196e:	d55a      	bpl.n	8001a26 <HAL_UART_IRQHandler+0xca>
 8001970:	068d      	lsls	r5, r1, #26
 8001972:	d558      	bpl.n	8001a26 <HAL_UART_IRQHandler+0xca>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 8001974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if(errorflags == RESET)
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
    {
      UART_Receive_IT(huart);
 8001978:	f7ff bf8b 	b.w	8001892 <UART_Receive_IT>
      return;
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800197c:	f015 0001 	ands.w	r0, r5, #1
 8001980:	d102      	bne.n	8001988 <HAL_UART_IRQHandler+0x2c>
 8001982:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001986:	d04e      	beq.n	8001a26 <HAL_UART_IRQHandler+0xca>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001988:	07d3      	lsls	r3, r2, #31
 800198a:	d505      	bpl.n	8001998 <HAL_UART_IRQHandler+0x3c>
 800198c:	05ce      	lsls	r6, r1, #23
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800198e:	bf42      	ittt	mi
 8001990:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001992:	f043 0301 	orrmi.w	r3, r3, #1
 8001996:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001998:	0755      	lsls	r5, r2, #29
 800199a:	d504      	bpl.n	80019a6 <HAL_UART_IRQHandler+0x4a>
 800199c:	b118      	cbz	r0, 80019a6 <HAL_UART_IRQHandler+0x4a>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800199e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019a6:	0793      	lsls	r3, r2, #30
 80019a8:	d504      	bpl.n	80019b4 <HAL_UART_IRQHandler+0x58>
 80019aa:	b118      	cbz	r0, 80019b4 <HAL_UART_IRQHandler+0x58>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80019ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019ae:	f043 0304 	orr.w	r3, r3, #4
 80019b2:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019b4:	0716      	lsls	r6, r2, #28
 80019b6:	d504      	bpl.n	80019c2 <HAL_UART_IRQHandler+0x66>
 80019b8:	b118      	cbz	r0, 80019c2 <HAL_UART_IRQHandler+0x66>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80019ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019bc:	f043 0308 	orr.w	r3, r3, #8
 80019c0:	63e3      	str	r3, [r4, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80019c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d066      	beq.n	8001a96 <HAL_UART_IRQHandler+0x13a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80019c8:	0695      	lsls	r5, r2, #26
 80019ca:	d504      	bpl.n	80019d6 <HAL_UART_IRQHandler+0x7a>
 80019cc:	0688      	lsls	r0, r1, #26
 80019ce:	d502      	bpl.n	80019d6 <HAL_UART_IRQHandler+0x7a>
      {
        UART_Receive_IT(huart);
 80019d0:	4620      	mov	r0, r4
 80019d2:	f7ff ff5e 	bl	8001892 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80019d6:	6823      	ldr	r3, [r4, #0]
 80019d8:	695b      	ldr	r3, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80019da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80019dc:	0711      	lsls	r1, r2, #28
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80019de:	4620      	mov	r0, r4
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80019e0:	d402      	bmi.n	80019e8 <HAL_UART_IRQHandler+0x8c>
 80019e2:	f013 0540 	ands.w	r5, r3, #64	; 0x40
 80019e6:	d01a      	beq.n	8001a1e <HAL_UART_IRQHandler+0xc2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80019e8:	f7ff fda3 	bl	8001532 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	0652      	lsls	r2, r2, #25
 80019f2:	d510      	bpl.n	8001a16 <HAL_UART_IRQHandler+0xba>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80019f4:	695a      	ldr	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80019f6:	6b60      	ldr	r0, [r4, #52]	; 0x34
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80019f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019fc:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80019fe:	b150      	cbz	r0, 8001a16 <HAL_UART_IRQHandler+0xba>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001a00:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <HAL_UART_IRQHandler+0x13c>)
 8001a02:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001a04:	f000 fde6 	bl	80025d4 <HAL_DMA_Abort_IT>
 8001a08:	2800      	cmp	r0, #0
 8001a0a:	d044      	beq.n	8001a96 <HAL_UART_IRQHandler+0x13a>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001a0c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 8001a0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001a12:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001a14:	4718      	bx	r3
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8001a16:	4620      	mov	r0, r4
 8001a18:	f7ff ff77 	bl	800190a <HAL_UART_ErrorCallback>
 8001a1c:	bd70      	pop	{r4, r5, r6, pc}
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8001a1e:	f7ff ff74 	bl	800190a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a22:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001a24:	bd70      	pop	{r4, r5, r6, pc}
    }
    return;
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001a26:	0616      	lsls	r6, r2, #24
 8001a28:	d527      	bpl.n	8001a7a <HAL_UART_IRQHandler+0x11e>
 8001a2a:	060d      	lsls	r5, r1, #24
 8001a2c:	d525      	bpl.n	8001a7a <HAL_UART_IRQHandler+0x11e>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001a2e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001a32:	2a21      	cmp	r2, #33	; 0x21
 8001a34:	d12f      	bne.n	8001a96 <HAL_UART_IRQHandler+0x13a>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a36:	68a2      	ldr	r2, [r4, #8]
 8001a38:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001a3c:	6a22      	ldr	r2, [r4, #32]
 8001a3e:	d10a      	bne.n	8001a56 <HAL_UART_IRQHandler+0xfa>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FFU);
 8001a40:	8811      	ldrh	r1, [r2, #0]
 8001a42:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001a46:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001a48:	6921      	ldr	r1, [r4, #16]
 8001a4a:	b909      	cbnz	r1, 8001a50 <HAL_UART_IRQHandler+0xf4>
      {
        huart->pTxBuffPtr += 2U;
 8001a4c:	3202      	adds	r2, #2
 8001a4e:	e000      	b.n	8001a52 <HAL_UART_IRQHandler+0xf6>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001a50:	3201      	adds	r2, #1
 8001a52:	6222      	str	r2, [r4, #32]
 8001a54:	e003      	b.n	8001a5e <HAL_UART_IRQHandler+0x102>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FFU);
 8001a56:	1c51      	adds	r1, r2, #1
 8001a58:	6221      	str	r1, [r4, #32]
 8001a5a:	7812      	ldrb	r2, [r2, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8001a5e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001a60:	3a01      	subs	r2, #1
 8001a62:	b292      	uxth	r2, r2
 8001a64:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001a66:	b9b2      	cbnz	r2, 8001a96 <HAL_UART_IRQHandler+0x13a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
    return;
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001a7a:	0650      	lsls	r0, r2, #25
 8001a7c:	d50b      	bpl.n	8001a96 <HAL_UART_IRQHandler+0x13a>
 8001a7e:	064a      	lsls	r2, r1, #25
 8001a80:	d509      	bpl.n	8001a96 <HAL_UART_IRQHandler+0x13a>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a88:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001a8a:	2320      	movs	r3, #32
 8001a8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8001a90:	4620      	mov	r0, r4
 8001a92:	f001 fc97 	bl	80033c4 <HAL_UART_TxCpltCallback>
 8001a96:	bd70      	pop	{r4, r5, r6, pc}
 8001a98:	08001a9d 	.word	0x08001a9d

08001a9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a9e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0;
 8001aa4:	84c3      	strh	r3, [r0, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8001aa6:	f7ff ff30 	bl	800190a <HAL_UART_ErrorCallback>
 8001aaa:	bd08      	pop	{r3, pc}

08001aac <HAL_TIMEx_CommutationCallback>:
 8001aac:	4770      	bx	lr

08001aae <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001aae:	4770      	bx	lr

08001ab0 <HAL_TIM_Base_MspInit>:
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ab2:	6803      	ldr	r3, [r0, #0]
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_TIM_OC_DelayElapsedCallback>:
 8001ac8:	4770      	bx	lr

08001aca <HAL_TIM_IC_CaptureCallback>:
 8001aca:	4770      	bx	lr

08001acc <HAL_TIM_PWM_PulseFinishedCallback>:
 8001acc:	4770      	bx	lr

08001ace <HAL_TIM_TriggerCallback>:
 8001ace:	4770      	bx	lr

08001ad0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ad0:	6803      	ldr	r3, [r0, #0]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ad6:	b510      	push	{r4, lr}
 8001ad8:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ada:	d514      	bpl.n	8001b06 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	0792      	lsls	r2, r2, #30
 8001ae0:	d511      	bpl.n	8001b06 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ae2:	f06f 0202 	mvn.w	r2, #2
 8001ae6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ae8:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aea:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001aec:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aee:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001af0:	d002      	beq.n	8001af8 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001af2:	f7ff ffea 	bl	8001aca <HAL_TIM_IC_CaptureCallback>
 8001af6:	e004      	b.n	8001b02 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af8:	f7ff ffe6 	bl	8001ac8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001afc:	4620      	mov	r0, r4
 8001afe:	f7ff ffe5 	bl	8001acc <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b02:	2300      	movs	r3, #0
 8001b04:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b06:	6823      	ldr	r3, [r4, #0]
 8001b08:	691a      	ldr	r2, [r3, #16]
 8001b0a:	0750      	lsls	r0, r2, #29
 8001b0c:	d516      	bpl.n	8001b3c <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	0751      	lsls	r1, r2, #29
 8001b12:	d513      	bpl.n	8001b3c <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b14:	f06f 0204 	mvn.w	r2, #4
 8001b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b1a:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b1c:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b1e:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b22:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001b24:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b26:	d002      	beq.n	8001b2e <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001b28:	f7ff ffcf 	bl	8001aca <HAL_TIM_IC_CaptureCallback>
 8001b2c:	e004      	b.n	8001b38 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b2e:	f7ff ffcb 	bl	8001ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b32:	4620      	mov	r0, r4
 8001b34:	f7ff ffca 	bl	8001acc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	0712      	lsls	r2, r2, #28
 8001b42:	d515      	bpl.n	8001b70 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	0710      	lsls	r0, r2, #28
 8001b48:	d512      	bpl.n	8001b70 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b4a:	f06f 0208 	mvn.w	r2, #8
 8001b4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b50:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b52:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b54:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b56:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001b58:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b5a:	d002      	beq.n	8001b62 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001b5c:	f7ff ffb5 	bl	8001aca <HAL_TIM_IC_CaptureCallback>
 8001b60:	e004      	b.n	8001b6c <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b62:	f7ff ffb1 	bl	8001ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001b66:	4620      	mov	r0, r4
 8001b68:	f7ff ffb0 	bl	8001acc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	06d2      	lsls	r2, r2, #27
 8001b76:	d516      	bpl.n	8001ba6 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	06d0      	lsls	r0, r2, #27
 8001b7c:	d513      	bpl.n	8001ba6 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b7e:	f06f 0210 	mvn.w	r2, #16
 8001b82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b84:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b86:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b88:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b8c:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001b8e:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b90:	d002      	beq.n	8001b98 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001b92:	f7ff ff9a 	bl	8001aca <HAL_TIM_IC_CaptureCallback>
 8001b96:	e004      	b.n	8001ba2 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b98:	f7ff ff96 	bl	8001ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	f7ff ff95 	bl	8001acc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	691a      	ldr	r2, [r3, #16]
 8001baa:	07d1      	lsls	r1, r2, #31
 8001bac:	d508      	bpl.n	8001bc0 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	07d2      	lsls	r2, r2, #31
 8001bb2:	d505      	bpl.n	8001bc0 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bb4:	f06f 0201 	mvn.w	r2, #1
 8001bb8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f001 fc24 	bl	8003408 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	0610      	lsls	r0, r2, #24
 8001bc6:	d508      	bpl.n	8001bda <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	0611      	lsls	r1, r2, #24
 8001bcc:	d505      	bpl.n	8001bda <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bd2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f7ff ff6a 	bl	8001aae <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	0652      	lsls	r2, r2, #25
 8001be0:	d508      	bpl.n	8001bf4 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	0650      	lsls	r0, r2, #25
 8001be6:	d505      	bpl.n	8001bf4 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001be8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bec:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff ff6d 	bl	8001ace <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	0691      	lsls	r1, r2, #26
 8001bfa:	d50a      	bpl.n	8001c12 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	0692      	lsls	r2, r2, #26
 8001c00:	d507      	bpl.n	8001c12 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c02:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001c06:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c08:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8001c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8001c0e:	f7ff bf4d 	b.w	8001aac <HAL_TIMEx_CommutationCallback>
 8001c12:	bd10      	pop	{r4, pc}

08001c14 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001c14:	4a2e      	ldr	r2, [pc, #184]	; (8001cd0 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8001c16:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001c18:	4290      	cmp	r0, r2
 8001c1a:	d012      	beq.n	8001c42 <TIM_Base_SetConfig+0x2e>
 8001c1c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c20:	d00f      	beq.n	8001c42 <TIM_Base_SetConfig+0x2e>
 8001c22:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001c26:	4290      	cmp	r0, r2
 8001c28:	d00b      	beq.n	8001c42 <TIM_Base_SetConfig+0x2e>
 8001c2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c2e:	4290      	cmp	r0, r2
 8001c30:	d007      	beq.n	8001c42 <TIM_Base_SetConfig+0x2e>
 8001c32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c36:	4290      	cmp	r0, r2
 8001c38:	d003      	beq.n	8001c42 <TIM_Base_SetConfig+0x2e>
 8001c3a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001c3e:	4290      	cmp	r0, r2
 8001c40:	d118      	bne.n	8001c74 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001c42:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001c48:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001c4a:	4a21      	ldr	r2, [pc, #132]	; (8001cd0 <TIM_Base_SetConfig+0xbc>)
 8001c4c:	4290      	cmp	r0, r2
 8001c4e:	d037      	beq.n	8001cc0 <TIM_Base_SetConfig+0xac>
 8001c50:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c54:	d034      	beq.n	8001cc0 <TIM_Base_SetConfig+0xac>
 8001c56:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <TIM_Base_SetConfig+0xc0>)
 8001c58:	4290      	cmp	r0, r2
 8001c5a:	d031      	beq.n	8001cc0 <TIM_Base_SetConfig+0xac>
 8001c5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c60:	4290      	cmp	r0, r2
 8001c62:	d02d      	beq.n	8001cc0 <TIM_Base_SetConfig+0xac>
 8001c64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c68:	4290      	cmp	r0, r2
 8001c6a:	d029      	beq.n	8001cc0 <TIM_Base_SetConfig+0xac>
 8001c6c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001c70:	4290      	cmp	r0, r2
 8001c72:	d025      	beq.n	8001cc0 <TIM_Base_SetConfig+0xac>
 8001c74:	4a18      	ldr	r2, [pc, #96]	; (8001cd8 <TIM_Base_SetConfig+0xc4>)
 8001c76:	4290      	cmp	r0, r2
 8001c78:	d022      	beq.n	8001cc0 <TIM_Base_SetConfig+0xac>
 8001c7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c7e:	4290      	cmp	r0, r2
 8001c80:	d01e      	beq.n	8001cc0 <TIM_Base_SetConfig+0xac>
 8001c82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c86:	4290      	cmp	r0, r2
 8001c88:	d01a      	beq.n	8001cc0 <TIM_Base_SetConfig+0xac>
 8001c8a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001c8e:	4290      	cmp	r0, r2
 8001c90:	d016      	beq.n	8001cc0 <TIM_Base_SetConfig+0xac>
 8001c92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c96:	4290      	cmp	r0, r2
 8001c98:	d012      	beq.n	8001cc0 <TIM_Base_SetConfig+0xac>
 8001c9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c9e:	4290      	cmp	r0, r2
 8001ca0:	d00e      	beq.n	8001cc0 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8001ca2:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ca4:	688b      	ldr	r3, [r1, #8]
 8001ca6:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001ca8:	680b      	ldr	r3, [r1, #0]
 8001caa:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <TIM_Base_SetConfig+0xbc>)
 8001cae:	4298      	cmp	r0, r3
 8001cb0:	d00b      	beq.n	8001cca <TIM_Base_SetConfig+0xb6>
 8001cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cb6:	4298      	cmp	r0, r3
 8001cb8:	d007      	beq.n	8001cca <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	6143      	str	r3, [r0, #20]
}
 8001cbe:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cc0:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	e7eb      	b.n	8001ca2 <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cca:	690b      	ldr	r3, [r1, #16]
 8001ccc:	6303      	str	r3, [r0, #48]	; 0x30
 8001cce:	e7f4      	b.n	8001cba <TIM_Base_SetConfig+0xa6>
 8001cd0:	40010000 	.word	0x40010000
 8001cd4:	40000400 	.word	0x40000400
 8001cd8:	40014000 	.word	0x40014000

08001cdc <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001cdc:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001cde:	4604      	mov	r4, r0
 8001ce0:	b1a0      	cbz	r0, 8001d0c <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001ce2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ce6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cea:	b91b      	cbnz	r3, 8001cf4 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cec:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cf0:	f7ff fede 	bl	8001ab0 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001cfa:	6820      	ldr	r0, [r4, #0]
 8001cfc:	1d21      	adds	r1, r4, #4
 8001cfe:	f7ff ff89 	bl	8001c14 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001d02:	2301      	movs	r3, #1
 8001d04:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8001d08:	2000      	movs	r0, #0
 8001d0a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001d0c:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8001d0e:	bd10      	pop	{r4, pc}

08001d10 <HAL_RCC_OscConfig>:
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d10:	6803      	ldr	r3, [r0, #0]
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d12:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001d16:	4604      	mov	r4, r0
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d18:	07d8      	lsls	r0, r3, #31
 8001d1a:	d403      	bmi.n	8001d24 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	0799      	lsls	r1, r3, #30
 8001d20:	d437      	bmi.n	8001d92 <HAL_RCC_OscConfig+0x82>
 8001d22:	e087      	b.n	8001e34 <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d24:	4ba7      	ldr	r3, [pc, #668]	; (8001fc4 <HAL_RCC_OscConfig+0x2b4>)
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	f002 020c 	and.w	r2, r2, #12
 8001d2c:	2a04      	cmp	r2, #4
 8001d2e:	d007      	beq.n	8001d40 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d30:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d32:	f002 020c 	and.w	r2, r2, #12
 8001d36:	2a08      	cmp	r2, #8
 8001d38:	d10b      	bne.n	8001d52 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	025a      	lsls	r2, r3, #9
 8001d3e:	d508      	bpl.n	8001d52 <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d40:	4ba0      	ldr	r3, [pc, #640]	; (8001fc4 <HAL_RCC_OscConfig+0x2b4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	039b      	lsls	r3, r3, #14
 8001d46:	d5e9      	bpl.n	8001d1c <HAL_RCC_OscConfig+0xc>
 8001d48:	6863      	ldr	r3, [r4, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1e6      	bne.n	8001d1c <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8001d4e:	2001      	movs	r0, #1
 8001d50:	e134      	b.n	8001fbc <HAL_RCC_OscConfig+0x2ac>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d52:	4b9d      	ldr	r3, [pc, #628]	; (8001fc8 <HAL_RCC_OscConfig+0x2b8>)
 8001d54:	7922      	ldrb	r2, [r4, #4]
 8001d56:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d58:	6863      	ldr	r3, [r4, #4]
 8001d5a:	b16b      	cbz	r3, 8001d78 <HAL_RCC_OscConfig+0x68>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5c:	f000 fda0 	bl	80028a0 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d60:	4d98      	ldr	r5, [pc, #608]	; (8001fc4 <HAL_RCC_OscConfig+0x2b4>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d62:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d64:	682b      	ldr	r3, [r5, #0]
 8001d66:	039f      	lsls	r7, r3, #14
 8001d68:	d4d8      	bmi.n	8001d1c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d6a:	f000 fd99 	bl	80028a0 <HAL_GetTick>
 8001d6e:	1b80      	subs	r0, r0, r6
 8001d70:	2864      	cmp	r0, #100	; 0x64
 8001d72:	d9f7      	bls.n	8001d64 <HAL_RCC_OscConfig+0x54>
          {
            return HAL_TIMEOUT;
 8001d74:	2003      	movs	r0, #3
 8001d76:	e121      	b.n	8001fbc <HAL_RCC_OscConfig+0x2ac>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f000 fd92 	bl	80028a0 <HAL_GetTick>

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7c:	4d91      	ldr	r5, [pc, #580]	; (8001fc4 <HAL_RCC_OscConfig+0x2b4>)
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7e:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d80:	682b      	ldr	r3, [r5, #0]
 8001d82:	0398      	lsls	r0, r3, #14
 8001d84:	d5ca      	bpl.n	8001d1c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d86:	f000 fd8b 	bl	80028a0 <HAL_GetTick>
 8001d8a:	1b80      	subs	r0, r0, r6
 8001d8c:	2864      	cmp	r0, #100	; 0x64
 8001d8e:	d9f7      	bls.n	8001d80 <HAL_RCC_OscConfig+0x70>
 8001d90:	e7f0      	b.n	8001d74 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d92:	4b8c      	ldr	r3, [pc, #560]	; (8001fc4 <HAL_RCC_OscConfig+0x2b4>)
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	f012 0f0c 	tst.w	r2, #12
 8001d9a:	d007      	beq.n	8001dac <HAL_RCC_OscConfig+0x9c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d9c:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d9e:	f002 020c 	and.w	r2, r2, #12
 8001da2:	2a08      	cmp	r2, #8
 8001da4:	d117      	bne.n	8001dd6 <HAL_RCC_OscConfig+0xc6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	0259      	lsls	r1, r3, #9
 8001daa:	d414      	bmi.n	8001dd6 <HAL_RCC_OscConfig+0xc6>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dac:	4b85      	ldr	r3, [pc, #532]	; (8001fc4 <HAL_RCC_OscConfig+0x2b4>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	0792      	lsls	r2, r2, #30
 8001db2:	d502      	bpl.n	8001dba <HAL_RCC_OscConfig+0xaa>
 8001db4:	68e2      	ldr	r2, [r4, #12]
 8001db6:	2a01      	cmp	r2, #1
 8001db8:	d1c9      	bne.n	8001d4e <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dba:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	21f8      	movs	r1, #248	; 0xf8
 8001dbe:	fa91 f1a1 	rbit	r1, r1
 8001dc2:	6920      	ldr	r0, [r4, #16]
 8001dc4:	fab1 f181 	clz	r1, r1
 8001dc8:	fa00 f101 	lsl.w	r1, r0, r1
 8001dcc:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd4:	e02e      	b.n	8001e34 <HAL_RCC_OscConfig+0x124>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dd6:	68e2      	ldr	r2, [r4, #12]
 8001dd8:	4b7c      	ldr	r3, [pc, #496]	; (8001fcc <HAL_RCC_OscConfig+0x2bc>)
 8001dda:	b1ea      	cbz	r2, 8001e18 <HAL_RCC_OscConfig+0x108>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ddc:	2201      	movs	r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f000 fd5e 	bl	80028a0 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	4d77      	ldr	r5, [pc, #476]	; (8001fc4 <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de6:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de8:	682b      	ldr	r3, [r5, #0]
 8001dea:	4876      	ldr	r0, [pc, #472]	; (8001fc4 <HAL_RCC_OscConfig+0x2b4>)
 8001dec:	079b      	lsls	r3, r3, #30
 8001dee:	d405      	bmi.n	8001dfc <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df0:	f000 fd56 	bl	80028a0 <HAL_GetTick>
 8001df4:	1b80      	subs	r0, r0, r6
 8001df6:	2802      	cmp	r0, #2
 8001df8:	d9f6      	bls.n	8001de8 <HAL_RCC_OscConfig+0xd8>
 8001dfa:	e7bb      	b.n	8001d74 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfc:	6803      	ldr	r3, [r0, #0]
 8001dfe:	22f8      	movs	r2, #248	; 0xf8
 8001e00:	fa92 f2a2 	rbit	r2, r2
 8001e04:	6921      	ldr	r1, [r4, #16]
 8001e06:	fab2 f282 	clz	r2, r2
 8001e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e12:	4313      	orrs	r3, r2
 8001e14:	6003      	str	r3, [r0, #0]
 8001e16:	e00d      	b.n	8001e34 <HAL_RCC_OscConfig+0x124>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1a:	f000 fd41 	bl	80028a0 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1e:	4d69      	ldr	r5, [pc, #420]	; (8001fc4 <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	682b      	ldr	r3, [r5, #0]
 8001e24:	079f      	lsls	r7, r3, #30
 8001e26:	d505      	bpl.n	8001e34 <HAL_RCC_OscConfig+0x124>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e28:	f000 fd3a 	bl	80028a0 <HAL_GetTick>
 8001e2c:	1b80      	subs	r0, r0, r6
 8001e2e:	2802      	cmp	r0, #2
 8001e30:	d9f7      	bls.n	8001e22 <HAL_RCC_OscConfig+0x112>
 8001e32:	e79f      	b.n	8001d74 <HAL_RCC_OscConfig+0x64>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	071e      	lsls	r6, r3, #28
 8001e38:	d403      	bmi.n	8001e42 <HAL_RCC_OscConfig+0x132>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e3a:	6823      	ldr	r3, [r4, #0]
 8001e3c:	075d      	lsls	r5, r3, #29
 8001e3e:	d545      	bpl.n	8001ecc <HAL_RCC_OscConfig+0x1bc>
 8001e40:	e01f      	b.n	8001e82 <HAL_RCC_OscConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e42:	6962      	ldr	r2, [r4, #20]
 8001e44:	4b62      	ldr	r3, [pc, #392]	; (8001fd0 <HAL_RCC_OscConfig+0x2c0>)
 8001e46:	b172      	cbz	r2, 8001e66 <HAL_RCC_OscConfig+0x156>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4c:	f000 fd28 	bl	80028a0 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e50:	4d5c      	ldr	r5, [pc, #368]	; (8001fc4 <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e52:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e54:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001e56:	0798      	lsls	r0, r3, #30
 8001e58:	d4ef      	bmi.n	8001e3a <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e5a:	f000 fd21 	bl	80028a0 <HAL_GetTick>
 8001e5e:	1b80      	subs	r0, r0, r6
 8001e60:	2802      	cmp	r0, #2
 8001e62:	d9f7      	bls.n	8001e54 <HAL_RCC_OscConfig+0x144>
 8001e64:	e786      	b.n	8001d74 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e66:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e68:	f000 fd1a 	bl	80028a0 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6c:	4d55      	ldr	r5, [pc, #340]	; (8001fc4 <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6e:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e70:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001e72:	0799      	lsls	r1, r3, #30
 8001e74:	d5e1      	bpl.n	8001e3a <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e76:	f000 fd13 	bl	80028a0 <HAL_GetTick>
 8001e7a:	1b80      	subs	r0, r0, r6
 8001e7c:	2802      	cmp	r0, #2
 8001e7e:	d9f7      	bls.n	8001e70 <HAL_RCC_OscConfig+0x160>
 8001e80:	e778      	b.n	8001d74 <HAL_RCC_OscConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	4b4f      	ldr	r3, [pc, #316]	; (8001fc4 <HAL_RCC_OscConfig+0x2b4>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001e88:	4d52      	ldr	r5, [pc, #328]	; (8001fd4 <HAL_RCC_OscConfig+0x2c4>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	9301      	str	r3, [sp, #4]
 8001e9a:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001e9c:	682b      	ldr	r3, [r5, #0]
 8001e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea2:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8001ea4:	f000 fcfc 	bl	80028a0 <HAL_GetTick>
 8001ea8:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001eaa:	682b      	ldr	r3, [r5, #0]
 8001eac:	05da      	lsls	r2, r3, #23
 8001eae:	d510      	bpl.n	8001ed2 <HAL_RCC_OscConfig+0x1c2>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb0:	4b49      	ldr	r3, [pc, #292]	; (8001fd8 <HAL_RCC_OscConfig+0x2c8>)
 8001eb2:	7a22      	ldrb	r2, [r4, #8]
 8001eb4:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eb6:	68a3      	ldr	r3, [r4, #8]
 8001eb8:	b1bb      	cbz	r3, 8001eea <HAL_RCC_OscConfig+0x1da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eba:	f000 fcf1 	bl	80028a0 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebe:	4d41      	ldr	r5, [pc, #260]	; (8001fc4 <HAL_RCC_OscConfig+0x2b4>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec0:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec2:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001ec8:	079b      	lsls	r3, r3, #30
 8001eca:	d508      	bpl.n	8001ede <HAL_RCC_OscConfig+0x1ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ecc:	69a2      	ldr	r2, [r4, #24]
 8001ece:	b9da      	cbnz	r2, 8001f08 <HAL_RCC_OscConfig+0x1f8>
 8001ed0:	e059      	b.n	8001f86 <HAL_RCC_OscConfig+0x276>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ed2:	f000 fce5 	bl	80028a0 <HAL_GetTick>
 8001ed6:	1b80      	subs	r0, r0, r6
 8001ed8:	2802      	cmp	r0, #2
 8001eda:	d9e6      	bls.n	8001eaa <HAL_RCC_OscConfig+0x19a>
 8001edc:	e74a      	b.n	8001d74 <HAL_RCC_OscConfig+0x64>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ede:	f000 fcdf 	bl	80028a0 <HAL_GetTick>
 8001ee2:	1b80      	subs	r0, r0, r6
 8001ee4:	42b8      	cmp	r0, r7
 8001ee6:	d9ee      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x1b6>
 8001ee8:	e744      	b.n	8001d74 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eea:	f000 fcd9 	bl	80028a0 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eee:	4d35      	ldr	r5, [pc, #212]	; (8001fc4 <HAL_RCC_OscConfig+0x2b4>)
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef0:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef2:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001ef8:	0798      	lsls	r0, r3, #30
 8001efa:	d5e7      	bpl.n	8001ecc <HAL_RCC_OscConfig+0x1bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efc:	f000 fcd0 	bl	80028a0 <HAL_GetTick>
 8001f00:	1b80      	subs	r0, r0, r6
 8001f02:	42b8      	cmp	r0, r7
 8001f04:	d9f7      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x1e6>
 8001f06:	e735      	b.n	8001d74 <HAL_RCC_OscConfig+0x64>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f08:	4d2e      	ldr	r5, [pc, #184]	; (8001fc4 <HAL_RCC_OscConfig+0x2b4>)
 8001f0a:	68ab      	ldr	r3, [r5, #8]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	f43f af1c 	beq.w	8001d4e <HAL_RCC_OscConfig+0x3e>
 8001f16:	4e31      	ldr	r6, [pc, #196]	; (8001fdc <HAL_RCC_OscConfig+0x2cc>)
 8001f18:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f1a:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1c:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f1e:	d141      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x294>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f000 fcbe 	bl	80028a0 <HAL_GetTick>
 8001f24:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f26:	682b      	ldr	r3, [r5, #0]
 8001f28:	4f26      	ldr	r7, [pc, #152]	; (8001fc4 <HAL_RCC_OscConfig+0x2b4>)
 8001f2a:	0199      	lsls	r1, r3, #6
 8001f2c:	d42d      	bmi.n	8001f8a <HAL_RCC_OscConfig+0x27a>
 8001f2e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001f32:	fa92 f2a2 	rbit	r2, r2
 8001f36:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f3a:	fab2 fe82 	clz	lr, r2
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001f46:	fab3 f583 	clz	r5, r3
 8001f4a:	fa92 f2a2 	rbit	r2, r2
 8001f4e:	69e0      	ldr	r0, [r4, #28]
 8001f50:	6a23      	ldr	r3, [r4, #32]
 8001f52:	fab2 f182 	clz	r1, r2
 8001f56:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f58:	4303      	orrs	r3, r0
 8001f5a:	fa02 f20e 	lsl.w	r2, r2, lr
 8001f5e:	ea43 0002 	orr.w	r0, r3, r2
 8001f62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f64:	085a      	lsrs	r2, r3, #1
 8001f66:	3a01      	subs	r2, #1
 8001f68:	fa02 f305 	lsl.w	r3, r2, r5
 8001f6c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f6e:	4303      	orrs	r3, r0
 8001f70:	408a      	lsls	r2, r1
 8001f72:	4313      	orrs	r3, r2
 8001f74:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f76:	2301      	movs	r3, #1
 8001f78:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f000 fc91 	bl	80028a0 <HAL_GetTick>
 8001f7e:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	019a      	lsls	r2, r3, #6
 8001f84:	d508      	bpl.n	8001f98 <HAL_RCC_OscConfig+0x288>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001f86:	2000      	movs	r0, #0
 8001f88:	e018      	b.n	8001fbc <HAL_RCC_OscConfig+0x2ac>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8a:	f000 fc89 	bl	80028a0 <HAL_GetTick>
 8001f8e:	ebc8 0000 	rsb	r0, r8, r0
 8001f92:	2802      	cmp	r0, #2
 8001f94:	d9c7      	bls.n	8001f26 <HAL_RCC_OscConfig+0x216>
 8001f96:	e6ed      	b.n	8001d74 <HAL_RCC_OscConfig+0x64>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f98:	f000 fc82 	bl	80028a0 <HAL_GetTick>
 8001f9c:	1b00      	subs	r0, r0, r4
 8001f9e:	2802      	cmp	r0, #2
 8001fa0:	d9ee      	bls.n	8001f80 <HAL_RCC_OscConfig+0x270>
 8001fa2:	e6e7      	b.n	8001d74 <HAL_RCC_OscConfig+0x64>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f000 fc7c 	bl	80028a0 <HAL_GetTick>
 8001fa8:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001faa:	682b      	ldr	r3, [r5, #0]
 8001fac:	019b      	lsls	r3, r3, #6
 8001fae:	d5ea      	bpl.n	8001f86 <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb0:	f000 fc76 	bl	80028a0 <HAL_GetTick>
 8001fb4:	1b00      	subs	r0, r0, r4
 8001fb6:	2802      	cmp	r0, #2
 8001fb8:	d9f7      	bls.n	8001faa <HAL_RCC_OscConfig+0x29a>
 8001fba:	e6db      	b.n	8001d74 <HAL_RCC_OscConfig+0x64>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001fbc:	b002      	add	sp, #8
 8001fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40023802 	.word	0x40023802
 8001fcc:	42470000 	.word	0x42470000
 8001fd0:	42470e80 	.word	0x42470e80
 8001fd4:	40007000 	.word	0x40007000
 8001fd8:	40023870 	.word	0x40023870
 8001fdc:	42470060 	.word	0x42470060

08001fe0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe0:	491b      	ldr	r1, [pc, #108]	; (8002050 <HAL_RCC_GetSysClockFreq+0x70>)
 8001fe2:	688b      	ldr	r3, [r1, #8]
 8001fe4:	f003 030c 	and.w	r3, r3, #12
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d02c      	beq.n	8002046 <HAL_RCC_GetSysClockFreq+0x66>
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d12c      	bne.n	800204a <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ff0:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ff2:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ff4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ff8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001ffc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8002000:	684b      	ldr	r3, [r1, #4]
 8002002:	fa92 f2a2 	rbit	r2, r2
 8002006:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800200a:	fab2 f282 	clz	r2, r2
 800200e:	ea01 0103 	and.w	r1, r1, r3
 8002012:	fa21 f102 	lsr.w	r1, r1, r2
 8002016:	bf14      	ite	ne
 8002018:	4a0e      	ldrne	r2, [pc, #56]	; (8002054 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800201a:	4a0f      	ldreq	r2, [pc, #60]	; (8002058 <HAL_RCC_GetSysClockFreq+0x78>)
 800201c:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8002020:	4a0b      	ldr	r2, [pc, #44]	; (8002050 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8002022:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8002026:	6852      	ldr	r2, [r2, #4]
 8002028:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800202c:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8002030:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8002034:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8002038:	fa22 f000 	lsr.w	r0, r2, r0
 800203c:	3001      	adds	r0, #1
 800203e:	0040      	lsls	r0, r0, #1
 8002040:	fbb3 f0f0 	udiv	r0, r3, r0
 8002044:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002046:	4803      	ldr	r0, [pc, #12]	; (8002054 <HAL_RCC_GetSysClockFreq+0x74>)
 8002048:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800204a:	4803      	ldr	r0, [pc, #12]	; (8002058 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800
 8002054:	017d7840 	.word	0x017d7840
 8002058:	00f42400 	.word	0x00f42400

0800205c <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800205c:	4b55      	ldr	r3, [pc, #340]	; (80021b4 <HAL_RCC_ClockConfig+0x158>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	f002 020f 	and.w	r2, r2, #15
 8002064:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800206a:	4605      	mov	r5, r0
 800206c:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800206e:	d30a      	bcc.n	8002086 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002070:	6829      	ldr	r1, [r5, #0]
 8002072:	0788      	lsls	r0, r1, #30
 8002074:	d511      	bpl.n	800209a <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002076:	4850      	ldr	r0, [pc, #320]	; (80021b8 <HAL_RCC_ClockConfig+0x15c>)
 8002078:	6883      	ldr	r3, [r0, #8]
 800207a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207e:	68ab      	ldr	r3, [r5, #8]
 8002080:	4313      	orrs	r3, r2
 8002082:	6083      	str	r3, [r0, #8]
 8002084:	e009      	b.n	800209a <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002086:	b2ca      	uxtb	r2, r1
 8002088:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	4299      	cmp	r1, r3
 8002092:	d0ed      	beq.n	8002070 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8002094:	2001      	movs	r0, #1
 8002096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209a:	07c9      	lsls	r1, r1, #31
 800209c:	d406      	bmi.n	80020ac <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800209e:	4b45      	ldr	r3, [pc, #276]	; (80021b4 <HAL_RCC_ClockConfig+0x158>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	f002 020f 	and.w	r2, r2, #15
 80020a6:	4296      	cmp	r6, r2
 80020a8:	d351      	bcc.n	800214e <HAL_RCC_ClockConfig+0xf2>
 80020aa:	e057      	b.n	800215c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ac:	686b      	ldr	r3, [r5, #4]
 80020ae:	4a42      	ldr	r2, [pc, #264]	; (80021b8 <HAL_RCC_ClockConfig+0x15c>)
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d103      	bne.n	80020bc <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80020ba:	e008      	b.n	80020ce <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80020bc:	1e99      	subs	r1, r3, #2
 80020be:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c0:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80020c2:	d802      	bhi.n	80020ca <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80020c8:	e001      	b.n	80020ce <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ca:	f012 0f02 	tst.w	r2, #2
 80020ce:	d0e1      	beq.n	8002094 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020d0:	4c39      	ldr	r4, [pc, #228]	; (80021b8 <HAL_RCC_ClockConfig+0x15c>)
 80020d2:	68a2      	ldr	r2, [r4, #8]
 80020d4:	f022 0203 	bic.w	r2, r2, #3
 80020d8:	4313      	orrs	r3, r2
 80020da:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020dc:	f000 fbe0 	bl	80028a0 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e0:	686b      	ldr	r3, [r5, #4]
 80020e2:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020e4:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e6:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ea:	d10c      	bne.n	8002106 <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ec:	68a3      	ldr	r3, [r4, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d0d3      	beq.n	800209e <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f6:	f000 fbd3 	bl	80028a0 <HAL_GetTick>
 80020fa:	1bc0      	subs	r0, r0, r7
 80020fc:	4540      	cmp	r0, r8
 80020fe:	d9f5      	bls.n	80020ec <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8002100:	2003      	movs	r0, #3
 8002102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002106:	2b02      	cmp	r3, #2
 8002108:	d10a      	bne.n	8002120 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800210a:	68a3      	ldr	r3, [r4, #8]
 800210c:	f003 030c 	and.w	r3, r3, #12
 8002110:	2b08      	cmp	r3, #8
 8002112:	d0c4      	beq.n	800209e <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002114:	f000 fbc4 	bl	80028a0 <HAL_GetTick>
 8002118:	1bc0      	subs	r0, r0, r7
 800211a:	4540      	cmp	r0, r8
 800211c:	d9f5      	bls.n	800210a <HAL_RCC_ClockConfig+0xae>
 800211e:	e7ef      	b.n	8002100 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8002120:	2b03      	cmp	r3, #3
 8002122:	d10f      	bne.n	8002144 <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8002124:	68a3      	ldr	r3, [r4, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b0c      	cmp	r3, #12
 800212c:	d0b7      	beq.n	800209e <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212e:	f000 fbb7 	bl	80028a0 <HAL_GetTick>
 8002132:	1bc0      	subs	r0, r0, r7
 8002134:	4540      	cmp	r0, r8
 8002136:	d9f5      	bls.n	8002124 <HAL_RCC_ClockConfig+0xc8>
 8002138:	e7e2      	b.n	8002100 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213a:	f000 fbb1 	bl	80028a0 <HAL_GetTick>
 800213e:	1bc0      	subs	r0, r0, r7
 8002140:	4540      	cmp	r0, r8
 8002142:	d8dd      	bhi.n	8002100 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002144:	68a3      	ldr	r3, [r4, #8]
 8002146:	f013 0f0c 	tst.w	r3, #12
 800214a:	d1f6      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
 800214c:	e7a7      	b.n	800209e <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	b2f2      	uxtb	r2, r6
 8002150:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	429e      	cmp	r6, r3
 800215a:	d19b      	bne.n	8002094 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	6829      	ldr	r1, [r5, #0]
 800215e:	074a      	lsls	r2, r1, #29
 8002160:	d506      	bpl.n	8002170 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002162:	4815      	ldr	r0, [pc, #84]	; (80021b8 <HAL_RCC_ClockConfig+0x15c>)
 8002164:	6883      	ldr	r3, [r0, #8]
 8002166:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800216a:	68eb      	ldr	r3, [r5, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002170:	070b      	lsls	r3, r1, #28
 8002172:	d507      	bpl.n	8002184 <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002174:	4a10      	ldr	r2, [pc, #64]	; (80021b8 <HAL_RCC_ClockConfig+0x15c>)
 8002176:	6929      	ldr	r1, [r5, #16]
 8002178:	6893      	ldr	r3, [r2, #8]
 800217a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800217e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002182:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002184:	f7ff ff2c 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_ClockConfig+0x15c>)
 800218a:	22f0      	movs	r2, #240	; 0xf0
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	fa92 f2a2 	rbit	r2, r2
 8002192:	fab2 f282 	clz	r2, r2
 8002196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800219a:	40d3      	lsrs	r3, r2
 800219c:	4a07      	ldr	r2, [pc, #28]	; (80021bc <HAL_RCC_ClockConfig+0x160>)
 800219e:	5cd3      	ldrb	r3, [r2, r3]
 80021a0:	40d8      	lsrs	r0, r3
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <HAL_RCC_ClockConfig+0x164>)
 80021a4:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80021a6:	2000      	movs	r0, #0
 80021a8:	f000 fbea 	bl	8002980 <HAL_InitTick>
  
  return HAL_OK;
 80021ac:	2000      	movs	r0, #0
}
 80021ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021b2:	bf00      	nop
 80021b4:	40023c00 	.word	0x40023c00
 80021b8:	40023800 	.word	0x40023800
 80021bc:	080035f9 	.word	0x080035f9
 80021c0:	20000004 	.word	0x20000004

080021c4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80021c4:	4b01      	ldr	r3, [pc, #4]	; (80021cc <HAL_RCC_GetHCLKFreq+0x8>)
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	20000004 	.word	0x20000004

080021d0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80021d0:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d2:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	fa92 f2a2 	rbit	r2, r2
 80021dc:	fab2 f282 	clz	r2, r2
 80021e0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80021e4:	40d3      	lsrs	r3, r2
 80021e6:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021e8:	5cd3      	ldrb	r3, [r2, r3]
 80021ea:	4a04      	ldr	r2, [pc, #16]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x2c>)
 80021ec:	6810      	ldr	r0, [r2, #0]
}
 80021ee:	40d8      	lsrs	r0, r3
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
 80021f8:	080035f9 	.word	0x080035f9
 80021fc:	20000004 	.word	0x20000004

08002200 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002200:	4b08      	ldr	r3, [pc, #32]	; (8002224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002202:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	fa92 f2a2 	rbit	r2, r2
 800220c:	fab2 f282 	clz	r2, r2
 8002210:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002214:	40d3      	lsrs	r3, r2
 8002216:	4a04      	ldr	r2, [pc, #16]	; (8002228 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002218:	5cd3      	ldrb	r3, [r2, r3]
 800221a:	4a04      	ldr	r2, [pc, #16]	; (800222c <HAL_RCC_GetPCLK2Freq+0x2c>)
 800221c:	6810      	ldr	r0, [r2, #0]
} 
 800221e:	40d8      	lsrs	r0, r3
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	080035f9 	.word	0x080035f9
 800222c:	20000004 	.word	0x20000004

08002230 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002230:	230f      	movs	r3, #15
 8002232:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_RCC_GetClockConfig+0x34>)
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	f002 0203 	and.w	r2, r2, #3
 800223c:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002244:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800224c:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	08db      	lsrs	r3, r3, #3
 8002252:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002256:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <HAL_RCC_GetClockConfig+0x38>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	600b      	str	r3, [r1, #0]
 8002262:	4770      	bx	lr
 8002264:	40023800 	.word	0x40023800
 8002268:	40023c00 	.word	0x40023c00

0800226c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800226c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002270:	4f6a      	ldr	r7, [pc, #424]	; (800241c <HAL_GPIO_Init+0x1b0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002272:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002274:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8002424 <HAL_GPIO_Init+0x1b8>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002278:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8002428 <HAL_GPIO_Init+0x1bc>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800227c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227e:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8002284:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8002286:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8002288:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800228a:	ea34 0303 	bics.w	r3, r4, r3
 800228e:	f040 80bd 	bne.w	800240c <HAL_GPIO_Init+0x1a0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002292:	684d      	ldr	r5, [r1, #4]
 8002294:	f025 0a10 	bic.w	sl, r5, #16
 8002298:	f1ba 0f02 	cmp.w	sl, #2
 800229c:	d114      	bne.n	80022c8 <HAL_GPIO_Init+0x5c>
 800229e:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 80022a2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80022a6:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022aa:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80022ae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80022b2:	230f      	movs	r3, #15
 80022b4:	fa03 f30b 	lsl.w	r3, r3, fp
 80022b8:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80022bc:	690b      	ldr	r3, [r1, #16]
 80022be:	fa03 f30b 	lsl.w	r3, r3, fp
 80022c2:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 80022c4:	f8c9 3020 	str.w	r3, [r9, #32]
 80022c8:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022cc:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d0:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022d2:	fa09 f90b 	lsl.w	r9, r9, fp
 80022d6:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022da:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022de:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e2:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022e6:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ea:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022ec:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 80022f0:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f2:	d80f      	bhi.n	8002314 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022f4:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022f6:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f8:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022fc:	fa06 f60b 	lsl.w	r6, r6, fp
 8002300:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8002302:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002304:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002306:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800230a:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800230e:	4096      	lsls	r6, r2
 8002310:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8002312:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002314:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002316:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800231a:	688b      	ldr	r3, [r1, #8]
 800231c:	fa03 f30b 	lsl.w	r3, r3, fp
 8002320:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8002324:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002326:	00eb      	lsls	r3, r5, #3
 8002328:	d570      	bpl.n	800240c <HAL_GPIO_Init+0x1a0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	9303      	str	r3, [sp, #12]
 800232e:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002332:	4b3b      	ldr	r3, [pc, #236]	; (8002420 <HAL_GPIO_Init+0x1b4>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002334:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002338:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 800233c:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8002340:	f022 0903 	bic.w	r9, r2, #3
 8002344:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8002348:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800234c:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8002350:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002352:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002358:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800235c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8002360:	260f      	movs	r6, #15
 8002362:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002366:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002368:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800236c:	d01c      	beq.n	80023a8 <HAL_GPIO_Init+0x13c>
 800236e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002372:	4298      	cmp	r0, r3
 8002374:	d01a      	beq.n	80023ac <HAL_GPIO_Init+0x140>
 8002376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800237a:	4298      	cmp	r0, r3
 800237c:	d018      	beq.n	80023b0 <HAL_GPIO_Init+0x144>
 800237e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002382:	4298      	cmp	r0, r3
 8002384:	d016      	beq.n	80023b4 <HAL_GPIO_Init+0x148>
 8002386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800238a:	4298      	cmp	r0, r3
 800238c:	d014      	beq.n	80023b8 <HAL_GPIO_Init+0x14c>
 800238e:	4540      	cmp	r0, r8
 8002390:	d014      	beq.n	80023bc <HAL_GPIO_Init+0x150>
 8002392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002396:	4298      	cmp	r0, r3
 8002398:	d012      	beq.n	80023c0 <HAL_GPIO_Init+0x154>
 800239a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800239e:	4298      	cmp	r0, r3
 80023a0:	bf14      	ite	ne
 80023a2:	2308      	movne	r3, #8
 80023a4:	2307      	moveq	r3, #7
 80023a6:	e00c      	b.n	80023c2 <HAL_GPIO_Init+0x156>
 80023a8:	2300      	movs	r3, #0
 80023aa:	e00a      	b.n	80023c2 <HAL_GPIO_Init+0x156>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e008      	b.n	80023c2 <HAL_GPIO_Init+0x156>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e006      	b.n	80023c2 <HAL_GPIO_Init+0x156>
 80023b4:	2303      	movs	r3, #3
 80023b6:	e004      	b.n	80023c2 <HAL_GPIO_Init+0x156>
 80023b8:	2304      	movs	r3, #4
 80023ba:	e002      	b.n	80023c2 <HAL_GPIO_Init+0x156>
 80023bc:	2305      	movs	r3, #5
 80023be:	e000      	b.n	80023c2 <HAL_GPIO_Init+0x156>
 80023c0:	2306      	movs	r3, #6
 80023c2:	fa03 f30a 	lsl.w	r3, r3, sl
 80023c6:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c8:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023cc:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 80023ce:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023d0:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80023d4:	bf0c      	ite	eq
 80023d6:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80023d8:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 80023da:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 80023de:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023e2:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80023e6:	bf0c      	ite	eq
 80023e8:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80023ea:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 80023ec:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ee:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023f0:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80023f4:	bf0c      	ite	eq
 80023f6:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 80023f8:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 80023fa:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 80023fe:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002402:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8002404:	bf54      	ite	pl
 8002406:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8002408:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 800240a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240c:	3201      	adds	r2, #1
 800240e:	2a10      	cmp	r2, #16
 8002410:	f47f af38 	bne.w	8002284 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8002414:	b005      	add	sp, #20
 8002416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800241a:	bf00      	nop
 800241c:	40013c00 	.word	0x40013c00
 8002420:	40020000 	.word	0x40020000
 8002424:	40023800 	.word	0x40023800
 8002428:	40021400 	.word	0x40021400

0800242c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800242c:	b902      	cbnz	r2, 8002430 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800242e:	0409      	lsls	r1, r1, #16
 8002430:	6181      	str	r1, [r0, #24]
 8002432:	4770      	bx	lr

08002434 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002434:	6943      	ldr	r3, [r0, #20]
 8002436:	4059      	eors	r1, r3
 8002438:	6141      	str	r1, [r0, #20]
 800243a:	4770      	bx	lr

0800243c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800243c:	6803      	ldr	r3, [r0, #0]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002444:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002448:	2118      	movs	r1, #24
 800244a:	3a10      	subs	r2, #16
 800244c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002450:	4904      	ldr	r1, [pc, #16]	; (8002464 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8002452:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002454:	bf88      	it	hi
 8002456:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002458:	5c89      	ldrb	r1, [r1, r2]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800245a:	6583      	str	r3, [r0, #88]	; 0x58
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800245c:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800245e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	08003609 	.word	0x08003609

08002468 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002468:	b570      	push	{r4, r5, r6, lr}
 800246a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800246c:	f000 fa18 	bl	80028a0 <HAL_GetTick>
 8002470:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002472:	2c00      	cmp	r4, #0
 8002474:	d064      	beq.n	8002540 <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002476:	2300      	movs	r3, #0
 8002478:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800247c:	6822      	ldr	r2, [r4, #0]
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800247e:	2302      	movs	r3, #2
 8002480:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002484:	6813      	ldr	r3, [r2, #0]
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800248c:	6821      	ldr	r1, [r4, #0]
 800248e:	680b      	ldr	r3, [r1, #0]
 8002490:	07d8      	lsls	r0, r3, #31
 8002492:	d508      	bpl.n	80024a6 <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002494:	f000 fa04 	bl	80028a0 <HAL_GetTick>
 8002498:	1b40      	subs	r0, r0, r5
 800249a:	2805      	cmp	r0, #5
 800249c:	d9f6      	bls.n	800248c <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800249e:	2320      	movs	r3, #32
 80024a0:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024a2:	2003      	movs	r0, #3
 80024a4:	e051      	b.n	800254a <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024a6:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024a8:	4a29      	ldr	r2, [pc, #164]	; (8002550 <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024aa:	6865      	ldr	r5, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ac:	69a0      	ldr	r0, [r4, #24]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024ae:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024b0:	68a3      	ldr	r3, [r4, #8]
 80024b2:	431d      	orrs	r5, r3
 80024b4:	68e3      	ldr	r3, [r4, #12]
 80024b6:	431d      	orrs	r5, r3
 80024b8:	6923      	ldr	r3, [r4, #16]
 80024ba:	431d      	orrs	r5, r3
 80024bc:	6963      	ldr	r3, [r4, #20]
 80024be:	432b      	orrs	r3, r5
 80024c0:	69e5      	ldr	r5, [r4, #28]
 80024c2:	4303      	orrs	r3, r0
 80024c4:	432b      	orrs	r3, r5
 80024c6:	6a25      	ldr	r5, [r4, #32]
 80024c8:	432b      	orrs	r3, r5
 80024ca:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024ce:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024d0:	bf01      	itttt	eq
 80024d2:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 80024d4:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 80024d6:	4335      	orreq	r5, r6
 80024d8:	432b      	orreq	r3, r5
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024da:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024dc:	694b      	ldr	r3, [r1, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024de:	2a04      	cmp	r2, #4

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024e0:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024e4:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024e8:	d11c      	bne.n	8002524 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80024ec:	4313      	orrs	r3, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024ee:	b920      	cbnz	r0, 80024fa <HAL_DMA_Init+0x92>
  {
    switch (tmp)
 80024f0:	2a01      	cmp	r2, #1
 80024f2:	d00b      	beq.n	800250c <HAL_DMA_Init+0xa4>
 80024f4:	d313      	bcc.n	800251e <HAL_DMA_Init+0xb6>
 80024f6:	2a02      	cmp	r2, #2
 80024f8:	e010      	b.n	800251c <HAL_DMA_Init+0xb4>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024fa:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80024fe:	d10a      	bne.n	8002516 <HAL_DMA_Init+0xae>
  {
    switch (tmp)
 8002500:	2a03      	cmp	r2, #3
 8002502:	d80f      	bhi.n	8002524 <HAL_DMA_Init+0xbc>
 8002504:	e8df f002 	tbb	[pc, r2]
 8002508:	021e0b1e 	.word	0x021e0b1e
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800250c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800250e:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 8002512:	d107      	bne.n	8002524 <HAL_DMA_Init+0xbc>
 8002514:	e016      	b.n	8002544 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002516:	2a02      	cmp	r2, #2
 8002518:	d914      	bls.n	8002544 <HAL_DMA_Init+0xdc>
 800251a:	2a03      	cmp	r2, #3
 800251c:	d102      	bne.n	8002524 <HAL_DMA_Init+0xbc>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800251e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002520:	01d2      	lsls	r2, r2, #7
 8002522:	d40f      	bmi.n	8002544 <HAL_DMA_Init+0xdc>
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002524:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002526:	4620      	mov	r0, r4
 8002528:	f7ff ff88 	bl	800243c <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800252c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800252e:	233f      	movs	r3, #63	; 0x3f
 8002530:	4093      	lsls	r3, r2
 8002532:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002534:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002536:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002538:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800253a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 800253e:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8002540:	2001      	movs	r0, #1
 8002542:	bd70      	pop	{r4, r5, r6, pc}
    tmp |= hdma->Init.FIFOThreshold;
    
    if(DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002544:	2340      	movs	r3, #64	; 0x40
 8002546:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002548:	2001      	movs	r0, #1
 800254a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 800254e:	bd70      	pop	{r4, r5, r6, pc}
 8002550:	f010803f 	.word	0xf010803f

08002554 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002554:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002556:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800255a:	2c01      	cmp	r4, #1
 800255c:	d038      	beq.n	80025d0 <HAL_DMA_Start_IT+0x7c>
 800255e:	2401      	movs	r4, #1
 8002560:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002564:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002568:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800256a:	2c01      	cmp	r4, #1
 800256c:	f04f 0500 	mov.w	r5, #0
 8002570:	f04f 0402 	mov.w	r4, #2
 8002574:	d128      	bne.n	80025c8 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002576:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800257a:	6804      	ldr	r4, [r0, #0]
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800257c:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800257e:	6825      	ldr	r5, [r4, #0]
 8002580:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8002584:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002586:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002588:	6883      	ldr	r3, [r0, #8]
 800258a:	2b40      	cmp	r3, #64	; 0x40
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800258c:	bf0e      	itee	eq
 800258e:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8002590:	60a1      	strne	r1, [r4, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8002592:	60e2      	strne	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002594:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002596:	bf08      	it	eq
 8002598:	60e1      	streq	r1, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800259a:	233f      	movs	r3, #63	; 0x3f
 800259c:	4093      	lsls	r3, r2
 800259e:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	f043 0316 	orr.w	r3, r3, #22
 80025a6:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80025a8:	6963      	ldr	r3, [r4, #20]
 80025aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ae:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80025b2:	b11b      	cbz	r3, 80025bc <HAL_DMA_Start_IT+0x68>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	f043 0308 	orr.w	r3, r3, #8
 80025ba:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6023      	str	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 80025c4:	2000      	movs	r0, #0
 80025c6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025c8:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025cc:	4620      	mov	r0, r4
 80025ce:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025d0:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 80025d2:	bd70      	pop	{r4, r5, r6, pc}

080025d4 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d003      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80025e0:	2001      	movs	r0, #1
 80025e2:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025e4:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025e6:	2305      	movs	r3, #5
 80025e8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ec:	6813      	ldr	r3, [r2, #0]
 80025ee:	f023 0301 	bic.w	r3, r3, #1
 80025f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80025f4:	2000      	movs	r0, #0
}
 80025f6:	4770      	bx	lr

080025f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025fe:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8002600:	4b59      	ldr	r3, [pc, #356]	; (8002768 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002602:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8002604:	681f      	ldr	r7, [r3, #0]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8002606:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002608:	2308      	movs	r3, #8
 800260a:	4093      	lsls	r3, r2
 800260c:	421e      	tst	r6, r3
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800260e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002610:	d00c      	beq.n	800262c <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002612:	6801      	ldr	r1, [r0, #0]
 8002614:	6808      	ldr	r0, [r1, #0]
 8002616:	0740      	lsls	r0, r0, #29
 8002618:	d508      	bpl.n	800262c <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800261a:	6808      	ldr	r0, [r1, #0]
 800261c:	f020 0004 	bic.w	r0, r0, #4
 8002620:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002622:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002624:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800262c:	4b4f      	ldr	r3, [pc, #316]	; (800276c <HAL_DMA_IRQHandler+0x174>)
 800262e:	4093      	lsls	r3, r2
 8002630:	421e      	tst	r6, r3
 8002632:	d008      	beq.n	8002646 <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002634:	6821      	ldr	r1, [r4, #0]
 8002636:	6949      	ldr	r1, [r1, #20]
 8002638:	0609      	lsls	r1, r1, #24
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800263a:	bf41      	itttt	mi
 800263c:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800263e:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 8002640:	f043 0302 	orrmi.w	r3, r3, #2
 8002644:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002646:	4b4a      	ldr	r3, [pc, #296]	; (8002770 <HAL_DMA_IRQHandler+0x178>)
 8002648:	4093      	lsls	r3, r2
 800264a:	421e      	tst	r6, r3
 800264c:	d008      	beq.n	8002660 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800264e:	6821      	ldr	r1, [r4, #0]
 8002650:	6809      	ldr	r1, [r1, #0]
 8002652:	0788      	lsls	r0, r1, #30
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002654:	bf41      	itttt	mi
 8002656:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002658:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 800265a:	f043 0304 	orrmi.w	r3, r3, #4
 800265e:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002660:	2310      	movs	r3, #16
 8002662:	fa03 f202 	lsl.w	r2, r3, r2
 8002666:	4216      	tst	r6, r2
 8002668:	d017      	beq.n	800269a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	6819      	ldr	r1, [r3, #0]
 800266e:	0709      	lsls	r1, r1, #28
 8002670:	d513      	bpl.n	800269a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002672:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	0350      	lsls	r0, r2, #13
 8002678:	d504      	bpl.n	8002684 <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	0319      	lsls	r1, r3, #12
 800267e:	d508      	bpl.n	8002692 <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002680:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002682:	e007      	b.n	8002694 <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	05d2      	lsls	r2, r2, #23
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002688:	bf5e      	ittt	pl
 800268a:	681a      	ldrpl	r2, [r3, #0]
 800268c:	f022 0208 	bicpl.w	r2, r2, #8
 8002690:	601a      	strpl	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002692:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002694:	b10b      	cbz	r3, 800269a <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002696:	4620      	mov	r0, r4
 8002698:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800269a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800269c:	2220      	movs	r2, #32
 800269e:	408a      	lsls	r2, r1
 80026a0:	4216      	tst	r6, r2
 80026a2:	d03b      	beq.n	800271c <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026a4:	6823      	ldr	r3, [r4, #0]
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	06c6      	lsls	r6, r0, #27
 80026aa:	d537      	bpl.n	800271c <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026ac:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026ae:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80026b2:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026b4:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026b6:	d119      	bne.n	80026ec <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026b8:	f022 0216 	bic.w	r2, r2, #22
 80026bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80026c8:	b90a      	cbnz	r2, 80026ce <HAL_DMA_IRQHandler+0xd6>
 80026ca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80026cc:	b11a      	cbz	r2, 80026d6 <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	f022 0208 	bic.w	r2, r2, #8
 80026d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026d6:	233f      	movs	r3, #63	; 0x3f
 80026d8:	408b      	lsls	r3, r1
 80026da:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026dc:	2300      	movs	r3, #0
 80026de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026e2:	2301      	movs	r3, #1
 80026e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80026e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80026ea:	e037      	b.n	800275c <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026ec:	0350      	lsls	r0, r2, #13
 80026ee:	d504      	bpl.n	80026fa <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	0319      	lsls	r1, r3, #12
 80026f4:	d40e      	bmi.n	8002714 <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026f8:	e00d      	b.n	8002716 <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8002700:	d108      	bne.n	8002714 <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002702:	6819      	ldr	r1, [r3, #0]
 8002704:	f021 0110 	bic.w	r1, r1, #16
 8002708:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800270a:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800270c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002710:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002714:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002716:	b10b      	cbz	r3, 800271c <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002718:	4620      	mov	r0, r4
 800271a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800271c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800271e:	b303      	cbz	r3, 8002762 <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002720:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002722:	07da      	lsls	r2, r3, #31
 8002724:	d519      	bpl.n	800275a <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002726:	2305      	movs	r3, #5

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002728:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800272a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800272e:	6813      	ldr	r3, [r2, #0]
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8002736:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800273a:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);

      do
      {
        if (++count > timeout)
 800273e:	9b01      	ldr	r3, [sp, #4]
 8002740:	3301      	adds	r3, #1
 8002742:	429f      	cmp	r7, r3
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	d302      	bcc.n	800274e <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002748:	6813      	ldr	r3, [r2, #0]
 800274a:	07db      	lsls	r3, r3, #31
 800274c:	d4f7      	bmi.n	800273e <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800274e:	2300      	movs	r3, #0
 8002750:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002754:	2301      	movs	r3, #1
 8002756:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800275a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800275c:	b10b      	cbz	r3, 8002762 <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800275e:	4620      	mov	r0, r4
 8002760:	4798      	blx	r3
    }
  }
}
 8002762:	b003      	add	sp, #12
 8002764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002766:	bf00      	nop
 8002768:	20000004 	.word	0x20000004
 800276c:	00800001 	.word	0x00800001
 8002770:	00800004 	.word	0x00800004

08002774 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002774:	4a07      	ldr	r2, [pc, #28]	; (8002794 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002776:	68d3      	ldr	r3, [r2, #12]
 8002778:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800277c:	041b      	lsls	r3, r3, #16
 800277e:	0c1b      	lsrs	r3, r3, #16
 8002780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002784:	0200      	lsls	r0, r0, #8
 8002786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800278e:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002790:	60d3      	str	r3, [r2, #12]
 8002792:	4770      	bx	lr
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002798:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <HAL_NVIC_SetPriority+0x60>)
 800279a:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800279c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a0:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a2:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a6:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a8:	2c04      	cmp	r4, #4
 80027aa:	bf28      	it	cs
 80027ac:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ae:	2d06      	cmp	r5, #6

  return (
 80027b0:	f04f 0501 	mov.w	r5, #1
 80027b4:	fa05 f404 	lsl.w	r4, r5, r4
 80027b8:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027bc:	bf8c      	ite	hi
 80027be:	3b03      	subhi	r3, #3
 80027c0:	2300      	movls	r3, #0

  return (
 80027c2:	400c      	ands	r4, r1
 80027c4:	409c      	lsls	r4, r3
 80027c6:	fa05 f303 	lsl.w	r3, r5, r3
 80027ca:	3b01      	subs	r3, #1
 80027cc:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80027ce:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80027d0:	ea42 0204 	orr.w	r2, r2, r4
 80027d4:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d8:	bfaf      	iteee	ge
 80027da:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027de:	f000 000f 	andlt.w	r0, r0, #15
 80027e2:	4b06      	ldrlt	r3, [pc, #24]	; (80027fc <HAL_NVIC_SetPriority+0x64>)
 80027e4:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e6:	bfa5      	ittet	ge
 80027e8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80027ec:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ee:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80027f4:	bd30      	pop	{r4, r5, pc}
 80027f6:	bf00      	nop
 80027f8:	e000ed00 	.word	0xe000ed00
 80027fc:	e000ed14 	.word	0xe000ed14

08002800 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002800:	0942      	lsrs	r2, r0, #5
 8002802:	2301      	movs	r3, #1
 8002804:	f000 001f 	and.w	r0, r0, #31
 8002808:	fa03 f000 	lsl.w	r0, r3, r0
 800280c:	4b01      	ldr	r3, [pc, #4]	; (8002814 <HAL_NVIC_EnableIRQ+0x14>)
 800280e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002812:	4770      	bx	lr
 8002814:	e000e100 	.word	0xe000e100

08002818 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002818:	3801      	subs	r0, #1
 800281a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800281e:	d20a      	bcs.n	8002836 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002822:	4a07      	ldr	r2, [pc, #28]	; (8002840 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002824:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002826:	21f0      	movs	r1, #240	; 0xf0
 8002828:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800282c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282e:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002830:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8002836:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000e010 	.word	0xe000e010
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002846:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002848:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800284a:	bf0c      	ite	eq
 800284c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002850:	f022 0204 	bicne.w	r2, r2, #4
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	4770      	bx	lr
 8002858:	e000e010 	.word	0xe000e010

0800285c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800285c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_Init+0x30>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002866:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800286e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002876:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002878:	2003      	movs	r0, #3
 800287a:	f7ff ff7b 	bl	8002774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800287e:	2000      	movs	r0, #0
 8002880:	f000 f87e 	bl	8002980 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002884:	f000 f8b8 	bl	80029f8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8002888:	2000      	movs	r0, #0
 800288a:	bd08      	pop	{r3, pc}
 800288c:	40023c00 	.word	0x40023c00

08002890 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002890:	4a02      	ldr	r2, [pc, #8]	; (800289c <HAL_IncTick+0xc>)
 8002892:	6813      	ldr	r3, [r2, #0]
 8002894:	3301      	adds	r3, #1
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20003d74 	.word	0x20003d74

080028a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80028a0:	4b01      	ldr	r3, [pc, #4]	; (80028a8 <HAL_GetTick+0x8>)
 80028a2:	6818      	ldr	r0, [r3, #0]
}
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20003d74 	.word	0x20003d74

080028ac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028ac:	490f      	ldr	r1, [pc, #60]	; (80028ec <SystemInit+0x40>)
 80028ae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80028b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <SystemInit+0x44>)
 80028bc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028be:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80028c0:	f042 0201 	orr.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028c6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80028ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028d2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80028d4:	4a07      	ldr	r2, [pc, #28]	; (80028f4 <SystemInit+0x48>)
 80028d6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028de:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80028e0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80028e6:	608b      	str	r3, [r1, #8]
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	e000ed00 	.word	0xe000ed00
 80028f0:	40023800 	.word	0x40023800
 80028f4:	24003010 	.word	0x24003010

080028f8 <NMI_Handler>:
 80028f8:	4770      	bx	lr

080028fa <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80028fa:	e7fe      	b.n	80028fa <HardFault_Handler>

080028fc <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80028fc:	e7fe      	b.n	80028fc <MemManage_Handler>

080028fe <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80028fe:	e7fe      	b.n	80028fe <BusFault_Handler>

08002900 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002900:	e7fe      	b.n	8002900 <UsageFault_Handler>

08002902 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002902:	4770      	bx	lr

08002904 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8002904:	f7fe be0b 	b.w	800151e <osSystickHandler>

08002908 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002908:	4801      	ldr	r0, [pc, #4]	; (8002910 <DMA1_Stream1_IRQHandler+0x8>)
 800290a:	f7ff be75 	b.w	80025f8 <HAL_DMA_IRQHandler>
 800290e:	bf00      	nop
 8002910:	20003eb4 	.word	0x20003eb4

08002914 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002914:	4801      	ldr	r0, [pc, #4]	; (800291c <DMA1_Stream3_IRQHandler+0x8>)
 8002916:	f7ff be6f 	b.w	80025f8 <HAL_DMA_IRQHandler>
 800291a:	bf00      	nop
 800291c:	20003f70 	.word	0x20003f70

08002920 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002920:	4801      	ldr	r0, [pc, #4]	; (8002928 <DMA1_Stream5_IRQHandler+0x8>)
 8002922:	f7ff be69 	b.w	80025f8 <HAL_DMA_IRQHandler>
 8002926:	bf00      	nop
 8002928:	20003db8 	.word	0x20003db8

0800292c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800292c:	4801      	ldr	r0, [pc, #4]	; (8002934 <DMA1_Stream6_IRQHandler+0x8>)
 800292e:	f7ff be63 	b.w	80025f8 <HAL_DMA_IRQHandler>
 8002932:	bf00      	nop
 8002934:	200040ac 	.word	0x200040ac

08002938 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002938:	4801      	ldr	r0, [pc, #4]	; (8002940 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800293a:	f7ff b8c9 	b.w	8001ad0 <HAL_TIM_IRQHandler>
 800293e:	bf00      	nop
 8002940:	20003d78 	.word	0x20003d78

08002944 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002944:	4801      	ldr	r0, [pc, #4]	; (800294c <USART2_IRQHandler+0x8>)
 8002946:	f7ff b809 	b.w	800195c <HAL_UART_IRQHandler>
 800294a:	bf00      	nop
 800294c:	2000420c 	.word	0x2000420c

08002950 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002950:	4801      	ldr	r0, [pc, #4]	; (8002958 <USART3_IRQHandler+0x8>)
 8002952:	f7ff b803 	b.w	800195c <HAL_UART_IRQHandler>
 8002956:	bf00      	nop
 8002958:	20003f14 	.word	0x20003f14

0800295c <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800295c:	4801      	ldr	r0, [pc, #4]	; (8002964 <DMA2_Stream1_IRQHandler+0x8>)
 800295e:	f7ff be4b 	b.w	80025f8 <HAL_DMA_IRQHandler>
 8002962:	bf00      	nop
 8002964:	20003e2c 	.word	0x20003e2c

08002968 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002968:	4801      	ldr	r0, [pc, #4]	; (8002970 <DMA2_Stream2_IRQHandler+0x8>)
 800296a:	f7ff be45 	b.w	80025f8 <HAL_DMA_IRQHandler>
 800296e:	bf00      	nop
 8002970:	2000404c 	.word	0x2000404c

08002974 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002974:	4801      	ldr	r0, [pc, #4]	; (800297c <DMA2_Stream7_IRQHandler+0x8>)
 8002976:	f7ff be3f 	b.w	80025f8 <HAL_DMA_IRQHandler>
 800297a:	bf00      	nop
 800297c:	20003fe8 	.word	0x20003fe8

08002980 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002980:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8002982:	4601      	mov	r1, r0
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002984:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8002986:	2200      	movs	r2, #0
 8002988:	2019      	movs	r0, #25
 800298a:	f7ff ff05 	bl	8002798 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800298e:	2019      	movs	r0, #25
 8002990:	f7ff ff36 	bl	8002800 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002994:	2500      	movs	r5, #0
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <HAL_InitTick+0x68>)
 8002998:	9502      	str	r5, [sp, #8]
 800299a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800299c:	4c13      	ldr	r4, [pc, #76]	; (80029ec <HAL_InitTick+0x6c>)
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	645a      	str	r2, [r3, #68]	; 0x44
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	9302      	str	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029ac:	a901      	add	r1, sp, #4
 80029ae:	a803      	add	r0, sp, #12
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80029b0:	9b02      	ldr	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029b2:	f7ff fc3d 	bl	8002230 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80029b6:	f7ff fc23 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80029ba:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <HAL_InitTick+0x70>)
 80029bc:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80029be:	f240 33e7 	movw	r3, #999	; 0x3e7
 80029c2:	60e3      	str	r3, [r4, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_InitTick+0x74>)
 80029c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80029ca:	3801      	subs	r0, #1
 80029cc:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80029ce:	4620      	mov	r0, r4
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 80029d0:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d2:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80029d4:	f7ff f982 	bl	8001cdc <HAL_TIM_Base_Init>
 80029d8:	b918      	cbnz	r0, 80029e2 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80029da:	4620      	mov	r0, r4
 80029dc:	f7ff f869 	bl	8001ab2 <HAL_TIM_Base_Start_IT>
 80029e0:	e000      	b.n	80029e4 <HAL_InitTick+0x64>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80029e2:	2001      	movs	r0, #1
}
 80029e4:	b009      	add	sp, #36	; 0x24
 80029e6:	bd30      	pop	{r4, r5, pc}
 80029e8:	40023800 	.word	0x40023800
 80029ec:	20003d78 	.word	0x20003d78
 80029f0:	40010000 	.word	0x40010000
 80029f4:	000f4240 	.word	0x000f4240

080029f8 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029fa:	2003      	movs	r0, #3
 80029fc:	f7ff feba 	bl	8002774 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002a00:	2200      	movs	r2, #0
 8002a02:	4611      	mov	r1, r2
 8002a04:	f06f 000b 	mvn.w	r0, #11
 8002a08:	f7ff fec6 	bl	8002798 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	4611      	mov	r1, r2
 8002a10:	f06f 000a 	mvn.w	r0, #10
 8002a14:	f7ff fec0 	bl	8002798 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	f06f 0009 	mvn.w	r0, #9
 8002a20:	f7ff feba 	bl	8002798 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002a24:	2200      	movs	r2, #0
 8002a26:	4611      	mov	r1, r2
 8002a28:	f06f 0004 	mvn.w	r0, #4
 8002a2c:	f7ff feb4 	bl	8002798 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002a30:	2200      	movs	r2, #0
 8002a32:	4611      	mov	r1, r2
 8002a34:	f06f 0003 	mvn.w	r0, #3
 8002a38:	f7ff feae 	bl	8002798 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	210f      	movs	r1, #15
 8002a40:	f06f 0001 	mvn.w	r0, #1
 8002a44:	f7ff fea8 	bl	8002798 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	210f      	movs	r1, #15
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002a54:	f7ff bea0 	b.w	8002798 <HAL_NVIC_SetPriority>

08002a58 <HAL_UART_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a58:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002a5a:	6803      	ldr	r3, [r0, #0]
 8002a5c:	4aa6      	ldr	r2, [pc, #664]	; (8002cf8 <HAL_UART_MspInit+0x2a0>)
 8002a5e:	4293      	cmp	r3, r2

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a60:	b08a      	sub	sp, #40	; 0x28
 8002a62:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002a64:	d153      	bne.n	8002b0e <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a66:	2600      	movs	r6, #0
 8002a68:	4ba4      	ldr	r3, [pc, #656]	; (8002cfc <HAL_UART_MspInit+0x2a4>)
 8002a6a:	9601      	str	r6, [sp, #4]
 8002a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6e:	48a4      	ldr	r0, [pc, #656]	; (8002d00 <HAL_UART_MspInit+0x2a8>)

    /* Peripheral DMA init*/
  
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002a70:	4ca4      	ldr	r4, [pc, #656]	; (8002d04 <HAL_UART_MspInit+0x2ac>)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a72:	f042 0210 	orr.w	r2, r2, #16
 8002a76:	645a      	str	r2, [r3, #68]	; 0x44
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	9301      	str	r3, [sp, #4]
 8002a80:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 8002a82:	23c0      	movs	r3, #192	; 0xc0
 8002a84:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a92:	a905      	add	r1, sp, #20
    */
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a94:	2307      	movs	r3, #7
 8002a96:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a98:	f7ff fbe8 	bl	800226c <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart1_rx.Instance = DMA2_Stream2;
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002a9c:	4a9a      	ldr	r2, [pc, #616]	; (8002d08 <HAL_UART_MspInit+0x2b0>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a9e:	60a6      	str	r6, [r4, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_usart1_rx.Instance = DMA2_Stream2;
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002aa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002aa4:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aac:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002aae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ab2:	61e3      	str	r3, [r4, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002ab4:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002ab6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    /* Peripheral DMA init*/
  
    hdma_usart1_rx.Instance = DMA2_Stream2;
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aba:	60e6      	str	r6, [r4, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002abc:	6166      	str	r6, [r4, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002abe:	61a6      	str	r6, [r4, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002ac0:	6223      	str	r3, [r4, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ac2:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002ac4:	f7ff fcd0 	bl	8002468 <HAL_DMA_Init>
 8002ac8:	b108      	cbz	r0, 8002ace <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 8002aca:	f000 fca7 	bl	800341c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002ace:	636c      	str	r4, [r5, #52]	; 0x34
 8002ad0:	63a5      	str	r5, [r4, #56]	; 0x38

    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002ad2:	4c8e      	ldr	r4, [pc, #568]	; (8002d0c <HAL_UART_MspInit+0x2b4>)
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ad4:	4b8e      	ldr	r3, [pc, #568]	; (8002d10 <HAL_UART_MspInit+0x2b8>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ad6:	f44f 6280 	mov.w	r2, #1024	; 0x400

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    hdma_usart1_tx.Instance = DMA2_Stream7;
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ada:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 8002ade:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ae2:	6122      	str	r2, [r4, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8002ae4:	f44f 7280 	mov.w	r2, #256	; 0x100

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    hdma_usart1_tx.Instance = DMA2_Stream7;
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ae8:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8002aec:	61e2      	str	r2, [r4, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    hdma_usart1_tx.Instance = DMA2_Stream7;
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aee:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002af0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002af4:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    hdma_usart1_tx.Instance = DMA2_Stream7;
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002af6:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002af8:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002afa:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002afc:	6222      	str	r2, [r4, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002afe:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b00:	f7ff fcb2 	bl	8002468 <HAL_DMA_Init>
 8002b04:	b108      	cbz	r0, 8002b0a <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8002b06:	f000 fc89 	bl	800341c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002b0a:	632c      	str	r4, [r5, #48]	; 0x30
 8002b0c:	e0f0      	b.n	8002cf0 <HAL_UART_MspInit+0x298>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8002b0e:	4a81      	ldr	r2, [pc, #516]	; (8002d14 <HAL_UART_MspInit+0x2bc>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d158      	bne.n	8002bc6 <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b14:	2600      	movs	r6, #0
 8002b16:	4b79      	ldr	r3, [pc, #484]	; (8002cfc <HAL_UART_MspInit+0x2a4>)
 8002b18:	9602      	str	r6, [sp, #8]
 8002b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = Motor1_TX_Pin|Motor1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1c:	487e      	ldr	r0, [pc, #504]	; (8002d18 <HAL_UART_MspInit+0x2c0>)

    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002b1e:	4c7f      	ldr	r4, [pc, #508]	; (8002d1c <HAL_UART_MspInit+0x2c4>)
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b20:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	9302      	str	r3, [sp, #8]
 8002b2e:	9b02      	ldr	r3, [sp, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = Motor1_TX_Pin|Motor1_RX_Pin;
 8002b30:	230c      	movs	r3, #12
 8002b32:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b34:	2302      	movs	r3, #2
 8002b36:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b40:	a905      	add	r1, sp, #20
    */
    GPIO_InitStruct.Pin = Motor1_TX_Pin|Motor1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b42:	2307      	movs	r3, #7
 8002b44:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b46:	f7ff fb91 	bl	800226c <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002b4a:	4a75      	ldr	r2, [pc, #468]	; (8002d20 <HAL_UART_MspInit+0x2c8>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b4c:	60a6      	str	r6, [r4, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002b4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b52:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b5a:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002b5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b60:	61e3      	str	r3, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b62:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b68:	60e6      	str	r6, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b6a:	6166      	str	r6, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b6c:	61a6      	str	r6, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b6e:	6223      	str	r3, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b70:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b72:	f7ff fc79 	bl	8002468 <HAL_DMA_Init>
 8002b76:	b108      	cbz	r0, 8002b7c <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8002b78:	f000 fc50 	bl	800341c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002b7c:	636c      	str	r4, [r5, #52]	; 0x34

    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b7e:	4b69      	ldr	r3, [pc, #420]	; (8002d24 <HAL_UART_MspInit+0x2cc>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002b80:	63a5      	str	r5, [r4, #56]	; 0x38

    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002b82:	4c69      	ldr	r4, [pc, #420]	; (8002d28 <HAL_UART_MspInit+0x2d0>)
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b84:	f44f 6280 	mov.w	r2, #1024	; 0x400

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b88:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 8002b8c:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8002b90:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b94:	6122      	str	r2, [r4, #16]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b96:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002b9c:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b9e:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ba0:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ba2:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002ba4:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ba6:	6222      	str	r2, [r4, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ba8:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002baa:	f7ff fc5d 	bl	8002468 <HAL_DMA_Init>
 8002bae:	b108      	cbz	r0, 8002bb4 <HAL_UART_MspInit+0x15c>
    {
      Error_Handler();
 8002bb0:	f000 fc34 	bl	800341c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002bb4:	632c      	str	r4, [r5, #48]	; 0x30

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002bb6:	2026      	movs	r0, #38	; 0x26
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2105      	movs	r1, #5
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002bbc:	63a5      	str	r5, [r4, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002bbe:	f7ff fdeb 	bl	8002798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bc2:	2026      	movs	r0, #38	; 0x26
 8002bc4:	e05b      	b.n	8002c7e <HAL_UART_MspInit+0x226>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8002bc6:	4a59      	ldr	r2, [pc, #356]	; (8002d2c <HAL_UART_MspInit+0x2d4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d15b      	bne.n	8002c84 <HAL_UART_MspInit+0x22c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bcc:	2600      	movs	r6, #0
 8002bce:	4b4b      	ldr	r3, [pc, #300]	; (8002cfc <HAL_UART_MspInit+0x2a4>)
 8002bd0:	9603      	str	r6, [sp, #12]
 8002bd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = Motor2_TX_Pin|Motor2_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd4:	484a      	ldr	r0, [pc, #296]	; (8002d00 <HAL_UART_MspInit+0x2a8>)

    /* Peripheral DMA init*/
  
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002bd6:	4c56      	ldr	r4, [pc, #344]	; (8002d30 <HAL_UART_MspInit+0x2d8>)
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bd8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002bdc:	641a      	str	r2, [r3, #64]	; 0x40
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be4:	9303      	str	r3, [sp, #12]
 8002be6:	9b03      	ldr	r3, [sp, #12]
  
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = Motor2_TX_Pin|Motor2_RX_Pin;
 8002be8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bfa:	a905      	add	r1, sp, #20
    */
    GPIO_InitStruct.Pin = Motor2_TX_Pin|Motor2_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bfc:	2307      	movs	r3, #7
 8002bfe:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c00:	f7ff fb34 	bl	800226c <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart3_rx.Instance = DMA1_Stream1;
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002c04:	4a4b      	ldr	r2, [pc, #300]	; (8002d34 <HAL_UART_MspInit+0x2dc>)
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c06:	60a6      	str	r6, [r4, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_usart3_rx.Instance = DMA1_Stream1;
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002c08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c0c:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c14:	6123      	str	r3, [r4, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002c16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c1a:	61e3      	str	r3, [r4, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002c1c:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    /* Peripheral DMA init*/
  
    hdma_usart3_rx.Instance = DMA1_Stream1;
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c22:	60e6      	str	r6, [r4, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c24:	6166      	str	r6, [r4, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c26:	61a6      	str	r6, [r4, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c28:	6223      	str	r3, [r4, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c2a:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002c2c:	f7ff fc1c 	bl	8002468 <HAL_DMA_Init>
 8002c30:	b108      	cbz	r0, 8002c36 <HAL_UART_MspInit+0x1de>
    {
      Error_Handler();
 8002c32:	f000 fbf3 	bl	800341c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002c36:	636c      	str	r4, [r5, #52]	; 0x34

    hdma_usart3_tx.Instance = DMA1_Stream3;
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c38:	4b3f      	ldr	r3, [pc, #252]	; (8002d38 <HAL_UART_MspInit+0x2e0>)
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002c3a:	63a5      	str	r5, [r4, #56]	; 0x38

    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002c3c:	4c3f      	ldr	r4, [pc, #252]	; (8002d3c <HAL_UART_MspInit+0x2e4>)
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c3e:	f44f 6280 	mov.w	r2, #1024	; 0x400

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);

    hdma_usart3_tx.Instance = DMA1_Stream3;
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c42:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 8002c46:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8002c4a:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c4e:	6122      	str	r2, [r4, #16]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);

    hdma_usart3_tx.Instance = DMA1_Stream3;
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c50:	2300      	movs	r3, #0
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002c56:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);

    hdma_usart3_tx.Instance = DMA1_Stream3;
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c58:	60e3      	str	r3, [r4, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c5a:	6163      	str	r3, [r4, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c5c:	61a3      	str	r3, [r4, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002c5e:	61e3      	str	r3, [r4, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c60:	6222      	str	r2, [r4, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c62:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002c64:	f7ff fc00 	bl	8002468 <HAL_DMA_Init>
 8002c68:	b108      	cbz	r0, 8002c6e <HAL_UART_MspInit+0x216>
    {
      Error_Handler();
 8002c6a:	f000 fbd7 	bl	800341c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002c6e:	632c      	str	r4, [r5, #48]	; 0x30

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002c70:	2027      	movs	r0, #39	; 0x27
 8002c72:	2200      	movs	r2, #0
 8002c74:	2105      	movs	r1, #5
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002c76:	63a5      	str	r5, [r4, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002c78:	f7ff fd8e 	bl	8002798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c7c:	2027      	movs	r0, #39	; 0x27
 8002c7e:	f7ff fdbf 	bl	8002800 <HAL_NVIC_EnableIRQ>
 8002c82:	e036      	b.n	8002cf2 <HAL_UART_MspInit+0x29a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8002c84:	4a2e      	ldr	r2, [pc, #184]	; (8002d40 <HAL_UART_MspInit+0x2e8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d133      	bne.n	8002cf2 <HAL_UART_MspInit+0x29a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c8a:	2600      	movs	r6, #0
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <HAL_UART_MspInit+0x2a4>)
 8002c8e:	9604      	str	r6, [sp, #16]
 8002c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = iNemo_TX_Pin|iNemo_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c92:	482c      	ldr	r0, [pc, #176]	; (8002d44 <HAL_UART_MspInit+0x2ec>)

    /* Peripheral DMA init*/
  
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002c94:	4c2c      	ldr	r4, [pc, #176]	; (8002d48 <HAL_UART_MspInit+0x2f0>)
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c96:	f042 0220 	orr.w	r2, r2, #32
 8002c9a:	645a      	str	r2, [r3, #68]	; 0x44
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	9304      	str	r3, [sp, #16]
 8002ca4:	9b04      	ldr	r3, [sp, #16]
  
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = iNemo_TX_Pin|iNemo_RX_Pin;
 8002ca6:	23c0      	movs	r3, #192	; 0xc0
 8002ca8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002caa:	2302      	movs	r3, #2
 8002cac:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb6:	a905      	add	r1, sp, #20
    */
    GPIO_InitStruct.Pin = iNemo_TX_Pin|iNemo_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002cb8:	2308      	movs	r3, #8
 8002cba:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cbc:	f7ff fad6 	bl	800226c <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart6_rx.Instance = DMA2_Stream1;
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002cc0:	4a22      	ldr	r2, [pc, #136]	; (8002d4c <HAL_UART_MspInit+0x2f4>)
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cc2:	60a6      	str	r6, [r4, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_usart6_rx.Instance = DMA2_Stream1;
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002cc4:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8002cc8:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cd0:	6123      	str	r3, [r4, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002cd2:	4620      	mov	r0, r4
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
    /* Peripheral DMA init*/
  
    hdma_usart6_rx.Instance = DMA2_Stream1;
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cd8:	60e6      	str	r6, [r4, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cda:	6166      	str	r6, [r4, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cdc:	61a6      	str	r6, [r4, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002cde:	61e3      	str	r3, [r4, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ce0:	6226      	str	r6, [r4, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ce2:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002ce4:	f7ff fbc0 	bl	8002468 <HAL_DMA_Init>
 8002ce8:	b108      	cbz	r0, 8002cee <HAL_UART_MspInit+0x296>
    {
      Error_Handler();
 8002cea:	f000 fb97 	bl	800341c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002cee:	636c      	str	r4, [r5, #52]	; 0x34
 8002cf0:	63a5      	str	r5, [r4, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002cf2:	b00a      	add	sp, #40	; 0x28
 8002cf4:	bd70      	pop	{r4, r5, r6, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40011000 	.word	0x40011000
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40020400 	.word	0x40020400
 8002d04:	2000404c 	.word	0x2000404c
 8002d08:	40026440 	.word	0x40026440
 8002d0c:	20003fe8 	.word	0x20003fe8
 8002d10:	400264b8 	.word	0x400264b8
 8002d14:	40004400 	.word	0x40004400
 8002d18:	40020000 	.word	0x40020000
 8002d1c:	20003db8 	.word	0x20003db8
 8002d20:	40026088 	.word	0x40026088
 8002d24:	400260a0 	.word	0x400260a0
 8002d28:	200040ac 	.word	0x200040ac
 8002d2c:	40004800 	.word	0x40004800
 8002d30:	20003eb4 	.word	0x20003eb4
 8002d34:	40026028 	.word	0x40026028
 8002d38:	40026058 	.word	0x40026058
 8002d3c:	20003f70 	.word	0x20003f70
 8002d40:	40011400 	.word	0x40011400
 8002d44:	40020800 	.word	0x40020800
 8002d48:	20003e2c 	.word	0x20003e2c
 8002d4c:	40026428 	.word	0x40026428

08002d50 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8002d50:	b508      	push	{r3, lr}
        // osDelay(100);
        // HAL_UART_Transmit_DMA(&huart1,(uint8_t *)test, strlen(test));
        for(;; )
        {

                osDelay(500); //TODO Remove
 8002d52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d56:	f7fe fbd6 	bl	8001506 <osDelay>
 8002d5a:	e7fa      	b.n	8002d52 <StartDefaultTask+0x2>

08002d5c <StartCombineM2>:
  /* USER CODE END StartCombineM1 */
}

/* StartCombineM2 function */
void StartCombineM2(void const * argument)
{
 8002d5c:	b508      	push	{r3, lr}
                        // TXBuf[4] = rptr->velocity[1];
                        // TXBuf[6] = rptr->position[1];

                        osPoolFree(mpool, rptr); // free memory allocated for message
                   }*/
        	osDelay(Ts);
 8002d5e:	4c02      	ldr	r4, [pc, #8]	; (8002d68 <StartCombineM2+0xc>)
 8002d60:	7820      	ldrb	r0, [r4, #0]
 8002d62:	f7fe fbd0 	bl	8001506 <osDelay>
 8002d66:	e7fb      	b.n	8002d60 <StartCombineM2+0x4>
 8002d68:	20000008 	.word	0x20000008

08002d6c <StartCombineM1>:
 8002d6c:	b508      	push	{r3, lr}
 8002d6e:	f7ff fff5 	bl	8002d5c <StartCombineM2>

08002d72 <StartCombineiNemo>:
 8002d72:	b508      	push	{r3, lr}
 8002d74:	f7ff fff2 	bl	8002d5c <StartCombineM2>

08002d78 <StartRXMotor2>:
 8002d78:	b508      	push	{r3, lr}
 8002d7a:	f7ff ffef 	bl	8002d5c <StartCombineM2>

08002d7e <StartRXMotor1>:
 8002d7e:	b508      	push	{r3, lr}
 8002d80:	f7ff ffec 	bl	8002d5c <StartCombineM2>

08002d84 <StartTXMotor2>:
 8002d84:	b508      	push	{r3, lr}
 8002d86:	f7ff ffe9 	bl	8002d5c <StartCombineM2>

08002d8a <StartTXMotor1>:
 8002d8a:	b508      	push	{r3, lr}
 8002d8c:	f7ff ffe6 	bl	8002d5c <StartCombineM2>

08002d90 <StartRXiNemo>:
 8002d90:	b508      	push	{r3, lr}
 8002d92:	f7ff ffe3 	bl	8002d5c <StartCombineM2>

08002d96 <StartRXPC>:
 8002d96:	b508      	push	{r3, lr}
 8002d98:	f7ff ffe0 	bl	8002d5c <StartCombineM2>

08002d9c <StartTXPC>:
  /* USER CODE END 5 */ 
}

/* StartTXPC function */
void StartTXPC(void const * argument)
{
 8002d9c:	b530      	push	{r4, r5, lr}
 8002d9e:	b08d      	sub	sp, #52	; 0x34
  /* USER CODE BEGIN StartTXPC */
        //osDelay(1000);
        //Motor_Init();
		uint8_t big_array[40];
		for(int i=0; i<40; i++){
 8002da0:	2300      	movs	r3, #0
		big_array[i] = 0xAA;
 8002da2:	ac02      	add	r4, sp, #8
 8002da4:	22aa      	movs	r2, #170	; 0xaa
 8002da6:	551a      	strb	r2, [r3, r4]
{
  /* USER CODE BEGIN StartTXPC */
        //osDelay(1000);
        //Motor_Init();
		uint8_t big_array[40];
		for(int i=0; i<40; i++){
 8002da8:	3301      	adds	r3, #1
 8002daa:	2b28      	cmp	r3, #40	; 0x28
 8002dac:	d1fb      	bne.n	8002da6 <StartTXPC+0xa>
//        	SetCurrent(TXBufM1);
//        	SetCurrent(TXBufM2);
        	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
        	uint8_t TXM1Complete = 0;
        	                if(HAL_UART_Transmit_DMA(&huart2, big_array, 40) != HAL_OK) { Error_Handler();}
        	                while(TXM1Complete!=1){xQueueReceive(StatusHandle, &TXM1Complete, 5);};
 8002dae:	4d11      	ldr	r5, [pc, #68]	; (8002df4 <StartTXPC+0x58>)
//        	i=1;;
//        	}

//        	SetCurrent(TXBufM1);
//        	SetCurrent(TXBufM2);
        	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8002db0:	4811      	ldr	r0, [pc, #68]	; (8002df8 <StartTXPC+0x5c>)
 8002db2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002db6:	f7ff fb3d 	bl	8002434 <HAL_GPIO_TogglePin>
        	uint8_t TXM1Complete = 0;
 8002dba:	2300      	movs	r3, #0
        	                if(HAL_UART_Transmit_DMA(&huart2, big_array, 40) != HAL_OK) { Error_Handler();}
 8002dbc:	2228      	movs	r2, #40	; 0x28
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	480e      	ldr	r0, [pc, #56]	; (8002dfc <StartTXPC+0x60>)
//        	}

//        	SetCurrent(TXBufM1);
//        	SetCurrent(TXBufM2);
        	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
        	uint8_t TXM1Complete = 0;
 8002dc2:	f88d 3007 	strb.w	r3, [sp, #7]
        	                if(HAL_UART_Transmit_DMA(&huart2, big_array, 40) != HAL_OK) { Error_Handler();}
 8002dc6:	f7fe fd0d 	bl	80017e4 <HAL_UART_Transmit_DMA>
 8002dca:	b100      	cbz	r0, 8002dce <StartTXPC+0x32>
 8002dcc:	e7fe      	b.n	8002dcc <StartTXPC+0x30>
        	                while(TXM1Complete!=1){xQueueReceive(StatusHandle, &TXM1Complete, 5);};
 8002dce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d007      	beq.n	8002de6 <StartTXPC+0x4a>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2205      	movs	r2, #5
 8002dda:	f10d 0107 	add.w	r1, sp, #7
 8002dde:	6828      	ldr	r0, [r5, #0]
 8002de0:	f7fe f800 	bl	8000de4 <xQueueGenericReceive>
 8002de4:	e7f3      	b.n	8002dce <StartTXPC+0x32>
        	                HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8002de6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dea:	4803      	ldr	r0, [pc, #12]	; (8002df8 <StartTXPC+0x5c>)
 8002dec:	f7ff fb22 	bl	8002434 <HAL_GPIO_TogglePin>
        	                //osDelay(5); //TODO Remove
        }
 8002df0:	e7de      	b.n	8002db0 <StartTXPC+0x14>
 8002df2:	bf00      	nop
 8002df4:	20004048 	.word	0x20004048
 8002df8:	40020400 	.word	0x40020400
 8002dfc:	2000420c 	.word	0x2000420c

08002e00 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002e00:	b530      	push	{r4, r5, lr}
 8002e02:	b095      	sub	sp, #84	; 0x54

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e04:	2300      	movs	r3, #0
 8002e06:	4a21      	ldr	r2, [pc, #132]	; (8002e8c <SystemClock_Config+0x8c>)
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002e0c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002e10:	6411      	str	r1, [r2, #64]	; 0x40
 8002e12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e14:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002e18:	9201      	str	r2, [sp, #4]
 8002e1a:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e1c:	4a1c      	ldr	r2, [pc, #112]	; (8002e90 <SystemClock_Config+0x90>)
 8002e1e:	9302      	str	r3, [sp, #8]
 8002e20:	6811      	ldr	r1, [r2, #0]
 8002e22:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002e26:	6011      	str	r1, [r2, #0]
 8002e28:	6812      	ldr	r2, [r2, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002e2a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e2c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002e30:	9202      	str	r2, [sp, #8]
 8002e32:	9a02      	ldr	r2, [sp, #8]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e34:	2202      	movs	r2, #2
 8002e36:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e38:	2201      	movs	r2, #1
 8002e3a:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e3c:	a808      	add	r0, sp, #32

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002e3e:	2210      	movs	r2, #16
 8002e40:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e42:	f7fe ff65 	bl	8001d10 <HAL_RCC_OscConfig>
 8002e46:	4601      	mov	r1, r0
 8002e48:	b100      	cbz	r0, 8002e4c <SystemClock_Config+0x4c>
 8002e4a:	e7fe      	b.n	8002e4a <SystemClock_Config+0x4a>
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002e4c:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e4e:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e50:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e52:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e54:	240f      	movs	r4, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e56:	a803      	add	r0, sp, #12
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e58:	9403      	str	r4, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e5a:	f7ff f8ff 	bl	800205c <HAL_RCC_ClockConfig>
 8002e5e:	4605      	mov	r5, r0
 8002e60:	b100      	cbz	r0, 8002e64 <SystemClock_Config+0x64>
 8002e62:	e7fe      	b.n	8002e62 <SystemClock_Config+0x62>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002e64:	f7ff f9ae 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 8002e68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e6c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e70:	f7ff fcd2 	bl	8002818 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002e74:	2004      	movs	r0, #4
 8002e76:	f7ff fce5 	bl	8002844 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002e7a:	462a      	mov	r2, r5
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e82:	f7ff fc89 	bl	8002798 <HAL_NVIC_SetPriority>
}
 8002e86:	b015      	add	sp, #84	; 0x54
 8002e88:	bd30      	pop	{r4, r5, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40007000 	.word	0x40007000

08002e94 <Motor_Commands>:
        SetBuf(buf, Current_Command, 14);
        SetBytes(buf, 8, RXBuf[0], 9, RXBuf[1], 10, RXBuf[2], 11, RXBuf[3]);
}

void Motor_Commands(void){
        Write_Access[0] = 0xA5;
 8002e94:	4b37      	ldr	r3, [pc, #220]	; (8002f74 <Motor_Commands+0xe0>)
void SetCurrent(uint8_t buf[]){
        SetBuf(buf, Current_Command, 14);
        SetBytes(buf, 8, RXBuf[0], 9, RXBuf[1], 10, RXBuf[2], 11, RXBuf[3]);
}

void Motor_Commands(void){
 8002e96:	b5f0      	push	{r4, r5, r6, r7, lr}
        Write_Access[1] = 0x3F;
        Write_Access[2] = 0x02;
        Write_Access[3] = 0x07;
        Write_Access[4] = 0x00;
        Write_Access[5] = 0x01;
        Write_Access[6] = 0xB3;
 8002e98:	26b3      	movs	r6, #179	; 0xb3
 8002e9a:	719e      	strb	r6, [r3, #6]
        Write_Access[7] = 0xE7;
 8002e9c:	26e7      	movs	r6, #231	; 0xe7
 8002e9e:	71de      	strb	r6, [r3, #7]

void Motor_Commands(void){
        Write_Access[0] = 0xA5;
        Write_Access[1] = 0x3F;
        Write_Access[2] = 0x02;
        Write_Access[3] = 0x07;
 8002ea0:	2207      	movs	r2, #7
        Write_Access[4] = 0x00;
        Write_Access[5] = 0x01;
        Write_Access[6] = 0xB3;
        Write_Access[7] = 0xE7;
        Write_Access[8] = 0x0F;
 8002ea2:	260f      	movs	r6, #15
        Write_Access[0] = 0xA5;
        Write_Access[1] = 0x3F;
        Write_Access[2] = 0x02;
        Write_Access[3] = 0x07;
        Write_Access[4] = 0x00;
        Write_Access[5] = 0x01;
 8002ea4:	2101      	movs	r1, #1
}

void Motor_Commands(void){
        Write_Access[0] = 0xA5;
        Write_Access[1] = 0x3F;
        Write_Access[2] = 0x02;
 8002ea6:	2002      	movs	r0, #2
        SetBuf(buf, Current_Command, 14);
        SetBytes(buf, 8, RXBuf[0], 9, RXBuf[1], 10, RXBuf[2], 11, RXBuf[3]);
}

void Motor_Commands(void){
        Write_Access[0] = 0xA5;
 8002ea8:	25a5      	movs	r5, #165	; 0xa5
        Write_Access[1] = 0x3F;
 8002eaa:	243f      	movs	r4, #63	; 0x3f
        Write_Access[2] = 0x02;
        Write_Access[3] = 0x07;
 8002eac:	70da      	strb	r2, [r3, #3]
        Write_Access[4] = 0x00;
        Write_Access[5] = 0x01;
        Write_Access[6] = 0xB3;
        Write_Access[7] = 0xE7;
        Write_Access[8] = 0x0F;
 8002eae:	721e      	strb	r6, [r3, #8]
void Motor_Commands(void){
        Write_Access[0] = 0xA5;
        Write_Access[1] = 0x3F;
        Write_Access[2] = 0x02;
        Write_Access[3] = 0x07;
        Write_Access[4] = 0x00;
 8002eb0:	2200      	movs	r2, #0
        Write_Access[5] = 0x01;
        Write_Access[6] = 0xB3;
        Write_Access[7] = 0xE7;
        Write_Access[8] = 0x0F;
        Write_Access[9] = 0x00;
        Write_Access[10] = 0x10;
 8002eb2:	2610      	movs	r6, #16
        Write_Access[11] = 0x3E;
 8002eb4:	273e      	movs	r7, #62	; 0x3e
void Motor_Commands(void){
        Write_Access[0] = 0xA5;
        Write_Access[1] = 0x3F;
        Write_Access[2] = 0x02;
        Write_Access[3] = 0x07;
        Write_Access[4] = 0x00;
 8002eb6:	711a      	strb	r2, [r3, #4]
        Write_Access[5] = 0x01;
 8002eb8:	7159      	strb	r1, [r3, #5]
        SetBuf(buf, Current_Command, 14);
        SetBytes(buf, 8, RXBuf[0], 9, RXBuf[1], 10, RXBuf[2], 11, RXBuf[3]);
}

void Motor_Commands(void){
        Write_Access[0] = 0xA5;
 8002eba:	701d      	strb	r5, [r3, #0]
        Write_Access[1] = 0x3F;
 8002ebc:	705c      	strb	r4, [r3, #1]
        Write_Access[2] = 0x02;
 8002ebe:	7098      	strb	r0, [r3, #2]
        Write_Access[4] = 0x00;
        Write_Access[5] = 0x01;
        Write_Access[6] = 0xB3;
        Write_Access[7] = 0xE7;
        Write_Access[8] = 0x0F;
        Write_Access[9] = 0x00;
 8002ec0:	725a      	strb	r2, [r3, #9]
        Write_Access[10] = 0x10;
 8002ec2:	729e      	strb	r6, [r3, #10]
        Write_Access[11] = 0x3E;
 8002ec4:	72df      	strb	r7, [r3, #11]

        Enable_Bridge[0] = 0xA5;
 8002ec6:	4b2c      	ldr	r3, [pc, #176]	; (8002f78 <Motor_Commands+0xe4>)
        Enable_Bridge[2] = 0x02;
        Enable_Bridge[3] = 0x01;
        Enable_Bridge[4] = 0x00;
        Enable_Bridge[5] = 0x01;
        Enable_Bridge[6] = 0x01;
        Enable_Bridge[7] = 0x47;
 8002ec8:	2747      	movs	r7, #71	; 0x47
        Write_Access[11] = 0x3E;

        Enable_Bridge[0] = 0xA5;
        Enable_Bridge[1] = 0x3F;
        Enable_Bridge[2] = 0x02;
        Enable_Bridge[3] = 0x01;
 8002eca:	70d9      	strb	r1, [r3, #3]
        Enable_Bridge[4] = 0x00;
 8002ecc:	711a      	strb	r2, [r3, #4]
        Enable_Bridge[5] = 0x01;
 8002ece:	7159      	strb	r1, [r3, #5]
        Enable_Bridge[6] = 0x01;
 8002ed0:	7199      	strb	r1, [r3, #6]
        Write_Access[8] = 0x0F;
        Write_Access[9] = 0x00;
        Write_Access[10] = 0x10;
        Write_Access[11] = 0x3E;

        Enable_Bridge[0] = 0xA5;
 8002ed2:	701d      	strb	r5, [r3, #0]
        Enable_Bridge[1] = 0x3F;
 8002ed4:	705c      	strb	r4, [r3, #1]
        Enable_Bridge[2] = 0x02;
 8002ed6:	7098      	strb	r0, [r3, #2]
        Enable_Bridge[3] = 0x01;
        Enable_Bridge[4] = 0x00;
        Enable_Bridge[5] = 0x01;
        Enable_Bridge[6] = 0x01;
        Enable_Bridge[7] = 0x47;
 8002ed8:	71df      	strb	r7, [r3, #7]
        Enable_Bridge[8] = 0x00;
 8002eda:	721a      	strb	r2, [r3, #8]
        Enable_Bridge[9] = 0x00;
 8002edc:	725a      	strb	r2, [r3, #9]
        Enable_Bridge[10] = 0x00;
 8002ede:	729a      	strb	r2, [r3, #10]
        Enable_Bridge[11] = 0x00;
 8002ee0:	72da      	strb	r2, [r3, #11]

        Disable_Bridge[0] = 0xA5;
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <Motor_Commands+0xe8>)
        Disable_Bridge[1] = 0x3F;
        Disable_Bridge[2] = 0x02;
        Disable_Bridge[3] = 0x01;
 8002ee4:	70d9      	strb	r1, [r3, #3]
        Disable_Bridge[4] = 0x00;
 8002ee6:	711a      	strb	r2, [r3, #4]
        Disable_Bridge[5] = 0x01;
 8002ee8:	7159      	strb	r1, [r3, #5]
        Disable_Bridge[6] = 0x01;
 8002eea:	7199      	strb	r1, [r3, #6]
        Enable_Bridge[8] = 0x00;
        Enable_Bridge[9] = 0x00;
        Enable_Bridge[10] = 0x00;
        Enable_Bridge[11] = 0x00;

        Disable_Bridge[0] = 0xA5;
 8002eec:	701d      	strb	r5, [r3, #0]
        Disable_Bridge[1] = 0x3F;
 8002eee:	705c      	strb	r4, [r3, #1]
        Disable_Bridge[2] = 0x02;
 8002ef0:	7098      	strb	r0, [r3, #2]
        Disable_Bridge[3] = 0x01;
        Disable_Bridge[4] = 0x00;
        Disable_Bridge[5] = 0x01;
        Disable_Bridge[6] = 0x01;
        Disable_Bridge[7] = 0x47;
 8002ef2:	71df      	strb	r7, [r3, #7]
        Disable_Bridge[8] = 0x01;
        Disable_Bridge[9] = 0x00;
        Disable_Bridge[10] = 0x33;
 8002ef4:	2733      	movs	r7, #51	; 0x33
 8002ef6:	729f      	strb	r7, [r3, #10]
        Disable_Bridge[11] = 0x31;
 8002ef8:	2731      	movs	r7, #49	; 0x31
        Disable_Bridge[3] = 0x01;
        Disable_Bridge[4] = 0x00;
        Disable_Bridge[5] = 0x01;
        Disable_Bridge[6] = 0x01;
        Disable_Bridge[7] = 0x47;
        Disable_Bridge[8] = 0x01;
 8002efa:	7219      	strb	r1, [r3, #8]
        Disable_Bridge[9] = 0x00;
 8002efc:	725a      	strb	r2, [r3, #9]
        Disable_Bridge[10] = 0x33;
        Disable_Bridge[11] = 0x31;
 8002efe:	72df      	strb	r7, [r3, #11]

        Current_Command[0] = 0xA5;
 8002f00:	4b1f      	ldr	r3, [pc, #124]	; (8002f80 <Motor_Commands+0xec>)
        Current_Command[1] = 0x3F;
        Current_Command[2] = 0x02;
        Current_Command[3] = 0x45;
 8002f02:	2745      	movs	r7, #69	; 0x45
 8002f04:	70df      	strb	r7, [r3, #3]
        Current_Command[4] = 0x00;
        Current_Command[5] = 0x02;
        Current_Command[6] = 0xF0;
 8002f06:	27f0      	movs	r7, #240	; 0xf0
 8002f08:	719f      	strb	r7, [r3, #6]
        Current_Command[7] = 0x49;
 8002f0a:	2749      	movs	r7, #73	; 0x49
 8002f0c:	71df      	strb	r7, [r3, #7]
        Current_Command[8] = 0x48; //Data to be set
 8002f0e:	2748      	movs	r7, #72	; 0x48
 8002f10:	721f      	strb	r7, [r3, #8]
        Current_Command[9] = 0x01; //Data to be set
        Current_Command[10] = 0x00; //Data to be set
        Current_Command[11] = 0x00; //Data to be set
        Current_Command[12] = 0xDC;
 8002f12:	27dc      	movs	r7, #220	; 0xdc
 8002f14:	731f      	strb	r7, [r3, #12]
        Current_Command[13] = 0x6F;
 8002f16:	276f      	movs	r7, #111	; 0x6f

        Current_Command[0] = 0xA5;
        Current_Command[1] = 0x3F;
        Current_Command[2] = 0x02;
        Current_Command[3] = 0x45;
        Current_Command[4] = 0x00;
 8002f18:	711a      	strb	r2, [r3, #4]
        Disable_Bridge[8] = 0x01;
        Disable_Bridge[9] = 0x00;
        Disable_Bridge[10] = 0x33;
        Disable_Bridge[11] = 0x31;

        Current_Command[0] = 0xA5;
 8002f1a:	701d      	strb	r5, [r3, #0]
        Current_Command[1] = 0x3F;
 8002f1c:	705c      	strb	r4, [r3, #1]
        Current_Command[2] = 0x02;
 8002f1e:	7098      	strb	r0, [r3, #2]
        Current_Command[3] = 0x45;
        Current_Command[4] = 0x00;
        Current_Command[5] = 0x02;
 8002f20:	7158      	strb	r0, [r3, #5]
        Current_Command[6] = 0xF0;
        Current_Command[7] = 0x49;
        Current_Command[8] = 0x48; //Data to be set
        Current_Command[9] = 0x01; //Data to be set
 8002f22:	7259      	strb	r1, [r3, #9]
        Current_Command[10] = 0x00; //Data to be set
 8002f24:	729a      	strb	r2, [r3, #10]
        Current_Command[11] = 0x00; //Data to be set
 8002f26:	72da      	strb	r2, [r3, #11]
        Current_Command[12] = 0xDC;
        Current_Command[13] = 0x6F;
 8002f28:	735f      	strb	r7, [r3, #13]

        Read_Current[0] = 0xA5;
 8002f2a:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <Motor_Commands+0xf0>)
        Read_Current[1] = 0x3F;
        Read_Current[2] = 0x01;
        Read_Current[3] = 0x10;
 8002f2c:	70de      	strb	r6, [r3, #3]
        Read_Current[4] = 0x03;
 8002f2e:	2603      	movs	r6, #3
 8002f30:	711e      	strb	r6, [r3, #4]
        Read_Current[5] = 0x01;
        Read_Current[6] = 0xBB;
 8002f32:	26bb      	movs	r6, #187	; 0xbb
 8002f34:	719e      	strb	r6, [r3, #6]
        Read_Current[7] = 0x9B;
 8002f36:	269b      	movs	r6, #155	; 0x9b
        Current_Command[12] = 0xDC;
        Current_Command[13] = 0x6F;

        Read_Current[0] = 0xA5;
        Read_Current[1] = 0x3F;
        Read_Current[2] = 0x01;
 8002f38:	7099      	strb	r1, [r3, #2]
        Read_Current[3] = 0x10;
        Read_Current[4] = 0x03;
        Read_Current[5] = 0x01;
 8002f3a:	7159      	strb	r1, [r3, #5]
        Current_Command[10] = 0x00; //Data to be set
        Current_Command[11] = 0x00; //Data to be set
        Current_Command[12] = 0xDC;
        Current_Command[13] = 0x6F;

        Read_Current[0] = 0xA5;
 8002f3c:	701d      	strb	r5, [r3, #0]
        Read_Current[1] = 0x3F;
 8002f3e:	705c      	strb	r4, [r3, #1]
        Read_Current[2] = 0x01;
        Read_Current[3] = 0x10;
        Read_Current[4] = 0x03;
        Read_Current[5] = 0x01;
        Read_Current[6] = 0xBB;
        Read_Current[7] = 0x9B;
 8002f40:	71de      	strb	r6, [r3, #7]

        Read_Velocity[0] = 0xA5;
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <Motor_Commands+0xf4>)
        Read_Velocity[1] = 0x3F;
        Read_Velocity[2] = 0x01;
        Read_Velocity[3] = 0x11;
 8002f44:	2611      	movs	r6, #17
 8002f46:	70de      	strb	r6, [r3, #3]
        Read_Velocity[4] = 0x02;
        Read_Velocity[5] = 0x02;
        Read_Velocity[6] = 0x8F;
 8002f48:	268f      	movs	r6, #143	; 0x8f
        Read_Current[6] = 0xBB;
        Read_Current[7] = 0x9B;

        Read_Velocity[0] = 0xA5;
        Read_Velocity[1] = 0x3F;
        Read_Velocity[2] = 0x01;
 8002f4a:	7099      	strb	r1, [r3, #2]
        Read_Current[4] = 0x03;
        Read_Current[5] = 0x01;
        Read_Current[6] = 0xBB;
        Read_Current[7] = 0x9B;

        Read_Velocity[0] = 0xA5;
 8002f4c:	701d      	strb	r5, [r3, #0]
        Read_Velocity[1] = 0x3F;
 8002f4e:	705c      	strb	r4, [r3, #1]
        Read_Velocity[2] = 0x01;
        Read_Velocity[3] = 0x11;
        Read_Velocity[4] = 0x02;
 8002f50:	7118      	strb	r0, [r3, #4]
        Read_Velocity[5] = 0x02;
 8002f52:	7158      	strb	r0, [r3, #5]
        Read_Velocity[6] = 0x8F;
 8002f54:	719e      	strb	r6, [r3, #6]
        Read_Velocity[7] = 0xF9;
 8002f56:	26f9      	movs	r6, #249	; 0xf9
 8002f58:	71de      	strb	r6, [r3, #7]

        Read_Position[0] = 0xA5;
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <Motor_Commands+0xf8>)
        Read_Position[1] = 0x3F;
        Read_Position[2] = 0x01;
        Read_Position[3] = 0x12;
        Read_Position[4] = 0x00;
 8002f5c:	711a      	strb	r2, [r3, #4]
        Read_Position[5] = 0x02;
        Read_Position[6] = 0xB0;
 8002f5e:	22b0      	movs	r2, #176	; 0xb0
        Read_Velocity[6] = 0x8F;
        Read_Velocity[7] = 0xF9;

        Read_Position[0] = 0xA5;
        Read_Position[1] = 0x3F;
        Read_Position[2] = 0x01;
 8002f60:	7099      	strb	r1, [r3, #2]
        Read_Position[3] = 0x12;
        Read_Position[4] = 0x00;
        Read_Position[5] = 0x02;
        Read_Position[6] = 0xB0;
 8002f62:	719a      	strb	r2, [r3, #6]
        Read_Velocity[7] = 0xF9;

        Read_Position[0] = 0xA5;
        Read_Position[1] = 0x3F;
        Read_Position[2] = 0x01;
        Read_Position[3] = 0x12;
 8002f64:	2112      	movs	r1, #18
        Read_Position[4] = 0x00;
        Read_Position[5] = 0x02;
        Read_Position[6] = 0xB0;
        Read_Position[7] = 0xCB;
 8002f66:	22cb      	movs	r2, #203	; 0xcb
        Read_Velocity[4] = 0x02;
        Read_Velocity[5] = 0x02;
        Read_Velocity[6] = 0x8F;
        Read_Velocity[7] = 0xF9;

        Read_Position[0] = 0xA5;
 8002f68:	701d      	strb	r5, [r3, #0]
        Read_Position[1] = 0x3F;
 8002f6a:	705c      	strb	r4, [r3, #1]
        Read_Position[2] = 0x01;
        Read_Position[3] = 0x12;
 8002f6c:	70d9      	strb	r1, [r3, #3]
        Read_Position[4] = 0x00;
        Read_Position[5] = 0x02;
 8002f6e:	7158      	strb	r0, [r3, #5]
        Read_Position[6] = 0xB0;
        Read_Position[7] = 0xCB;
 8002f70:	71da      	strb	r2, [r3, #7]
 8002f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f74:	200041e8 	.word	0x200041e8
 8002f78:	2000410c 	.word	0x2000410c
 8002f7c:	20003f64 	.word	0x20003f64
 8002f80:	20003ea4 	.word	0x20003ea4
 8002f84:	20003f5c 	.word	0x20003f5c
 8002f88:	2000416c 	.word	0x2000416c
 8002f8c:	20004164 	.word	0x20004164

08002f90 <ClearBuf>:
}

void ClearBuf(uint8_t buf[], uint8_t size){
 8002f90:	b510      	push	{r4, lr}
        uint8_t i;
        for (i = 0; i < size; i++) {
 8002f92:	4602      	mov	r2, r0
                buf[i] = 0;
 8002f94:	2400      	movs	r4, #0
        Read_Position[7] = 0xCB;
}

void ClearBuf(uint8_t buf[], uint8_t size){
        uint8_t i;
        for (i = 0; i < size; i++) {
 8002f96:	1a13      	subs	r3, r2, r0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	4299      	cmp	r1, r3
 8002f9c:	d902      	bls.n	8002fa4 <ClearBuf+0x14>
                buf[i] = 0;
 8002f9e:	f802 4b01 	strb.w	r4, [r2], #1
 8002fa2:	e7f8      	b.n	8002f96 <ClearBuf+0x6>
        }
}
 8002fa4:	bd10      	pop	{r4, pc}

08002fa6 <SetBuf>:

void SetBuf(uint8_t buf[], uint8_t set[], uint8_t size){
 8002fa6:	b570      	push	{r4, r5, r6, lr}
 8002fa8:	460e      	mov	r6, r1
        ClearBuf(buf, 14);
 8002faa:	210e      	movs	r1, #14
        for (i = 0; i < size; i++) {
                buf[i] = 0;
        }
}

void SetBuf(uint8_t buf[], uint8_t set[], uint8_t size){
 8002fac:	4614      	mov	r4, r2
        ClearBuf(buf, 14);
 8002fae:	f7ff ffef 	bl	8002f90 <ClearBuf>
 8002fb2:	3c01      	subs	r4, #1
 8002fb4:	1e73      	subs	r3, r6, #1
 8002fb6:	3801      	subs	r0, #1
 8002fb8:	4434      	add	r4, r6
        uint8_t i;
        for (i = 0; i < size; i++) {
 8002fba:	42a3      	cmp	r3, r4
 8002fbc:	d004      	beq.n	8002fc8 <SetBuf+0x22>
                buf[i] = set[i];
 8002fbe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002fc2:	f800 2f01 	strb.w	r2, [r0, #1]!
 8002fc6:	e7f8      	b.n	8002fba <SetBuf+0x14>
        }
}
 8002fc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002fcc <Motor_Init>:
//
// uint8_t Read_Current[7];
// uint8_t Read_Velocity[7];
// uint8_t Read_Position[7];

void Motor_Init(void){
 8002fcc:	b510      	push	{r4, lr}

	SetBuf(TXBufM1, Write_Access, 12);
 8002fce:	4c06      	ldr	r4, [pc, #24]	; (8002fe8 <Motor_Init+0x1c>)
 8002fd0:	4806      	ldr	r0, [pc, #24]	; (8002fec <Motor_Init+0x20>)
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	220c      	movs	r2, #12
 8002fd6:	f7ff ffe6 	bl	8002fa6 <SetBuf>
		SetBuf(TXBufM2, Write_Access, 12);
 8002fda:	4621      	mov	r1, r4
 8002fdc:	220c      	movs	r2, #12
 8002fde:	4804      	ldr	r0, [pc, #16]	; (8002ff0 <Motor_Init+0x24>)
        //HAL_UART_DMAResume(&huart2);
        //HAL_UART_DMAResume(&huart3);

        //if(HAL_UART_Transmit_DMA(&huart2, TXBufM1, 14) != HAL_OK) {Error_Handler(); }
        //if(HAL_UART_Transmit_DMA(&huart3, TXBufM2, 14) != HAL_OK) {Error_Handler(); }
}
 8002fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// uint8_t Read_Position[7];

void Motor_Init(void){

	SetBuf(TXBufM1, Write_Access, 12);
		SetBuf(TXBufM2, Write_Access, 12);
 8002fe4:	f7ff bfdf 	b.w	8002fa6 <SetBuf>
 8002fe8:	200041e8 	.word	0x200041e8
 8002fec:	20003e1c 	.word	0x20003e1c
 8002ff0:	20003e90 	.word	0x20003e90

08002ff4 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8002ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff6:	b0cb      	sub	sp, #300	; 0x12c
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff8:	2400      	movs	r4, #0
 8002ffa:	4d61      	ldr	r5, [pc, #388]	; (8003180 <main+0x18c>)
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ffc:	f7ff fc2e 	bl	800285c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8003000:	f7ff fefe 	bl	8002e00 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003004:	9402      	str	r4, [sp, #8]
 8003006:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8003008:	485e      	ldr	r0, [pc, #376]	; (8003184 <main+0x190>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	632b      	str	r3, [r5, #48]	; 0x30
 8003010:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	9302      	str	r3, [sp, #8]
 8003018:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800301a:	9403      	str	r4, [sp, #12]
 800301c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800301e:	f043 0302 	orr.w	r3, r3, #2
 8003022:	632b      	str	r3, [r5, #48]	; 0x30
 8003024:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	9303      	str	r3, [sp, #12]
 800302c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800302e:	9404      	str	r4, [sp, #16]
 8003030:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003032:	f043 0304 	orr.w	r3, r3, #4
 8003036:	632b      	str	r3, [r5, #48]	; 0x30
 8003038:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800303a:	f003 0304 	and.w	r3, r3, #4

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800303e:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003040:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8003042:	f44f 7100 	mov.w	r1, #512	; 0x200
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003046:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8003048:	f7ff f9f0 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800304c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003050:	9345      	str	r3, [sp, #276]	; 0x114
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003052:	a945      	add	r1, sp, #276	; 0x114
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003054:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003056:	484b      	ldr	r0, [pc, #300]	; (8003184 <main+0x190>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003058:	9346      	str	r3, [sp, #280]	; 0x118
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305a:	9447      	str	r4, [sp, #284]	; 0x11c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305c:	9448      	str	r4, [sp, #288]	; 0x120
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305e:	f7ff f905 	bl	800226c <HAL_GPIO_Init>
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003062:	9400      	str	r4, [sp, #0]
 8003064:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003066:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800306a:	632b      	str	r3, [r5, #48]	; 0x30
 800306c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800306e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003076:	9401      	str	r4, [sp, #4]
 8003078:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800307a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800307e:	632b      	str	r3, [r5, #48]	; 0x30
 8003080:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8003086:	4622      	mov	r2, r4
 8003088:	2105      	movs	r1, #5
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();
 800308a:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800308c:	200c      	movs	r0, #12
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();
 800308e:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8003090:	f7ff fb82 	bl	8002798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003094:	200c      	movs	r0, #12
 8003096:	f7ff fbb3 	bl	8002800 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800309a:	4622      	mov	r2, r4
 800309c:	2105      	movs	r1, #5
 800309e:	200e      	movs	r0, #14
 80030a0:	f7ff fb7a 	bl	8002798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80030a4:	200e      	movs	r0, #14
 80030a6:	f7ff fbab 	bl	8002800 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80030aa:	4622      	mov	r2, r4
 80030ac:	2105      	movs	r1, #5
 80030ae:	2010      	movs	r0, #16
 80030b0:	f7ff fb72 	bl	8002798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80030b4:	2010      	movs	r0, #16
 80030b6:	f7ff fba3 	bl	8002800 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80030ba:	4622      	mov	r2, r4
 80030bc:	2105      	movs	r1, #5
 80030be:	2011      	movs	r0, #17
 80030c0:	f7ff fb6a 	bl	8002798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80030c4:	2011      	movs	r0, #17
 80030c6:	f7ff fb9b 	bl	8002800 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80030ca:	4622      	mov	r2, r4
 80030cc:	2105      	movs	r1, #5
 80030ce:	2039      	movs	r0, #57	; 0x39
 80030d0:	f7ff fb62 	bl	8002798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80030d4:	2039      	movs	r0, #57	; 0x39
 80030d6:	f7ff fb93 	bl	8002800 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80030da:	4622      	mov	r2, r4
 80030dc:	2105      	movs	r1, #5
 80030de:	203a      	movs	r0, #58	; 0x3a
 80030e0:	f7ff fb5a 	bl	8002798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80030e4:	203a      	movs	r0, #58	; 0x3a
 80030e6:	f7ff fb8b 	bl	8002800 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80030ea:	4622      	mov	r2, r4
 80030ec:	2105      	movs	r1, #5
 80030ee:	2046      	movs	r0, #70	; 0x46
 80030f0:	f7ff fb52 	bl	8002798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80030f4:	2046      	movs	r0, #70	; 0x46
 80030f6:	f7ff fb83 	bl	8002800 <HAL_NVIC_EnableIRQ>

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 80030fa:	4823      	ldr	r0, [pc, #140]	; (8003188 <main+0x194>)
  huart2.Init.BaudRate = 921600;
 80030fc:	4b23      	ldr	r3, [pc, #140]	; (800318c <main+0x198>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030fe:	6084      	str	r4, [r0, #8]
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 921600;
 8003100:	f44f 2661 	mov.w	r6, #921600	; 0xe1000
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003104:	250c      	movs	r5, #12
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 921600;
 8003106:	e880 0048 	stmia.w	r0, {r3, r6}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
 800310a:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800310c:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800310e:	6145      	str	r5, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003110:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003112:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003114:	f7fe fb38 	bl	8001788 <HAL_UART_Init>
 8003118:	b100      	cbz	r0, 800311c <main+0x128>
 800311a:	e7fe      	b.n	800311a <main+0x126>

/* USART3 init function */
static void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 800311c:	4b1c      	ldr	r3, [pc, #112]	; (8003190 <main+0x19c>)
 800311e:	4a1d      	ldr	r2, [pc, #116]	; (8003194 <main+0x1a0>)
  huart3.Init.BaudRate = 921600;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003120:	6098      	str	r0, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003122:	60d8      	str	r0, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003124:	6118      	str	r0, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003126:	6198      	str	r0, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003128:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800312a:	4618      	mov	r0, r3
/* USART3 init function */
static void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 921600;
 800312c:	e883 0044 	stmia.w	r3, {r2, r6}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003130:	615d      	str	r5, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003132:	f7fe fb29 	bl	8001788 <HAL_UART_Init>
 8003136:	b100      	cbz	r0, 800313a <main+0x146>
 8003138:	e7fe      	b.n	8003138 <main+0x144>

/* USART6 init function */
static void MX_USART6_UART_Init(void)
{

  huart6.Instance = USART6;
 800313a:	4b17      	ldr	r3, [pc, #92]	; (8003198 <main+0x1a4>)
  huart6.Init.BaudRate = 115200;
 800313c:	4a17      	ldr	r2, [pc, #92]	; (800319c <main+0x1a8>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800313e:	6098      	str	r0, [r3, #8]
/* USART6 init function */
static void MX_USART6_UART_Init(void)
{

  huart6.Instance = USART6;
  huart6.Init.BaudRate = 115200;
 8003140:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003144:	60d8      	str	r0, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003146:	6118      	str	r0, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003148:	6198      	str	r0, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800314a:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800314c:	4618      	mov	r0, r3
/* USART6 init function */
static void MX_USART6_UART_Init(void)
{

  huart6.Instance = USART6;
  huart6.Init.BaudRate = 115200;
 800314e:	e883 0014 	stmia.w	r3, {r2, r4}
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003152:	615d      	str	r5, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003154:	f7fe fb18 	bl	8001788 <HAL_UART_Init>
 8003158:	b100      	cbz	r0, 800315c <main+0x168>
 800315a:	e7fe      	b.n	800315a <main+0x166>

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 800315c:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <main+0x1ac>)
  huart1.Init.BaudRate = 9600;
 800315e:	4911      	ldr	r1, [pc, #68]	; (80031a4 <main+0x1b0>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003160:	6098      	str	r0, [r3, #8]
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 8003162:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003166:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003168:	6118      	str	r0, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800316a:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800316c:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800316e:	4618      	mov	r0, r3
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003170:	615d      	str	r5, [r3, #20]
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 8003172:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003176:	f7fe fb07 	bl	8001788 <HAL_UART_Init>
 800317a:	4605      	mov	r5, r0
 800317c:	b1a0      	cbz	r0, 80031a8 <main+0x1b4>
 800317e:	e7fe      	b.n	800317e <main+0x18a>
 8003180:	40023800 	.word	0x40023800
 8003184:	40020400 	.word	0x40020400
 8003188:	2000420c 	.word	0x2000420c
 800318c:	40004400 	.word	0x40004400
 8003190:	20003f14 	.word	0x20003f14
 8003194:	40004800 	.word	0x40004800
 8003198:	200041a8 	.word	0x200041a8
 800319c:	40011400 	.word	0x40011400
 80031a0:	2000411c 	.word	0x2000411c
 80031a4:	40011000 	.word	0x40011000
        /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 80031a8:	4c73      	ldr	r4, [pc, #460]	; (8003378 <main+0x384>)
  MX_USART3_UART_Init();
  MX_USART6_UART_Init();
  MX_USART1_UART_Init();

  /* USER CODE BEGIN 2 */
        Motor_Commands();
 80031aa:	f7ff fe73 	bl	8002e94 <Motor_Commands>
        DMA_Start();
        Motor_Init();
 80031ae:	f7ff ff0d 	bl	8002fcc <Motor_Init>
        /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 80031b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b4:	af13      	add	r7, sp, #76	; 0x4c
 80031b6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80031b8:	4626      	mov	r6, r4
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80031ba:	4629      	mov	r1, r5
        /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 80031bc:	f856 3b04 	ldr.w	r3, [r6], #4
 80031c0:	603b      	str	r3, [r7, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80031c2:	a813      	add	r0, sp, #76	; 0x4c
 80031c4:	f7fe f983 	bl	80014ce <osThreadCreate>
 80031c8:	4b6c      	ldr	r3, [pc, #432]	; (800337c <main+0x388>)
 80031ca:	6018      	str	r0, [r3, #0]

  /* definition and creation of TXPC */
  osThreadDef(TXPC, StartTXPC, osPriorityRealtime, 0, 128);
 80031cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80031ce:	af18      	add	r7, sp, #96	; 0x60
 80031d0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80031d2:	6833      	ldr	r3, [r6, #0]
 80031d4:	603b      	str	r3, [r7, #0]
  TXPCHandle = osThreadCreate(osThread(TXPC), NULL);
 80031d6:	4629      	mov	r1, r5
 80031d8:	a818      	add	r0, sp, #96	; 0x60
 80031da:	f7fe f978 	bl	80014ce <osThreadCreate>
 80031de:	4b68      	ldr	r3, [pc, #416]	; (8003380 <main+0x38c>)

  /* definition and creation of RXPC */
  osThreadDef(RXPC, StartRXPC, osPriorityRealtime, 0, 128);
 80031e0:	f104 0718 	add.w	r7, r4, #24
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* definition and creation of TXPC */
  osThreadDef(TXPC, StartTXPC, osPriorityRealtime, 0, 128);
  TXPCHandle = osThreadCreate(osThread(TXPC), NULL);
 80031e4:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXPC */
  osThreadDef(RXPC, StartRXPC, osPriorityRealtime, 0, 128);
 80031e6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80031e8:	ae1d      	add	r6, sp, #116	; 0x74
 80031ea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	6033      	str	r3, [r6, #0]
  RXPCHandle = osThreadCreate(osThread(RXPC), NULL);
 80031f0:	4629      	mov	r1, r5
 80031f2:	a81d      	add	r0, sp, #116	; 0x74
 80031f4:	f7fe f96b 	bl	80014ce <osThreadCreate>
 80031f8:	4b62      	ldr	r3, [pc, #392]	; (8003384 <main+0x390>)

  /* definition and creation of RXiNemo */
  osThreadDef(RXiNemo, StartRXiNemo, osPriorityNormal, 0, 128);
 80031fa:	f104 072c 	add.w	r7, r4, #44	; 0x2c
  osThreadDef(TXPC, StartTXPC, osPriorityRealtime, 0, 128);
  TXPCHandle = osThreadCreate(osThread(TXPC), NULL);

  /* definition and creation of RXPC */
  osThreadDef(RXPC, StartRXPC, osPriorityRealtime, 0, 128);
  RXPCHandle = osThreadCreate(osThread(RXPC), NULL);
 80031fe:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXiNemo */
  osThreadDef(RXiNemo, StartRXiNemo, osPriorityNormal, 0, 128);
 8003200:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003202:	ae22      	add	r6, sp, #136	; 0x88
 8003204:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	6033      	str	r3, [r6, #0]
  RXiNemoHandle = osThreadCreate(osThread(RXiNemo), NULL);
 800320a:	4629      	mov	r1, r5
 800320c:	a822      	add	r0, sp, #136	; 0x88
 800320e:	f7fe f95e 	bl	80014ce <osThreadCreate>
 8003212:	4b5d      	ldr	r3, [pc, #372]	; (8003388 <main+0x394>)

  /* definition and creation of TXMotor1 */
  osThreadDef(TXMotor1, StartTXMotor1, osPriorityHigh, 0, 128);
 8003214:	f104 0740 	add.w	r7, r4, #64	; 0x40
  osThreadDef(RXPC, StartRXPC, osPriorityRealtime, 0, 128);
  RXPCHandle = osThreadCreate(osThread(RXPC), NULL);

  /* definition and creation of RXiNemo */
  osThreadDef(RXiNemo, StartRXiNemo, osPriorityNormal, 0, 128);
  RXiNemoHandle = osThreadCreate(osThread(RXiNemo), NULL);
 8003218:	6018      	str	r0, [r3, #0]

  /* definition and creation of TXMotor1 */
  osThreadDef(TXMotor1, StartTXMotor1, osPriorityHigh, 0, 128);
 800321a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800321c:	ae27      	add	r6, sp, #156	; 0x9c
 800321e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	6033      	str	r3, [r6, #0]
  TXMotor1Handle = osThreadCreate(osThread(TXMotor1), NULL);
 8003224:	4629      	mov	r1, r5
 8003226:	a827      	add	r0, sp, #156	; 0x9c
 8003228:	f7fe f951 	bl	80014ce <osThreadCreate>
 800322c:	4b57      	ldr	r3, [pc, #348]	; (800338c <main+0x398>)

  /* definition and creation of TXMotor2 */
  osThreadDef(TXMotor2, StartTXMotor2, osPriorityHigh, 0, 128);
 800322e:	f104 0754 	add.w	r7, r4, #84	; 0x54
  osThreadDef(RXiNemo, StartRXiNemo, osPriorityNormal, 0, 128);
  RXiNemoHandle = osThreadCreate(osThread(RXiNemo), NULL);

  /* definition and creation of TXMotor1 */
  osThreadDef(TXMotor1, StartTXMotor1, osPriorityHigh, 0, 128);
  TXMotor1Handle = osThreadCreate(osThread(TXMotor1), NULL);
 8003232:	6018      	str	r0, [r3, #0]

  /* definition and creation of TXMotor2 */
  osThreadDef(TXMotor2, StartTXMotor2, osPriorityHigh, 0, 128);
 8003234:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003236:	ae2c      	add	r6, sp, #176	; 0xb0
 8003238:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	6033      	str	r3, [r6, #0]
  TXMotor2Handle = osThreadCreate(osThread(TXMotor2), NULL);
 800323e:	4629      	mov	r1, r5
 8003240:	a82c      	add	r0, sp, #176	; 0xb0
 8003242:	f7fe f944 	bl	80014ce <osThreadCreate>
 8003246:	4b52      	ldr	r3, [pc, #328]	; (8003390 <main+0x39c>)

  /* definition and creation of RXMotor1 */
  osThreadDef(RXMotor1, StartRXMotor1, osPriorityAboveNormal, 0, 128);
 8003248:	f104 0768 	add.w	r7, r4, #104	; 0x68
  osThreadDef(TXMotor1, StartTXMotor1, osPriorityHigh, 0, 128);
  TXMotor1Handle = osThreadCreate(osThread(TXMotor1), NULL);

  /* definition and creation of TXMotor2 */
  osThreadDef(TXMotor2, StartTXMotor2, osPriorityHigh, 0, 128);
  TXMotor2Handle = osThreadCreate(osThread(TXMotor2), NULL);
 800324c:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXMotor1 */
  osThreadDef(RXMotor1, StartRXMotor1, osPriorityAboveNormal, 0, 128);
 800324e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003250:	ae31      	add	r6, sp, #196	; 0xc4
 8003252:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	6033      	str	r3, [r6, #0]
  RXMotor1Handle = osThreadCreate(osThread(RXMotor1), NULL);
 8003258:	4629      	mov	r1, r5
 800325a:	a831      	add	r0, sp, #196	; 0xc4
 800325c:	f7fe f937 	bl	80014ce <osThreadCreate>
 8003260:	4b4c      	ldr	r3, [pc, #304]	; (8003394 <main+0x3a0>)

  /* definition and creation of RXMotor2 */
  osThreadDef(RXMotor2, StartRXMotor2, osPriorityAboveNormal, 0, 128);
 8003262:	f104 077c 	add.w	r7, r4, #124	; 0x7c
  osThreadDef(TXMotor2, StartTXMotor2, osPriorityHigh, 0, 128);
  TXMotor2Handle = osThreadCreate(osThread(TXMotor2), NULL);

  /* definition and creation of RXMotor1 */
  osThreadDef(RXMotor1, StartRXMotor1, osPriorityAboveNormal, 0, 128);
  RXMotor1Handle = osThreadCreate(osThread(RXMotor1), NULL);
 8003266:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXMotor2 */
  osThreadDef(RXMotor2, StartRXMotor2, osPriorityAboveNormal, 0, 128);
 8003268:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800326a:	ae36      	add	r6, sp, #216	; 0xd8
 800326c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6033      	str	r3, [r6, #0]
  RXMotor2Handle = osThreadCreate(osThread(RXMotor2), NULL);
 8003272:	4629      	mov	r1, r5
 8003274:	a836      	add	r0, sp, #216	; 0xd8
 8003276:	f7fe f92a 	bl	80014ce <osThreadCreate>
 800327a:	4b47      	ldr	r3, [pc, #284]	; (8003398 <main+0x3a4>)

  /* definition and creation of CombineiNemo */
  osThreadDef(CombineiNemo, StartCombineiNemo, osPriorityRealtime, 0, 128);
 800327c:	f104 0790 	add.w	r7, r4, #144	; 0x90
  osThreadDef(RXMotor1, StartRXMotor1, osPriorityAboveNormal, 0, 128);
  RXMotor1Handle = osThreadCreate(osThread(RXMotor1), NULL);

  /* definition and creation of RXMotor2 */
  osThreadDef(RXMotor2, StartRXMotor2, osPriorityAboveNormal, 0, 128);
  RXMotor2Handle = osThreadCreate(osThread(RXMotor2), NULL);
 8003280:	6018      	str	r0, [r3, #0]

  /* definition and creation of CombineiNemo */
  osThreadDef(CombineiNemo, StartCombineiNemo, osPriorityRealtime, 0, 128);
 8003282:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003284:	ae3b      	add	r6, sp, #236	; 0xec
 8003286:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	6033      	str	r3, [r6, #0]
  CombineiNemoHandle = osThreadCreate(osThread(CombineiNemo), NULL);
 800328c:	4629      	mov	r1, r5
 800328e:	a83b      	add	r0, sp, #236	; 0xec
 8003290:	f7fe f91d 	bl	80014ce <osThreadCreate>
 8003294:	4b41      	ldr	r3, [pc, #260]	; (800339c <main+0x3a8>)

  /* definition and creation of CombineM1 */
  osThreadDef(CombineM1, StartCombineM1, osPriorityRealtime, 0, 128);
 8003296:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
  osThreadDef(RXMotor2, StartRXMotor2, osPriorityAboveNormal, 0, 128);
  RXMotor2Handle = osThreadCreate(osThread(RXMotor2), NULL);

  /* definition and creation of CombineiNemo */
  osThreadDef(CombineiNemo, StartCombineiNemo, osPriorityRealtime, 0, 128);
  CombineiNemoHandle = osThreadCreate(osThread(CombineiNemo), NULL);
 800329a:	6018      	str	r0, [r3, #0]

  /* definition and creation of CombineM1 */
  osThreadDef(CombineM1, StartCombineM1, osPriorityRealtime, 0, 128);
 800329c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800329e:	ae40      	add	r6, sp, #256	; 0x100
 80032a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	6033      	str	r3, [r6, #0]
  CombineM1Handle = osThreadCreate(osThread(CombineM1), NULL);
 80032a6:	4629      	mov	r1, r5
 80032a8:	a840      	add	r0, sp, #256	; 0x100
 80032aa:	f7fe f910 	bl	80014ce <osThreadCreate>
 80032ae:	4b3c      	ldr	r3, [pc, #240]	; (80033a0 <main+0x3ac>)

  /* definition and creation of CombineM2 */
  osThreadDef(CombineM2, StartCombineM2, osPriorityRealtime, 0, 128);
 80032b0:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
  osThreadDef(CombineiNemo, StartCombineiNemo, osPriorityRealtime, 0, 128);
  CombineiNemoHandle = osThreadCreate(osThread(CombineiNemo), NULL);

  /* definition and creation of CombineM1 */
  osThreadDef(CombineM1, StartCombineM1, osPriorityRealtime, 0, 128);
  CombineM1Handle = osThreadCreate(osThread(CombineM1), NULL);
 80032b4:	6018      	str	r0, [r3, #0]

  /* definition and creation of CombineM2 */
  osThreadDef(CombineM2, StartCombineM2, osPriorityRealtime, 0, 128);
 80032b6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80032b8:	ae45      	add	r6, sp, #276	; 0x114
 80032ba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	6033      	str	r3, [r6, #0]
  CombineM2Handle = osThreadCreate(osThread(CombineM2), NULL);
 80032c0:	4629      	mov	r1, r5
 80032c2:	a845      	add	r0, sp, #276	; 0x114
 80032c4:	f7fe f903 	bl	80014ce <osThreadCreate>
 80032c8:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <main+0x3b0>)
        /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of TXBox */
  osMessageQDef(TXBox, 6, float);
 80032ca:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
  osThreadDef(CombineM1, StartCombineM1, osPriorityRealtime, 0, 128);
  CombineM1Handle = osThreadCreate(osThread(CombineM1), NULL);

  /* definition and creation of CombineM2 */
  osThreadDef(CombineM2, StartCombineM2, osPriorityRealtime, 0, 128);
  CombineM2Handle = osThreadCreate(osThread(CombineM2), NULL);
 80032ce:	6018      	str	r0, [r3, #0]
        /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of TXBox */
  osMessageQDef(TXBox, 6, float);
 80032d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032d4:	ab05      	add	r3, sp, #20
 80032d6:	e883 0003 	stmia.w	r3, {r0, r1}
  TXBoxHandle = osMessageCreate(osMessageQ(TXBox), NULL);
 80032da:	4629      	mov	r1, r5
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe f91a 	bl	8001516 <osMessageCreate>
 80032e2:	4b31      	ldr	r3, [pc, #196]	; (80033a8 <main+0x3b4>)

  /* definition and creation of TXBoxM1 */
  osMessageQDef(TXBoxM1, 16, uint16_t);
 80032e4:	f104 06d4 	add.w	r6, r4, #212	; 0xd4
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of TXBox */
  osMessageQDef(TXBox, 6, float);
  TXBoxHandle = osMessageCreate(osMessageQ(TXBox), NULL);
 80032e8:	6018      	str	r0, [r3, #0]

  /* definition and creation of TXBoxM1 */
  osMessageQDef(TXBoxM1, 16, uint16_t);
 80032ea:	e896 0003 	ldmia.w	r6, {r0, r1}
 80032ee:	ab07      	add	r3, sp, #28
 80032f0:	e883 0003 	stmia.w	r3, {r0, r1}
  TXBoxM1Handle = osMessageCreate(osMessageQ(TXBoxM1), NULL);
 80032f4:	4629      	mov	r1, r5
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe f90d 	bl	8001516 <osMessageCreate>
 80032fc:	4b2b      	ldr	r3, [pc, #172]	; (80033ac <main+0x3b8>)
 80032fe:	6018      	str	r0, [r3, #0]

  /* definition and creation of TXBoxM2 */
  osMessageQDef(TXBoxM2, 16, uint16_t);
 8003300:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003304:	ab09      	add	r3, sp, #36	; 0x24
 8003306:	e883 0003 	stmia.w	r3, {r0, r1}
  TXBoxM2Handle = osMessageCreate(osMessageQ(TXBoxM2), NULL);
 800330a:	4629      	mov	r1, r5
 800330c:	4618      	mov	r0, r3
 800330e:	f7fe f902 	bl	8001516 <osMessageCreate>
 8003312:	4b27      	ldr	r3, [pc, #156]	; (80033b0 <main+0x3bc>)
 8003314:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXBoxiNemo */
  osMessageQDef(RXBoxiNemo, 16, uint16_t);
 8003316:	e896 0003 	ldmia.w	r6, {r0, r1}
 800331a:	ab0b      	add	r3, sp, #44	; 0x2c
 800331c:	e883 0003 	stmia.w	r3, {r0, r1}
  RXBoxiNemoHandle = osMessageCreate(osMessageQ(RXBoxiNemo), NULL);
 8003320:	4629      	mov	r1, r5
 8003322:	4618      	mov	r0, r3
 8003324:	f7fe f8f7 	bl	8001516 <osMessageCreate>
 8003328:	4b22      	ldr	r3, [pc, #136]	; (80033b4 <main+0x3c0>)
 800332a:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXBoxM1 */
  osMessageQDef(RXBoxM1, 16, uint16_t);
 800332c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003330:	ab0d      	add	r3, sp, #52	; 0x34
 8003332:	e883 0003 	stmia.w	r3, {r0, r1}
  RXBoxM1Handle = osMessageCreate(osMessageQ(RXBoxM1), NULL);
 8003336:	4629      	mov	r1, r5
 8003338:	4618      	mov	r0, r3
 800333a:	f7fe f8ec 	bl	8001516 <osMessageCreate>
 800333e:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <main+0x3c4>)
 8003340:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXBoxM2 */
  osMessageQDef(RXBoxM2, 16, uint16_t);
 8003342:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003346:	ab0f      	add	r3, sp, #60	; 0x3c
 8003348:	e883 0003 	stmia.w	r3, {r0, r1}
  RXBoxM2Handle = osMessageCreate(osMessageQ(RXBoxM2), NULL);
 800334c:	4629      	mov	r1, r5
 800334e:	4618      	mov	r0, r3
 8003350:	f7fe f8e1 	bl	8001516 <osMessageCreate>
 8003354:	4b19      	ldr	r3, [pc, #100]	; (80033bc <main+0x3c8>)

  /* definition and creation of Status */
  osMessageQDef(Status, 16, uint8_t);
 8003356:	34dc      	adds	r4, #220	; 0xdc
  osMessageQDef(RXBoxM1, 16, uint16_t);
  RXBoxM1Handle = osMessageCreate(osMessageQ(RXBoxM1), NULL);

  /* definition and creation of RXBoxM2 */
  osMessageQDef(RXBoxM2, 16, uint16_t);
  RXBoxM2Handle = osMessageCreate(osMessageQ(RXBoxM2), NULL);
 8003358:	6018      	str	r0, [r3, #0]

  /* definition and creation of Status */
  osMessageQDef(Status, 16, uint8_t);
 800335a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800335e:	ab11      	add	r3, sp, #68	; 0x44
 8003360:	e883 0003 	stmia.w	r3, {r0, r1}
  StatusHandle = osMessageCreate(osMessageQ(Status), NULL);
 8003364:	4618      	mov	r0, r3
 8003366:	4629      	mov	r1, r5
 8003368:	f7fe f8d5 	bl	8001516 <osMessageCreate>
 800336c:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <main+0x3cc>)
 800336e:	6018      	str	r0, [r3, #0]
        /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8003370:	f7fe f8a8 	bl	80014c4 <osKernelStart>
 8003374:	e7fe      	b.n	8003374 <main+0x380>
 8003376:	bf00      	nop
 8003378:	08003500 	.word	0x08003500
 800337c:	20003db4 	.word	0x20003db4
 8003380:	20004184 	.word	0x20004184
 8003384:	20004258 	.word	0x20004258
 8003388:	20004180 	.word	0x20004180
 800338c:	20003fe0 	.word	0x20003fe0
 8003390:	20003e8c 	.word	0x20003e8c
 8003394:	20004194 	.word	0x20004194
 8003398:	20004188 	.word	0x20004188
 800339c:	20004190 	.word	0x20004190
 80033a0:	2000425c 	.word	0x2000425c
 80033a4:	20004160 	.word	0x20004160
 80033a8:	20003fe4 	.word	0x20003fe4
 80033ac:	20004178 	.word	0x20004178
 80033b0:	20003e18 	.word	0x20003e18
 80033b4:	20003f58 	.word	0x20003f58
 80033b8:	20003f54 	.word	0x20003f54
 80033bc:	2000418c 	.word	0x2000418c
 80033c0:	20004048 	.word	0x20004048

080033c4 <HAL_UART_TxCpltCallback>:

static void dmaError(DMA_HandleTypeDef *hdma){
        printf("DMA Error!");
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80033c4:	b513      	push	{r0, r1, r4, lr}
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	    xHigherPriorityTaskWoken = pdFALSE;
    TXM1Complete=1;
    xQueueSendFromISR( StatusHandle, &TXM1Complete, &xHigherPriorityTaskWoken );
 80033c6:	480c      	ldr	r0, [pc, #48]	; (80033f8 <HAL_UART_TxCpltCallback+0x34>)

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	    xHigherPriorityTaskWoken = pdFALSE;
    TXM1Complete=1;
 80033c8:	490c      	ldr	r1, [pc, #48]	; (80033fc <HAL_UART_TxCpltCallback+0x38>)
    xQueueSendFromISR( StatusHandle, &TXM1Complete, &xHigherPriorityTaskWoken );
 80033ca:	6800      	ldr	r0, [r0, #0]
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	    xHigherPriorityTaskWoken = pdFALSE;
 80033cc:	aa02      	add	r2, sp, #8
 80033ce:	2300      	movs	r3, #0
 80033d0:	f842 3d04 	str.w	r3, [r2, #-4]!
    TXM1Complete=1;
 80033d4:	2401      	movs	r4, #1
 80033d6:	700c      	strb	r4, [r1, #0]
    xQueueSendFromISR( StatusHandle, &TXM1Complete, &xHigherPriorityTaskWoken );
 80033d8:	f7fd fca8 	bl	8000d2c <xQueueGenericSendFromISR>
    TXM2Complete=1;
 80033dc:	4b08      	ldr	r3, [pc, #32]	; (8003400 <HAL_UART_TxCpltCallback+0x3c>)
 80033de:	701c      	strb	r4, [r3, #0]

    //Now the buffer is empty we can switch context if necessary.
        if( xHigherPriorityTaskWoken )
 80033e0:	9b01      	ldr	r3, [sp, #4]
 80033e2:	b13b      	cbz	r3, 80033f4 <HAL_UART_TxCpltCallback+0x30>
        {
        	/* signal end-of-irq and possible reschedule point */
        	  portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80033e4:	4b07      	ldr	r3, [pc, #28]	; (8003404 <HAL_UART_TxCpltCallback+0x40>)
 80033e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	f3bf 8f6f 	isb	sy
        }
}
 80033f4:	b002      	add	sp, #8
 80033f6:	bd10      	pop	{r4, pc}
 80033f8:	20004048 	.word	0x20004048
 80033fc:	20003d71 	.word	0x20003d71
 8003400:	20003d70 	.word	0x20003d70
 8003404:	e000ed04 	.word	0xe000ed04

08003408 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003408:	6802      	ldr	r2, [r0, #0]
 800340a:	4b03      	ldr	r3, [pc, #12]	; (8003418 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800340c:	429a      	cmp	r2, r3
 800340e:	d101      	bne.n	8003414 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003410:	f7ff ba3e 	b.w	8002890 <HAL_IncTick>
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40010000 	.word	0x40010000

0800341c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 800341c:	e7fe      	b.n	800341c <Error_Handler>
	...

08003420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003458 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003424:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003426:	e003      	b.n	8003430 <LoopCopyDataInit>

08003428 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800342a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800342c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800342e:	3104      	adds	r1, #4

08003430 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003430:	480b      	ldr	r0, [pc, #44]	; (8003460 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003432:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003434:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003436:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003438:	d3f6      	bcc.n	8003428 <CopyDataInit>
  ldr  r2, =_sbss
 800343a:	4a0b      	ldr	r2, [pc, #44]	; (8003468 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800343c:	e002      	b.n	8003444 <LoopFillZerobss>

0800343e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800343e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003440:	f842 3b04 	str.w	r3, [r2], #4

08003444 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003444:	4b09      	ldr	r3, [pc, #36]	; (800346c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003446:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003448:	d3f9      	bcc.n	800343e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800344a:	f7ff fa2f 	bl	80028ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800344e:	f000 f811 	bl	8003474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003452:	f7ff fdcf 	bl	8002ff4 <main>
  bx  lr    
 8003456:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003458:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800345c:	0800367c 	.word	0x0800367c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003460:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003464:	2000000c 	.word	0x2000000c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8003468:	2000000c 	.word	0x2000000c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800346c:	20004260 	.word	0x20004260

08003470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003470:	e7fe      	b.n	8003470 <ADC_IRQHandler>
	...

08003474 <__libc_init_array>:
 8003474:	b570      	push	{r4, r5, r6, lr}
 8003476:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <__libc_init_array+0x3c>)
 8003478:	4c0e      	ldr	r4, [pc, #56]	; (80034b4 <__libc_init_array+0x40>)
 800347a:	1ae4      	subs	r4, r4, r3
 800347c:	10a4      	asrs	r4, r4, #2
 800347e:	2500      	movs	r5, #0
 8003480:	461e      	mov	r6, r3
 8003482:	42a5      	cmp	r5, r4
 8003484:	d004      	beq.n	8003490 <__libc_init_array+0x1c>
 8003486:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800348a:	4798      	blx	r3
 800348c:	3501      	adds	r5, #1
 800348e:	e7f8      	b.n	8003482 <__libc_init_array+0xe>
 8003490:	f000 f82a 	bl	80034e8 <_init>
 8003494:	4c08      	ldr	r4, [pc, #32]	; (80034b8 <__libc_init_array+0x44>)
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <__libc_init_array+0x48>)
 8003498:	1ae4      	subs	r4, r4, r3
 800349a:	10a4      	asrs	r4, r4, #2
 800349c:	2500      	movs	r5, #0
 800349e:	461e      	mov	r6, r3
 80034a0:	42a5      	cmp	r5, r4
 80034a2:	d004      	beq.n	80034ae <__libc_init_array+0x3a>
 80034a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034a8:	4798      	blx	r3
 80034aa:	3501      	adds	r5, #1
 80034ac:	e7f8      	b.n	80034a0 <__libc_init_array+0x2c>
 80034ae:	bd70      	pop	{r4, r5, r6, pc}
 80034b0:	08003674 	.word	0x08003674
 80034b4:	08003674 	.word	0x08003674
 80034b8:	08003678 	.word	0x08003678
 80034bc:	08003674 	.word	0x08003674

080034c0 <memcpy>:
 80034c0:	b510      	push	{r4, lr}
 80034c2:	1e43      	subs	r3, r0, #1
 80034c4:	440a      	add	r2, r1
 80034c6:	4291      	cmp	r1, r2
 80034c8:	d004      	beq.n	80034d4 <memcpy+0x14>
 80034ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034d2:	e7f8      	b.n	80034c6 <memcpy+0x6>
 80034d4:	bd10      	pop	{r4, pc}

080034d6 <memset>:
 80034d6:	4402      	add	r2, r0
 80034d8:	4603      	mov	r3, r0
 80034da:	4293      	cmp	r3, r2
 80034dc:	d002      	beq.n	80034e4 <memset+0xe>
 80034de:	f803 1b01 	strb.w	r1, [r3], #1
 80034e2:	e7fa      	b.n	80034da <memset+0x4>
 80034e4:	4770      	bx	lr
	...

080034e8 <_init>:
 80034e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ea:	bf00      	nop
 80034ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ee:	bc08      	pop	{r3}
 80034f0:	469e      	mov	lr, r3
 80034f2:	4770      	bx	lr

080034f4 <_fini>:
 80034f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f6:	bf00      	nop
 80034f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fa:	bc08      	pop	{r3}
 80034fc:	469e      	mov	lr, r3
 80034fe:	4770      	bx	lr
